35.3 Variablen und Zuweisungen

JAVA ist eine stark typisierte Sprache: Alle Ausdrücke haben einen Typ. Das gilt auch für Variablen, deren Typ bei ihrer Deklaration angegeben werden muss. In JAVA gibt es Variablen mit Referenz- und Wertsemantik. Welche Semantik eine Variable hat, richtet sich nach ihrem Typ. Typen, die zu Variablen mit Wertsemantik führen, sind die oben genannten primitiven, nämlich byte, short, int, long, float, double, boolean und char. Variablen, die mit einem anderen Typ deklariert werden, haben Referenzsemantik.
Variablen werden in JAVA genauso wie in SMALLTALK explizit per Zuweisungsoperator "=" und implizit per Methodenaufruf Werte zugewiesen. Der Inhalt von Variablen primitiver Typen ist ein entsprechender Wert, während Variablen anderer Typen immer eine Referenz auf ein Objekt halten.
In JAVA ist es nicht möglich, Pointervariablen explizit zu deklarieren. Daher gibt es insbesondere beim Methodenaufruf (und den damit verbundenen impliziten Zuweisungen) kein "Call by reference" in JAVA, sondern nur ein "Call by value". Dies ändert sich auch nicht, wenn Variablen, die mit Referenztypen deklariert sind, Referenzsemantik haben. Bei den impliziten Zuweisungen eines Methodenaufrufs wird immer eine Kopie des Zeigers an die formalen Parameter übergeben. Weitere Informationen finden Sie auch in den Bemerkungen in Abschnitt 4.3.2 (Kurseinheit 1) und Kapitel 37.
Seit JAVA 5 können Werte primitiven Typs direkt Variablen der entsprechenden Wrapper-Typen zugewiesen werden und umgekehrt. Dies nennt man "Auto boxing" bzw. "Auto unboxing". Dabei können jedoch, ähnlich wie bei der Handhabung bestimmter Werte als Objekte in SMALLTALK (siehe Abschnitt 1.4 in Kurseinheit 1), unerwartete Phänomene auftreten: Zwei Objekte, die den gleichen Wert repräsentieren, sind zwar immer gleich, müssen aber nicht identisch sein. Daher ist es wichtig, in JAVA sorgfältig zu überlegen, ob man die equals-Methode oder den Test auf Identität (==) verwenden sollte. Andernfalls können schwer zu findende Programmierfehler auftreten.

Frage: Was bedeutet es, dass JAVA eine stark typisierte Sprache ist?
Antwort: JAVA ist eine stark typisierte Sprache, was bedeutet, dass alle Ausdrücke einen Typ haben und Variablen bei ihrer Deklaration einen Typ angeben müssen.

Frage: Welche Semantik haben Variablen in JAVA, und wie wird dies bestimmt?
Antwort: Variablen in JAVA haben entweder Referenzsemantik oder Wertsemantik, je nach ihrem Typ. Primitive Typen wie byte, short, int, usw., haben Wertsemantik. Andere Typen haben Referenzsemantik.

Frage: Wie werden Werte Variablen in JAVA zugewiesen?
Antwort: In JAVA werden Werte Variablen sowohl explizit per Zuweisungsoperator "=" als auch implizit per Methodenaufruf zugewiesen.

Frage: Was unterscheidet eine Wertzuweisung und eine Zuweisung von Referenzen in JAVA?
Antwort: Bei der Wertzuweisung wird der tatsächliche Wert einer Variable kopiert, während bei der Zuweisung von Referenzen nur die Referenz auf das Objekt kopiert wird.

Frage: Gibt es in JAVA "Call by reference"?
Antwort: Nein, in JAVA gibt es kein "Call by reference", sondern nur "Call by value". Auch wenn Variablen Referenztypen haben, wird bei Methodenaufrufen immer eine Kopie des Zeigers an die formalen Parameter übergeben.

Frage: Was ist "Auto boxing" und "Auto unboxing" in JAVA?
Antwort: Seit JAVA 5 können Werte primitiven Typs direkt Variablen der entsprechenden Wrapper-Typen zugewiesen werden und umgekehrt. Dies nennt man "Auto boxing" für das Verpacken in Wrapper-Typen und "Auto unboxing" für das Entpacken.

Frage: Welche Vorsichtsmaßnahmen müssen bei "Auto boxing" und "Auto unboxing" in JAVA getroffen werden?
Antwort: Bei "Auto boxing" und "Auto unboxing" in JAVA ist Vorsicht geboten, da unerwartete Ergebnisse auftreten können. Zwei Objekte, die den gleichen Wert repräsentieren, sind zwar immer gleich, müssen aber nicht identisch sein. Daher ist es wichtig, sorgfältig zu überlegen, ob man die equals-Methode oder den Test auf Identität (==) verwenden sollte, um Programmierfehler zu vermeiden.
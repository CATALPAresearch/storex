50.4.1 Die Typhierarchie von C-Sharp

In C-Sharp sind, genau wie in JAVA, alle Variablen typisiert. Anders als in JAVA wird jedoch zunächst nicht zwischen Wert- (primitiven) und Referenztypen unterschieden: Alle Typen, auch die primitiven, gelten als von Object (genauer: System.Object) abgeleitet. Da lohnt es sich, auf die Typhierarchie etwas genauer einzugehen.
Genaugenommen ist die Typhierarchie von C-Sharp gar nicht die Typhierarchie von C-Sharp, sondern die von .NET: Sie ist nämlich für alle .NET-Sprachen dieselbe. Das liegt daran, dass .NET für alle seine Sprachen ein gemeinsames Typsystem vorsieht, nämlich das Common Type System (CTS). Das CTS sorgt dafür, dass Typen, die in einer Sprache definiert wurden, auch in einer anderen Sprache verwendet werden können, und zwar ganz so, als wären sie in der anderen Sprache selbst definiert worden. Wie man sich leicht vorstellen kann, sind dafür einige Konventionen notwendig.
Das erste Merkmal des CTS ist, dass alle Typen in einer Hierarchie untergebracht sind. Anders als in JAVA gibt es also keine Ausgrenzung der primitiven Typen. Tatsächlich sind die primitiven Typen als eine von mehreren Arten von Werttypen in der Hierarchie angesiedelt. Eine weitere wichtige Form von Werttypen sind die Aufzählungstypen, die aus PASCAL bekannt sind und inzwischen auch in JAVA verwendet werden, allerdings dort als Referenztypen. Bei den Werttypen handelt es sich um Typen, die von der Programmiererin selbst angegeben werden können (im Gegensatz zu den primitiven Typen, deren Werte mit der Sprachdefinition vorgegeben sind). Werttypen können, genau wie in PASCAL oder C, mittels des Typkonstruktors "struct" (das C-Äquivalent von PASCALs "record") erzeugt werden. Diese Typen können sogar Methoden und Konstruktoren haben, sind jedoch keine Klassen und erlauben keine Typerweiterung oder Vererbung.
Eine weitere Unterscheidung ergibt sich bei den Referenztypen. Neben Klassen, Interfaces und Arrays gibt es auch Delegates, die im Wesentlichen Zeiger auf an ein Objekt gebundene einzelne Methoden sind. Delegates ersetzen die aus anderen Sprachen bekannten Funktionspointer. In JAVA bis zur Version 8 wurden sie recht umständlich über Interfaces und anonyme innere Klassen emuliert, wobei heute Lambda-Ausdrücke in JAVA anstelle davon verwendet werden können. Delegates sind für verschiedene Problemstellungen, wie z. B. Listener-Mechanismen, sehr nützlich.
Zuletzt gibt es in C-Sharp auch noch Attribut-Typen (Attributes), die im Wesentlichen den Annotationen entsprechen, die es seit Version 5 auch in JAVA gibt. Annotationen haben jedoch nichts unmittelbar mit objektorientierter Programmierung zu tun und sind daher nicht Gegenstand dieses Kurses.
Es ergibt sich die folgende grobe Einteilung der Typen in C-Sharp: Werttypen, and Referenztypen: Klassen, Interfaces, Arrays, Delegates, Attribut-Typen
Wohlgemerkt, dies ist keine Klassenhierarchie, sondern lediglich eine Einteilung der verschiedenen Arten von Typen in C-Sharp. Die Klassenhierarchie ist wesentlich komplexer und vereinheitlicht das Typsystem von C-Sharp, indem alle Typen von System.Object abgeleitet sind. Ein Ausschnitt aus der Klassenhierarchie im Namespace System sieht etwa so aus:
Wie Ihnen sicher aufgefallen ist, sind einige der Arten von Typen aus der obigen Liste jeweils durch eine spezielle Klasse (Array, Delegate, Attribute) vertreten. Man kann dies als Hinweis darauf verstehen, dass tatsächlich alle Arten von Typen integriert sind und es keine grundsätzlichen Barrieren zwischen ihnen gibt. In C-Sharp haben alle Klassen außer System.Object, genau wie in JAVA, genau eine Superklasse. Sie können jedoch beliebig viele Interfaces implementieren. Die Tatsache, dass Werttypen als Subtypen eines Referenztypen (nämlich Object) deklariert sind, verrät außerdem, dass C-Sharp über Auto-Boxing und Unboxing verfügt.

Frage: Gibt es in C-Sharp einen Unterschied zwischen Wert- (primitiven) und Referenztypen wie in JAVA?
Antwort: In C-Sharp wird zunächst nicht zwischen Wert- (primitiven) und Referenztypen wie in JAVA unterschieden. Alle Typen, einschließlich der primitiven Typen, gelten als von Object (genauer: System.Object) abgeleitet.

Frage: Was ist das Common Type System (CTS) in C-Sharp und warum ist es wichtig?
Antwort: Das Common Type System (CTS) ist ein Teil des .NET-Frameworks und sorgt dafür, dass Typen, die in verschiedenen .NET-Sprachen definiert wurden, gemeinsam genutzt werden können. Es stellt sicher, dass Typen in einer einheitlichen Hierarchie organisiert sind und in verschiedenen .NET-Sprachen verwendet werden können, als wären sie in der jeweiligen Sprache selbst definiert worden. Dies erleichtert die Interoperabilität zwischen verschiedenen .NET-Sprachen und ermöglicht es, Bibliotheken und Komponenten in verschiedenen Sprachen zu verwenden.

Frage: Welche Arten von Werttypen gibt es in C-Sharp?
Antwort: In C-Sharp gibt es verschiedene Arten von Werttypen, darunter die primitiven Typen (z. B. int, bool, double), Aufzählungstypen (enum) und vom Entwickler definierte Werttypen. Werttypen werden in C-Sharp mit dem Typkonstruktor "struct" erstellt und können Methoden und Konstruktoren haben, jedoch erlauben sie keine Typerweiterung oder Vererbung.

Frage: Welche Arten von Referenztypen gibt es in C-Sharp?
Antwort: In C-Sharp gibt es verschiedene Arten von Referenztypen, darunter Klassen, Interfaces, Arrays, Delegates und Attribut-Typen. Diese Referenztypen ermöglichen eine größere Vielfalt an Programmierkonzepten und -strukturen in C-Sharp.

Frage: Was sind Delegates in C-Sharp und wozu dienen sie?
Antwort: Delegates in C-Sharp sind Zeiger auf an ein Objekt gebundene einzelne Methoden. Sie ermöglichen es, Funktionen und Methoden als Parameter an andere Funktionen oder Methoden zu übergeben, was besonders nützlich für Problemstellungen wie Listener-Mechanismen ist. Delegates ersetzen die aus anderen Sprachen bekannten Funktionszeiger oder Funktionspointer.
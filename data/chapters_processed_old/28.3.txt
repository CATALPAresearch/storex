28.3 Gründe für die Trennung von Typen und Klassen

Nun mögen Sie sich vielleicht fragen, warum Typen und Klassen über so viele Seiten hinweg als getrennte Begriffe dargestellt wurden, nur um am Ende zum Schluss zu kommen, dass eine Klassendefinition in der Regel auch als Typdefinition herhält. Nun, erstens ist das nicht in allen Sprachen der Fall, und zweitens ist es selbst in den Sprachen, in denen es so zu sein scheint, nicht immer der Fall (siehe Fußnote 54). Es handelt sich eher um eine Symbiose zweier verschiedener Konzepte, die unterschiedlichen Zwecken dienen, deren strukturelle Ähnlichkeit sich jedoch durch eine syntaktische Zusammenlegung ausnutzen lässt: Klassen dienen der Angabe von Implementierungen und damit als Container für ausführbaren Code. Typen dienen der Formulierung von Invarianten, die für Variablenzuweisungen gelten müssen und deren Verletzung auf einen (logischen oder semantischen) Programmfehler hinweist.
Da beide im Wesentlichen über die gleichen Elemente verfügen, lässt sich die Definition beider in einem Sprachkonstrukt zusammenfassen. Der Unterschied zwischen den beiden Konzepten, Klasse und Typ, manifestiert sich auch darin, welche Rolle sie zur Laufzeit eines Programms spielen: Typinformation beeinflusst die Ausführung eines laufenden Programms, indem sie das Programm bei Verletzung einer Invariante abbrechen lässt (durch einen dynamischen Typtest) und damit einem anderen, schwieriger zu identifizierenden Fehler zuvorkommt. Klasseninformation beeinflusst die Ausführung des laufenden Programms, indem sie die Grundlage des dynamischen Bindens bildet und in einem Programm als Eigenschaft von Objekten abgefragt werden kann. In Sprachen, in denen jede Klasse einen Typ definiert, ist diese Unterscheidung jedoch nicht immer klar getroffen und wird deswegen von Programmierern nicht unbedingt wahrgenommen.

Frage: Warum wurden Typen und Klassen in diesem Text als separate Konzepte dargestellt, obwohl sie in vielen Sprachen gleich sind?
Antwort: Die Trennung von Typen und Klassen wird gezeigt, weil sie nicht in allen Programmiersprachen identisch sind, und selbst in den Sprachen, in denen sie ähnlich sind, gibt es Unterschiede und spezifische Verwendungszwecke.

Frage: Welche Rolle spielen Klassen in der Programmierung, und wie unterscheiden sie sich von Typen?
Antwort: Klassen dienen der Angabe von Implementierungen und fungieren als Container für ausführbaren Code. Sie sind strukturell ähnlich wie Typen, haben jedoch unterschiedliche Verwendungszwecke.

Frage: Welche Funktion erfüllen Typen in der Programmierung, und wie unterscheiden sie sich von Klassen?
Antwort: Typen dienen der Formulierung von Invarianten, die für Variablenzuweisungen gelten müssen und bei deren Verletzung auf Programmfehler hinweisen. Sie sind strukturell ähnlich wie Klassen, haben jedoch eine andere Rolle zur Laufzeit des Programms.

Frage: Wie können Typen und Klassen in einem Sprachkonstrukt zusammengefasst werden, obwohl sie unterschiedliche Zwecke haben?
Antwort: Obwohl Typen und Klassen unterschiedliche Zwecke haben, teilen sie sich strukturelle Ähnlichkeiten, die es ermöglichen, ihre Definition in einem Sprachkonstrukt zu kombinieren. Dies erleichtert die Verwendung beider Konzepte in einer Programmiersprache.

Frage: Welche Rolle spielt Typinformation zur Laufzeit eines Programms, und wie unterscheidet sie sich von Klasseninformation?
Antwort: Typinformation beeinflusst die Ausführung eines laufenden Programms, indem sie das Programm bei Verletzung einer Invariante durch einen dynamischen Typtest abbricht. Klasseninformation hingegen bildet die Grundlage des dynamischen Bindens und kann in einem Programm als Eigenschaft von Objekten abgefragt werden.

Frage: Warum wird die Unterscheidung zwischen Klassen und Typen in Sprachen, in denen jede Klasse einen Typ definiert, manchmal nicht klar getroffen?
Antwort: In Sprachen, in denen Klassen auch Typen definieren, kann die Unterscheidung zwischen den beiden Konzepten verschwommen sein, da Programmierer möglicherweise nicht immer klar wahrnehmen, wie sie zur Laufzeit eines Programms wirken.
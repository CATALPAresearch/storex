36.3 Konstruktoren

Objekte, die keine literale Repräsentation haben, müssen in JAVA (wie in SMALLTALK) explizit als Instanzen von Klassen erzeugt werden. Dafür gibt es in JAVA eine spezielle Kategorie von Methoden, die als Konstruktoren bezeichnet werden. Im Unterschied zu SMALLTALK sind Konstruktoren in JAVA keine Klassenmethoden, sondern stehen zwischen Klassen- und Instanzmethoden. Konstruktoren verhalten sich wie Instanzmethoden, da sie im Inneren auf alle Felder und Methoden der neu erzeugten Instanz zugreifen können. In diesem Sinne kann man Konstruktoren als Instanzmethoden betrachten, die auf der neu erzeugten Instanz aufgerufen werden.
Konstruktoren können somit alle Anweisungen enthalten, die in SMALLTALK durch die spezielle Methode "initialize" notwendig waren (vgl. Abschnitt 8.2 in Kurseinheit 2). Allerdings sind Konstruktoren auch wie Klassenmethoden, da sie nicht auf einer Instanz, sondern auf der Klasse aufgerufen werden. In JAVA wird dafür jedoch kein spezieller Methodenname wie "new" wie in SMALLTALK verwendet, sondern der Klassennamen selbst.
Im Vergleich zu anderen Methoden erlauben Konstruktordefinitionen in JAVA keine Angabe eines Rückgabetyps. Da die erzeugte Instanz immer ein Exemplar der Klasse ist, in der der Konstruktor definiert ist, ist der Typ festgelegt. Die Angabe des Rückgabetyps in Zeile 1006 ist daher nicht erforderlich.
Wenn kein Konstruktor definiert wird, verwendet JAVA standardmäßig den impliziten Standardkonstruktor. Dieser ist parameterlos und erzeugt eine neue Instanz der Klasse. Konstruktoren werden nicht vererbt. Stattdessen wird der Standardkonstruktor einer Klasse beim Erzeugen einer Instanz einer ihrer Subklassen automatisch aufgerufen. Um dieses Verhalten zu überschreiben, kann man innerhalb eines Konstruktors einen Konstruktor der Superklasse mittels "super" aufrufen. Dabei werden die in "super" aufgerufenen Methoden dynamisch gebunden, was dazu führen kann, dass auf noch nicht initialisierte Variablen zugegriffen wird. Die gesamte Thematik rund um Konstruktoren und die Initialisierung von Variablen in JAVA ist recht komplex. Da Instanziierung und Initialisierung grundlegende und für jedes Programm unverzichtbare Vorgänge sind, ist JAVA möglicherweise nicht die ideale Programmiersprache für Anfänger.
In JAVA ist es übrigens auch möglich, Konstruktoren für die Objekterzeugung mit Klassenmethoden zu verwenden, wie es in Zeile 998 gezeigt wird. In diesem Fall muss die Klassenmethode im Rumpf einen Konstruktor aufrufen, wie es in Zeile 1006 geschieht. Solche Klassenmethoden werden auch als Factory-Methoden bezeichnet (vgl. Abschnitt 8.3 in Kurseinheit 2). Sie können auch Instanzen eines anderen Typs als den deklarierten zurückgeben.

Frage: Was sind Konstruktoren in JAVA, und wie verhalten sie sich im Vergleich zu SMALLTALK?
Antwort: Konstruktoren in JAVA sind spezielle Methoden, die zur Erzeugung von Objekten verwendet werden. Im Gegensatz zu SMALLTALK sind Konstruktoren in JAVA keine Klassenmethoden, sondern stehen zwischen Klassen- und Instanzmethoden. Sie verhalten sich wie Instanzmethoden und können auf alle Felder und Methoden der neu erzeugten Instanz zugreifen.

Frage: Wie werden Konstruktoren in JAVA aufgerufen?
Antwort: In JAVA werden Konstruktoren aufgerufen, indem der Klassenname gefolgt von den Konstruktorargumenten verwendet wird, z.B., "new MeineKlasse(argumente)".

Frage: Was passiert, wenn kein Konstruktor in JAVA definiert wird?
Antwort: Wenn kein Konstruktor in JAVA definiert wird, verwendet JAVA standardmäßig den impliziten Standardkonstruktor, der parameterlos ist und eine neue Instanz der Klasse erzeugt.

Frage: Werden Konstruktoren in JAVA vererbt?
Antwort: Nein, Konstruktoren werden in JAVA nicht vererbt. Stattdessen wird der Standardkonstruktor einer Klasse automatisch aufgerufen, wenn eine Instanz einer ihrer Subklassen erzeugt wird.

Frage: Was sind Factory-Methoden in JAVA, und wie werden sie verwendet?
Antwort: Factory-Methoden sind Klassenmethoden in JAVA, die zur Erzeugung von Objekten verwendet werden können. Sie können auch Instanzen eines anderen Typs als den deklarierten zurückgeben. Factory-Methoden ermöglichen eine flexible Objekterzeugung und werden oft in Bibliotheken und Frameworks eingesetzt.
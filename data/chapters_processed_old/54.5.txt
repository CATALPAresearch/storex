54.5 Relativität der Substituierbarkeit

Man kann nun argumentieren, dass die Substituierbarkeit im Einzelfall von der jeweiligen Verwendung der Typen abhängt (vgl. Fußnote 86). Im Beispiel von "Set" und "Bag" kann man daher nicht grundsätzlich behaupten, dass das eine den Ersatz des anderen ausschließt. Es kann durchaus Anwendungsfälle für den einen oder anderen Typ geben, in denen der jeweils andere als Ersatz dienen kann. Das Vorhandensein einer tatsächlichen Substituierbarkeit hängt also nicht allein von den beteiligten Typen ab, sondern auch von ihrer Verwendung. Dies wiederum bedeutet (auch vor dem Hintergrund des oben Gesagten zur funktionalen Äquivalenz), dass es so etwas wie eine absolute Substituierbarkeit, die von jeder möglichen Verwendung losgelöst ist, eigentlich nicht existiert.
Wie kann man diesem Umstand begegnen? Nun, indem man nicht nur die Sichtweise der Programmiererin berücksichtigt, die die Typen erstellt und sich um deren Substituierbarkeit (sowie die darauf basierende Subtypenbeziehung) kümmert, sondern auch die Sichtweise der Programmiererin, die die Typen für einen bestimmten Zweck verwenden möchte. Nur diese Programmiererin weiß genau, welche Erwartungen sie an einen Typen (genauer gesagt, an die Objekte eines Typs) hat, und nur sie kann beurteilen, welche Typen in ihrem speziellen Anwendungsfall gegeneinander austauschbar sind.
Wie drückt aber die Programmiererin ihre Erwartungen aus? Die Antwort ist überraschend einfach: Sie definiert selbst einen Typen, dessen Definition nur die Eigenschaften umfasst, die sie benötigt. Ein solcher Typ spezifiziert gewissermaßen die Rolle, die die Objekte im Kontext der Verwendung spielen sollen. In der Regel wird dieser Typ nur einen Teil der Eigenschaften umfassen, die allgemeine Typen wie "Set" oder "Bag" spezifizieren. Im Gegenzug erweitert sich jedoch die Auswahl der Typen, deren Objekte für ihre speziellen Zwecke in Frage kommen.
Die einzige Voraussetzung dafür, dass Objekte die ihnen aus Sicht der Anwenderin zugewiesene Rolle auch tatsächlich spielen können, ist, dass sie typkonform sind.
Diese doppelte Sichtweise auf Typen, sowohl aus Sicht der Nutzerin als auch aus Sicht der Anbieterin, beginnt sich erst langsam durchzusetzen. Die Programmiersprachen JAVA und später auch C-Sharp bieten immerhin das Konzept von "Interfaces als Typen" an (siehe Kapitel 40 in Kurseinheit 4 und Abschnitt 50.4.2 in Kurseinheit 5), mit dem es möglich ist, partielle Ansichten auf Typen in einem Programm zu definieren. In der Praxis wird diese Möglichkeit jedoch in beiden Sprachen selten genutzt, um Anwenderinnen ihre eigenen Anforderungen als Typen definieren zu lassen. Möglicherweise wird dies in Zukunft anders gehandhabt.

Frage: Warum hängt die Substituierbarkeit von Typen von ihrer jeweiligen Verwendung ab?
Antwort: Die Substituierbarkeit von Typen hängt von ihrer jeweiligen Verwendung ab, da verschiedene Anwendungsfälle unterschiedliche Anforderungen an Typen und deren Objekte haben können. Ein Typ kann in einem bestimmten Kontext problemlos durch einen anderen Typen ersetzt werden, während dies in einem anderen Kontext nicht der Fall sein kann. Die Substituierbarkeit ist daher relativ zur Verwendung der Typen.

Frage: Wie kann man dem Umstand der relativen Substituierbarkeit begegnen?
Antwort: Man kann dem Umstand der relativen Substituierbarkeit begegnen, indem man nicht nur die Sichtweise der Person berücksichtigt, die die Typen erstellt (die Anbieterin), sondern auch die Sichtweise der Person, die die Typen für einen bestimmten Zweck verwendet (die Nutzerin). Die Nutzerin kann ihre Erwartungen an einen Typen definieren, indem sie einen eigenen Typen erstellt, der nur die benötigten Eigenschaften umfasst. Dieser Typ spezifiziert die Rolle, die die Objekte im Kontext der Verwendung spielen sollen. Die Auswahl der Typen, deren Objekte für spezielle Zwecke in Frage kommen, erweitert sich dadurch, ohne die Substituierbarkeit zu beeinträchtigen.

Frage: Wie kann die Programmiererin ihre Erwartungen an Typen ausdrücken?
Antwort: Die Programmiererin kann ihre Erwartungen an Typen ausdrücken, indem sie einen eigenen Typen definiert, der nur die benötigten Eigenschaften umfasst. Dieser Typ stellt gewissermaßen die Rolle dar, die die Objekte im Kontext der Verwendung spielen sollen. Durch die Definition solcher Typen kann die Programmiererin ihre Anforderungen klar ausdrücken und sicherstellen, dass die Typen ihren speziellen Zwecken entsprechen.

Frage: Welches Konzept bieten Programmiersprachen wie JAVA und C-Sharp, um die doppelte Sichtweise auf Typen zu unterstützen?
Antwort: Programmiersprachen wie JAVA und C-Sharp bieten das Konzept von "Interfaces als Typen" an, mit dem es möglich ist, partielle Ansichten auf Typen in einem Programm zu definieren. Dies ermöglicht es den Nutzerinnen, ihre eigenen Anforderungen als Typen zu definieren. Allerdings wird diese Möglichkeit in der Praxis oft nicht genutzt, um Anwenderinnen ihre eigenen Typen definieren zu lassen. Es wird jedoch darauf hingewiesen, dass dies in Zukunft anders gehandhabt werden könnte.
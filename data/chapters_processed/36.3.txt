36.3 Konstruktoren

Objekte, die keine literale Repräsentation haben, müssen in Java (wie in SMALLTALK) explizit als Instanzen von Klassen erzeugt werden. Dafür gibt es in Java eine spezielle Kategorie von Methoden, die als Konstruktoren bezeichnet werden. Im Unterschied zu SMALLTALK sind Konstruktoren in Java keine Klassenmethoden, sondern stehen zwischen Klassen- und Instanzmethoden. Konstruktoren verhalten sich wie Instanzmethoden, da sie im Inneren auf alle Felder und Methoden der neu erzeugten Instanz zugreifen können. In diesem Sinne kann man Konstruktoren als Instanzmethoden betrachten, die auf der neu erzeugten Instanz aufgerufen werden.


Frage: Was sind Konstruktoren in Java?
Antwort: Konstruktoren sind spezielle Methoden in Java, die verwendet werden, um Objekte zu erzeugen, die keine literale Repräsentation haben. Sie sind keine Klassenmethoden, sondern stehen zwischen Klassen- und Instanzmethoden. Konstruktoren verhalten sich wie Instanzmethoden, da sie im Inneren auf alle Felder und Methoden der neu erzeugten Instanz zugreifen können.

Frage: Was unterscheidet Konstruktoren in Java im Vergleich zu SMALLTALK?
Antwort: Im Gegensatz zu SMALLTALK sind Konstruktoren in Java keine Klassenmethoden, sondern stehen zwischen Klassen- und Instanzmethoden. Sie verhalten sich wie Instanzmethoden, da sie im Inneren auf alle Felder und Methoden der neu erzeugten Instanz zugreifen können. In diesem Sinne können Konstruktoren als Instanzmethoden betrachtet werden, die auf der neu erzeugten Instanz aufgerufen werden.


Konstruktoren können somit alle Anweisungen enthalten, die in SMALLTALK durch die spezielle Methode "initialize" notwendig waren. Allerdings sind Konstruktoren auch wie Klassenmethoden, da sie nicht auf einer Instanz, sondern auf der Klasse aufgerufen werden. In Java wird dafür jedoch kein spezieller Methodenname wie "new" wie in SMALLTALK verwendet, sondern der Klassennamen selbst.


Frage: Wie werden Konstruktoren in Java definiert?
Antwort: In Java werden Konstruktoren definiert, indem man eine Methode mit demselben Namen wie die Klasse erstellt, die keine Rückgabewerte besitzt. Sie werden aufgerufen, indem man den Klassennamen verwendet, gefolgt von Klammern.
Frage: Wie werden Konstruktoren in Java aufgerufen?
Antwort: In Java werden Konstruktoren nicht durch einen speziellen Methodennamen wie "new" aufgerufen, sondern durch den Klassennamen selbst.

Frage: Was ist der Unterschied zwischen Konstruktoren und Klassenmethoden in Java?
Antwort: Der Unterschied zwischen Konstruktoren und Klassenmethoden in Java ist, dass Konstruktoren auf der Klasse aufgerufen werden und dazu dienen, ein neues Objekt zu initialisieren, während Klassenmethoden ebenfalls auf der Klasse aufgerufen werden, aber kein neues Objekt erstellen.


Im Vergleich zu anderen Methoden erlauben Konstruktordefinitionen in Java keine Angabe eines Rückgabetyps. Da die erzeugte Instanz immer ein Exemplar der Klasse ist, in der der Konstruktor definiert ist, ist der Typ festgelegt. Die Angabe des Rückgabetyps in Konstruktordefinitionen ist daher nicht erforderlich.


Frage: Warum wird im Kontext kein Rückgabetyp für den Konstruktor angegeben?
Antwort: Im Vergleich zu anderen Methoden erlauben Konstruktordefinitionen in Java keine Angabe eines Rückgabetyps. Da die erzeugte Instanz immer ein Exemplar der Klasse ist, in der der Konstruktor definiert ist, ist der Typ festgelegt.

Frage: Warum ist die Angabe des Rückgabetyps in Konstruktordefinitionen in Java nicht erforderlich?
Antwort: In Konstruktordefinitionen in Java ist die Angabe des Rückgabetyps nicht erforderlich, weil der Typ der erzeugten Instanz immer ein Exemplar der Klasse ist, in der der Konstruktor definiert ist. Somit ist der Typ der Instanz bereits festgelegt und muss nicht explizit angegeben werden.


Wenn kein Konstruktor definiert wird, verwendet Java standardmäßig den impliziten Standardkonstruktor. Dieser ist parameterlos und erzeugt eine neue Instanz der Klasse. Konstruktoren werden nicht vererbt. Stattdessen wird der Standardkonstruktor einer Klasse beim Erzeugen einer Instanz einer ihrer Subklassen automatisch aufgerufen. Um dieses Verhalten zu überschreiben, kann man innerhalb eines Konstruktors einen Konstruktor der Superklasse mittels "super" aufrufen. Dabei werden die in "super" aufgerufenen Methoden dynamisch gebunden, was dazu führen kann, dass auf noch nicht initialisierte Variablen zugegriffen wird. Die gesamte Thematik rund um Konstruktoren und die Initialisierung von Variablen in Java ist recht komplex. Da Instanziierung und Initialisierung grundlegende und für jedes Programm unverzichtbare Vorgänge sind, ist Java möglicherweise nicht die ideale Programmiersprache für Anfänger.


Frage: Was ist der Zweck eines Konstruktors in Java?
Antwort: Der Zweck eines Konstruktors in Java ist es, eine neue Instanz der Klasse zu erzeugen und gegebenenfalls die Variablen der Klasse zu initialisieren. Wird kein Konstruktor definiert, wird standardmäßig ein impliziter parameterloser Konstruktor verwendet. Konstruktoren werden nicht vererbt, aber beim Erzeugen einer Instanz einer Subklasse wird automatisch der Standardkonstruktor der Superklasse aufgerufen.

Frage: Was passiert, wenn kein Konstruktor in Java definiert wird?
Antwort: Wenn kein Konstruktor in Java definiert wird, verwendet Java standardmäßig den impliziten Standardkonstruktor. Dieser ist parameterlos und erzeugt eine neue Instanz der Klasse.

Frage: Was bewirkt der Aufruf von "super" in einem Konstruktor?
Antwort: Durch den Aufruf von "super" in einem Konstruktor werden die in "super" aufgerufenen Methoden dynamisch gebunden, was dazu führen kann, dass auf noch nicht initialisierte Variablen zugegriffen wird.

Frage: Wird der Standardkonstruktor einer Klasse beim Erzeugen einer Instanz einer ihrer Subklassen automatisch aufgerufen?
Antwort: Ja, der Standardkonstruktor einer Klasse wird beim Erzeugen einer Instanz einer ihrer Subklassen automatisch aufgerufen.


In Java ist es übrigens auch möglich, Konstruktoren für die Objekterzeugung mit Klassenmethoden zu verwenden. In diesem Fall muss die Klassenmethode im Rumpf einen Konstruktor aufrufen, wie es in Zeile 1006 geschieht. Solche Klassenmethoden werden auch als Factory-Methoden bezeichnet. Sie können auch Instanzen eines anderen Typs als den deklarierten zurückgeben.


Frage: Was sind Factory-Methoden in Java?
Antwort: Factory-Methoden sind Klassenmethoden in Java, die zur Objekterzeugung verwendet werden können. Sie können auch Instanzen eines anderen Typs als den deklarierten zurückgeben.

Frage: Was ist der Unterschied zwischen Klassenmethoden und Konstruktoren?
Antwort: Klassenmethoden sind Methoden, die auf die Klasse als Ganzes angewendet werden, während Konstruktoren beim Erzeugen eines Objekts aufgerufen werden und der Initialisierung der Instanzvariablen dienen.

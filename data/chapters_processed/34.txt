34 Das Programmiermodell Javas

Java ist in vielerlei Hinsicht (und vor allem im Vergleich zu SMALLTALK) eine konventionelle Programmiersprache. Programme werden als Quelltext in sogenannten Compilation Units gespeichert, die gewöhnlich Dateien sind und die - jede für sich - immer als Ganzes übersetzt werden. Das Ergebnis der Übersetzung ist jedoch kein direkt ausführbarer Maschinencode, sondern ein sogenannter Bytecode, der von einer virtuellen Maschine, der Java Virtual Machine (JVM), interpretiert werden muss. Das sonst übliche Linken der einzelnen Klassen (genauer: des zu den Klassen gehörenden Bytecodes, die sogenannten Class Files) wird dabei durch das Class Loading der JVM ersetzt. Vorteile des Ganzen sind eine größere Flexibilität bei der Entwicklung und Verteilung von Anwendungen sowie eine weitgehende Plattformunabhängigkeit: Java-Programme können, soweit sie nicht von bestimmten Eigenheiten der Betriebssysteme abhängen (man denke z. B. an die unterschiedliche Handhabung von Groß-/Kleinschreibung - Java ist case sensitive, Windows nicht!), auf jedem Rechner und Betriebssystem laufen, für die es eine JVM gibt.


Frage: Was ist Java?
Antwort: Java ist eine konventionelle Programmiersprache, die in vielerlei Hinsicht SMALLTALK ähnelt, aber auch Unterschiede aufweist. Programme werden als Quelltext in sogenannten Compilation Units gespeichert, die gewöhnlich Dateien sind und die immer als Ganzes übersetzt werden. Das Ergebnis der Übersetzung ist Bytecode, der von einer virtuellen Maschine, der Java Virtual Machine (JVM), interpretiert werden muss.

Frage: Wie werden Java-Programme gespeichert und ausgeführt?
Antwort: Java-Programme werden als Quelltext in sogenannten Compilation Units gespeichert, die gewöhnlich Dateien sind und die immer als Ganzes übersetzt werden. Das Ergebnis der Übersetzung ist Bytecode, der von einer virtuellen Maschine, der Java Virtual Machine (JVM), interpretiert werden muss. Die JVM ermöglicht eine größere Flexibilität bei der Entwicklung und Verteilung von Anwendungen sowie eine weitgehende Plattformunabhängigkeit.

Frage: Was sind die Vorteile von Java gegenüber anderen Programmiersprachen?
Antwort: Die Vorteile von Java gegenüber anderen Programmiersprachen sind eine größere Flexibilität bei der Entwicklung und Verteilung von Anwendungen sowie eine weitgehende Plattformunabhängigkeit. Java-Programme können auf jedem Rechner und Betriebssystem laufen, für die es eine JVM gibt, sofern sie nicht von bestimmten Eigenheiten der Betriebssysteme abhängen.


Während Java als Programmiersprache anfangs noch recht klein und überschaubar war (zumindest im Vergleich zu C++, einem ihrer Hauptkonkurrenten), so ist die Sprachdefinition heute ein Moloch. Mit dem wachsenden Nutzerkreis sind auch die Anforderungen an die Sprache gewachsen, und mit dem Java Community Process wurde aktiven Entwicklern die Möglichkeit eingeräumt, Vorschläge zur Spracherweiterung zu machen. Dabei ist jedoch - aufgrund der mittlerweile riesigen Menge an Software, die in Java geschrieben ist - stets auf Rückwärtskompatibilität zu achten, so dass revolutionäre Verbesserungen kaum möglich sind; stattdessen wird hinzugefügt. Das unterliegende Programmiermodell ist so immer dasselbe geblieben - und wird es wohl auch immer bleiben.


Frage: Was ist der Java Community Process?
Antwort: Der Java Community Process ist ein Prozess, bei dem aktiven Entwicklern die Möglichkeit eingeräumt wird, Vorschläge zur Spracherweiterung von Java zu machen. Dabei ist jedoch auf Rückwärtskompatibilität zu achten, um die riesige Menge an Software, die in Java geschrieben ist, nicht zu beeinträchtigen.

Frage: Warum ist es schwierig, die Sprache Java zu revolutionieren?
Antwort: Es ist schwierig, die Sprache Java zu revolutionieren, weil aufgrund der riesigen Menge an Software, die in Java geschrieben ist, stets auf Rückwärtskompatibilität geachtet werden muss. Zudem ist das Programmiermodell von Java seit Beginn an dasselbe geblieben und wird wohl auch immer gleich bleiben.


Die grundlegenden Werkzeuge der Java-Programmierung sind neben dem Editor der Java-Compiler Javac, die JVM, die Java-Klassenbibliothek (das sogenannte Application Programming Interface, API) und natürlich die Dokumentation (API-Dokumentation und Sprachdefinition). Gerade für die Java-Programmierung gibt es jedoch zahlreiche integrierte Entwicklungsumgebungen (IDEs), und es ist niemandem zu raten, diese Werkzeuge links liegen zu lassen. Diejenigen, die einmal einen Teil ihrer wertvollen Lebenszeit mit dem richtigen Setzen des sogenannten Class Path verbracht haben, wissen, wovon ich rede. Auf der anderen Seite sind diese IDEs sehr komplex und erschlagen gerade Anfänger mit ihrem Funktionsumfang. Das ist auch der Grund, warum in diesem Kurs keine Java-Installation von Ihnen verlangt wird. Wer es aber wissen möchte und mit Java experimentieren möchte, den will ich keinesfalls davon abhalten.


Frage: Was sind die grundlegenden Werkzeuge der Java-Programmierung?
Antwort: Die grundlegenden Werkzeuge der Java-Programmierung sind der Editor, der Java-Compiler Javac, die JVM, die Java-Klassenbibliothek (das sogenannte Application Programming Interface, API) und die Dokumentation (API-Dokumentation und Sprachdefinition).


Um ein Java-Programm, bestehend aus einer Menge von Class Files, auszuführen, muss man eine Klasse angeben, die eine Startmethode besitzt. Diese Startmethode heißt immer gleich; ihre Signatur hat die leicht zu merkende und immer wieder gerne eingetippte Form: public static void main(String[] args) Die main-Methode ist eine normale Instanzmethode, die zu einem beliebigen Objekt gehören könnte. Sie ist aber als statische Methode deklariert, d.h. sie gehört keinem Objekt an, sondern der Klasse selbst. Sie wird daher auch nicht über ein Objekt, sondern über den Klassennamen aufgerufen.

Frage: Wie wird ein Java-Programm ausgeführt?
Antwort: Um ein Java-Programm auszuführen, muss man eine Klasse angeben, die eine Startmethode mit der Signatur public static void main(String[] args) besitzt. Diese Startmethode ist eine statische Methode, die nicht zu einem Objekt gehört, sondern der Klasse selbst. Sie wird über den Klassennamen aufgerufen. Die main-Methode ist eine normale Instanzmethode, die zu einem beliebigen Objekt gehören kann, das die main-Methode implementiert.

Frage: Wie startet man ein Java-Programm?
Antwort: Um ein Java-Programm auszuführen, muss man eine Klasse angeben, die eine main-Methode besitzt. Die Signatur der main-Methode hat die Form public static void main(String[] args). Die main-Methode ist eine normale Instanzmethode, die zu einem beliebigen Objekt gehören kann, das die main-Methode implementiert.

Frage: Wie heißt die Startmethode in Java?
Antwort: Die Startmethode in Java heißt "public static void main(String[] args)".


Dabei ist "main" der Name der Methode; was die anderen Elemente bedeuten, werden Sie im Laufe dieser Kurseinheit noch lernen. Auf Betriebssystemebene übergibt man dann einfach der JVM bei ihrem Aufruf den Namen der Klasse als Parameter. Klassen werden in Java wie in SMALLTALK per Konvention immer großgeschrieben.


Frage: Was ist der Zweck der main-Methode in Java?
Antwort: Die main-Methode ist der Einstiegspunkt für die Ausführung eines Java-Programms. Das Betriebssystem übergibt der JVM den Namen der Klasse, die die main-Methode enthält, als Parameter, um das Programm auszuführen.

Frage: Was ist die JVM und wie wird sie aufgerufen?
Antwort: Die JVM (Java Virtual Machine) ist eine virtuelle Maschine, die Java-Bytecode ausführt. Sie wird auf Betriebssystemebene aufgerufen, indem man ihr den Namen der Klasse als Parameter übergibt.

Frage: Wie werden Klassen in Java und SMALLTALK benannt?
Antwort: In Java werden Klassen wie in SMALLTALK per Konvention immer großgeschrieben.


Ein letztes, wichtiges Merkmal des Programmiermodells von Java ist die Art des Deployment, also wie in Java programmierte Anwendungen in die Anwendung gehen. Während früher alle namhaften Web-Browser (per Plug-in) den Start von in Webseiten eingebetteten Java-Anwendungen erlaubten, bleibt heute praktisch nur noch die Verteilung per sogenanntem Java Archive (einer .jar-Datei). Zu deren Ausführung ist jedoch eine Installation der JVM nötig.


Frage: Wie werden Java-Anwendungen in der Regel verteilt?
Antwort: Java-Anwendungen werden heute praktisch nur noch per Java Archive (einer .jar-Datei) verteilt. Zur Ausführung ist jedoch eine Installation der JVM nötig.

Frage: Was ist die Funktion der Java Virtual Machine (JVM)?
Antwort: Die JVM ist eine virtuelle Maschine, die Bytecode-Anweisungen ausführt, die von einem Java-Compiler erzeugt wurden. Sie ermöglicht es, Java-Programme auf verschiedenen Geräten und Betriebssystemen auszuführen.



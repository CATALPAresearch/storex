34 Das Programmiermodell JAVAs

JAVA ist in vielerlei Hinsicht (und vor allem im Vergleich zu SMALLTALK) eine konventionelle Programmiersprache. Programme werden als Quelltext in sogenannten Compilation Units gespeichert, die gewöhnlich Dateien sind und die - jede für sich - immer als Ganzes übersetzt werden. Das Ergebnis der Übersetzung ist jedoch kein direkt ausführbarer Maschinencode, sondern ein sogenannter Bytecode, der von einer virtuellen Maschine, der Java Virtual Machine (JVM), interpretiert werden muss. Das sonst übliche Linken der einzelnen Klassen (genauer: des zu den Klassen gehörenden Bytecodes, die sogenannten Class Files) wird dabei durch das Class Loading der JVM ersetzt. Vorteile des Ganzen sind eine größere Flexibilität bei der Entwicklung und Verteilung von Anwendungen sowie eine weitgehende Plattformunabhängigkeit: JAVA-Programme können, soweit sie nicht von bestimmten Eigenheiten der Betriebssysteme abhängen (man denke z. B. an die unterschiedliche Handhabung von Groß-/Kleinschreibung - JAVA ist case sensitive, Windows nicht!), auf jedem Rechner und Betriebssystem laufen, für die es eine JVM gibt.
Während JAVA als Programmiersprache anfangs noch recht klein und überschaubar war (zumindest im Vergleich zu C++, einem ihrer Hauptkonkurrenten), so ist die Sprachdefinition heute ein Moloch. Mit dem wachsenden Nutzerkreis sind auch die Anforderungen an die Sprache gewachsen, und mit dem JAVA Community Process wurde aktiven Entwicklern die Möglichkeit eingeräumt, Vorschläge zur Spracherweiterung zu machen. Dabei ist jedoch - aufgrund der mittlerweile riesigen Menge an Software, die in JAVA geschrieben ist - stets auf Rückwärtskompatibilität zu achten, so dass revolutionäre Verbesserungen kaum möglich sind; stattdessen wird hinzugefügt. Das unterliegende Programmiermodell ist so immer dasselbe geblieben - und wird es wohl auch immer bleiben.
Die grundlegenden Werkzeuge der JAVA-Programmierung sind neben dem Editor der JAVA-Compiler javac, die JVM, die JAVA-Klassenbibliothek (das sogenannte Application Programming Interface, API) und natürlich die Dokumentation (API-Dokumentation und Sprachdefinition). Gerade für die JAVA-Programmierung gibt es jedoch zahlreiche integrierte Entwicklungsumgebungen (IDEs), und es ist niemandem zu raten, diese Werkzeuge links liegen zu lassen. Diejenigen, die einmal einen Teil ihrer wertvollen Lebenszeit mit dem richtigen Setzen des sogenannten Class Path verbracht haben, wissen, wovon ich rede. Auf der anderen Seite sind diese IDEs sehr komplex und erschlagen gerade Anfänger mit ihrem Funktionsumfang. Das ist auch der Grund, warum in diesem Kurs keine JAVA-Installation von Ihnen verlangt wird. Wer es aber wissen möchte und mit JAVA experimentieren möchte, den will ich keinesfalls davon abhalten.
Um ein JAVA-Programm, bestehend aus einer Menge von Class Files, auszuführen, muss man eine Klasse angeben, die eine Startmethode besitzt. Diese Startmethode heißt immer gleich; ihre Signatur hat die leicht zu merkende und immer wieder gerne eingetippte Form.
Dabei ist "main" der Name der Methode; was die anderen Elemente bedeuten, werden Sie im Laufe dieser Kurseinheit noch lernen. Auf Betriebssystemebene übergibt man dann einfach der JVM bei ihrem Aufruf den Namen der Klasse als Parameter. Klassen werden in JAVA wie in SMALLTALK per Konvention immer großgeschrieben.
Ein letztes, wichtiges Merkmal des Programmiermodells von JAVA ist die Art des Deployment, also wie in JAVA programmierte Anwendungen in die Anwendung gehen. Während früher alle namhaften Web-Browser (per Plug-in) den Start von in Webseiten eingebetteten JAVA-Anwendungen erlaubten, bleibt heute praktisch nur noch die Verteilung per sogenanntem JAVA Archive (einer .jar-Datei). Zu deren Ausführung ist jedoch eine Installation der JVM nötig.

Frage: Welche Rolle spielt die Java Virtual Machine (JVM) in JAVA-Programmen?
Antwort: Die Java Virtual Machine (JVM) interpretiert den Bytecode, der das Ergebnis der Übersetzung von JAVA-Programmen ist. Sie spielt eine entscheidende Rolle bei der Ausführung von JAVA-Programmen.

Frage: Warum sind JAVA-Programme weitgehend plattformunabhängig?
Antwort: JAVA-Programme sind weitgehend plattformunabhängig, da sie in Form von Bytecode vorliegen und von der JVM interpretiert werden. Solange eine JVM für ein bestimmtes Betriebssystem verfügbar ist, können JAVA-Programme auf jedem Rechner und Betriebssystem ausgeführt werden, für das es eine JVM gibt.

Frage: Warum wird darauf hingewiesen, dass JAVA-Programmierung oft in integrierten Entwicklungsumgebungen (IDEs) stattfindet?
Antwort: Es wird darauf hingewiesen, dass JAVA-Programmierung oft in integrierten Entwicklungsumgebungen (IDEs) stattfindet, da diese Werkzeuge die Entwicklung erleichtern. Allerdings können IDEs aufgrund ihrer Komplexität Anfänger überwältigen.

Frage: Was ist die typische Methode, um ein JAVA-Programm auszuführen, und wie lautet ihre Signatur?
Antwort: Die typische Methode, um ein JAVA-Programm auszuführen, ist die "main"-Methode mit der Signatur "public static void main(String[] args)". Dies ist die Startmethode für JAVA-Anwendungen.

Frage: Wie erfolgt die Ausführung eines JAVA-Programms auf Betriebssystemebene?
Antwort: Die Ausführung eines JAVA-Programms auf Betriebssystemebene erfolgt, indem man der JVM den Namen der Klasse als Parameter übergibt. Zum Beispiel: "java MeineKlasse".

Frage: Was ist ein wichtiges Merkmal des Programmiermodells von JAVA in Bezug auf die Namenskonvention von Klassen?
Antwort: Ein wichtiges Merkmal des Programmiermodells von JAVA ist, dass Klassennamen immer großgeschrieben werden sollen.

Frage: Wie erfolgt in JAVA das Deployment von Anwendungen?
Antwort: In JAVA erfolgt das Deployment von Anwendungen oft durch die Verteilung von sogenannten JAVA Archiven (.jar-Dateien). Zur Ausführung ist jedoch eine Installation der JVM erforderlich.
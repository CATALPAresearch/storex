14.2 Reinkarnation von Objekten

Eine der vielleicht interessantesten Methoden in SMALLTALK ist die Methode become:. Sie bewirkt, dass das Empfängerobjekt die Identität des Parameterobjekts annimmt bzw. mit ihm tauscht (je nach Dialekt). Das hat unter anderem zur Folge, dass alle Variablen, die vor der Ausführung der Methode den Empfänger benannten (genauer: auf das Empfängerobjekt verwiesen), danach den Parameter benennen (auf ihn verweisen).


Frage: Was bewirkt die Methode become: in SMALLTALK?
Antwort: Die Methode become: in SMALLTALK bewirkt, dass das Empfängerobjekt die Identität des Parameterobjekts annimmt bzw. mit ihm tauscht. Das hat zur Folge, dass alle Variablen, die vor der Ausführung der Methode den Empfänger benannten, danach den Parameter benennen.


Eine mögliche Anwendung ist das Vergrößern von Objekten: Wenn einem Objekt der ihm zur Verfügung gestellte Speicherplatz nicht mehr ausreicht, muss es "umziehen", d.h., seine Repräsentation im Speicher muss an eine andere Stelle kopiert werden. Da aber alle Referenzen auf das Objekt noch auf die alte Stelle verweisen, legt man am besten die neue Stelle als entsprechend groß dimensioniertes Objekt an (beispielsweise mittels new:) und lässt dann das alte Objekt zum neuen werden. So könnte man beispielsweise eine Methode grow in der Klasse ArrayedCollection wie folgt definieren:


Frage: Wie kann man ein Objekt vergrößern?
Antwort: Eine Möglichkeit, ein Objekt zu vergrößern, ist das "Umziehen" der Repräsentation des Objekts in den Speicher. Dazu wird ein neues Objekt mit der doppelten Größe angelegt, die Daten werden in das neue Objekt kopiert und das alte Objekt wird durch das neue Objekt ersetzt. Die Methode grow erzeugt eine neue ArrayedCollection mit einer um 100 erhöhten Größe und kopiert den Inhalt der alten ArrayedCollection in die neue. Anschließend gibt sie die neue ArrayedCollection zurück.

Frage: Was macht die Methode grow in der Klasse ArrayedCollection?
Antwort: Die Methode grow in der Klasse ArrayedCollection erzeugt eine neue ArrayedCollection mit einer um 100 erhöhten Größe und kopiert den Inhalt der alten ArrayedCollection in die neue. Anschließend gibt sie die neue ArrayedCollection zurück. Diese Methode wird verwendet, wenn einem Objekt der zur Verfügung gestellte Speicherplatz nicht mehr ausreicht, um den Zustand des Objekts zu speichern.


Eine andere mögliche Anwendung von become: ist die Durchführung eines sogenannten Rollbacks. Wenn also, nachdem an einem Objekt (oder Objektgeflecht) eine Menge von Änderungen durchgeführt worden sind, der ursprüngliche Zustand wiederhergestellt werden soll, legt man einfach vor den Änderungen eine (tiefe) Kopie des Objekts (der Wurzel des Objektgeflechts) an und ersetzt beim Rollback das ursprüngliche (und inzwischen geänderte) Objekt(geflecht) mittels become: durch die Kopie.


Frage: Was ist ein Anwendungsfall von become:?
Antwort: Eine Anwendung von become: ist die Durchführung eines sogenannten Rollbacks. Dabei wird der ursprüngliche Zustand eines Objekts oder Objektgeflechts wiederhergestellt, indem eine Kopie des Objekts vor den Änderungen angelegt und das ursprüngliche Objekt mittels become: durch die Kopie ersetzt wird.

Frage: Was ist ein Rollback?
Antwort: Ein Rollback ist eine Möglichkeit, den ursprünglichen Zustand eines Objekts oder Objektgeflechts wiederherzustellen, indem eine Kopie des Objekts vor der Durchführung einer Menge von Änderungen angelegt und das ursprüngliche Objekt durch die Kopie ersetzt wird.

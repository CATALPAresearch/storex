10.3 Abstrakte Klassen

Die Genera Aristoteles' sind allesamt abstrakt — es gibt keine Säugetiere, die nicht Mensch, Hund, Katze oder etwas Konkretes wären. Übertragen auf die objektorientierte Programmierung bedeutet das: Generalisierungen, also Klassen, die aus Generalisierungen hervorgegangen sind, haben selbst keine Instanzen und sind daher insbesondere nicht instanziierbar.
In der objektorientierten Programmierung nennt man nicht instanziierbare Klassen abstrakt. Der Grund für die mangelnde Instanziierbarkeit ist nicht immer konzeptuell (wie beispielsweise das Prinzip, dass eine Klasse eine Generalisierung ist und daher nicht instanziierbar sein sollte), sondern oft rein technisch. Abstrakten Klassen fehlen in der Regel Angaben, die das Verhalten ihrer Instanzen vollständig spezifizieren und diese somit brauchbar machen würden. Instanzen dieser Klassen wären unvollständig definiert und würden zu Laufzeitfehlern führen. Diese fehlenden Eigenschaften werden in den Klassen geliefert, die von den abstrakten erben (siehe nächstes Kapitel), wobei die Idee ist, dass sich die Eigenschaften von Klasse zu Klasse unterscheiden. Klassen, die nicht abstrakt sind und eigene Instanzen haben können, nennt man konkret. Ein typisches Beispiel für eine abstrakte Klasse in SMALLTALK ist die Klasse Collection.
Schon am Fehlen von Instanzvariablen erkennt man, dass die Implementierung von Collection begrenzt ist. Instanzen wären schlicht zustandslos und daher kaum zu gebrauchen. Besonders deutlich wird die Abstraktheit jedoch an der Implementation der Methode add:. Hier wird anstatt etwas Entsprechendes zu tun, die Methode implementedBySubclass aufgerufen, die eine Fehlermeldung ausgibt. Wenn jemand versuchen würde, add: auf einer Instanz von Collection oder einer ihrer Subklassen aufzurufen, würde das zu einer Enttäuschung führen.
Allerdings tritt diese Enttäuschung erst zur Laufzeit auf. Viele andere Sprachen verlangen daher, dass man abstrakte Klassen mit einem Schlüsselwort wie "abstract" markiert und verbieten dann (durch den Compiler), die Klasse zu instanziieren. Dies ist in SMALLTALK jedoch nicht möglich, da Klassen in Variablen gespeichert werden können und der Compiler nicht wissen kann, welches Objekt die Variable nun gerade bezeichnet.
Der Hinweis, dass man eine abstrakte Klasse instanziiert hat, erfolgt in SMALLTALK nicht nur zur Laufzeit, sondern auch dann, wenn man versucht, eine nicht implementierte Methode aufzurufen. Um zu verhindern, dass Instanzen einer abstrakten Klasse überhaupt erzeugt werden, könnte man die Konstruktoren, insbesondere "new" und "new:", entsprechend überschreiben (siehe Abschnitt 8.2). Dies würde jedoch auch die Instanziierung der Klassen verhindern, die von Collection erben, was kaum zumutbar ist. Diese Klassen müssten dann "new" und "new:" wieder neu einführen, da "new" und "new:" primitive Methoden aufrufen.
Man könnte in SMALLTALK die Methode add: in der Klasse Collection ganz weglassen. Ein Aufruf von add: auf einer Instanz von Collection oder einer ihrer Subklassen würde dann zu einem Aufruf von doesNotUnderstand und der Ausgabe einer entsprechenden Fehlermeldung führen. Diese Fehlermeldung wäre jedoch weniger aufschlussreich für die Programmierer, da sie nicht zwischen einem falschen Methodennamen und dem Vergessen der Implementierung in einer Subklasse unterscheiden könnte. Es ist sinnvoll, eine Methode wie add: in Collection bereitzustellen, die auf ein Versäumnis hinweist, falls eines vorliegt.
Der Aufruf einer abstrakten, in der Klasse nicht implementierten Methode aus derselben Klasse heraus (mit "self" als Empfänger) ist ein gängiges Muster in der objektorientierten Programmierung. Man nennt es auch "offene Rekursion", da der Aufruf auf dem Objekt selbst erfolgt und noch nicht klar ist, welche erbende Klasse die Implementierung liefert. Dieses Muster wird auch verwendet, um das oben beschriebene Dilemma von Quadrat und Rechteck aufzulösen.

Frage: Was sind abstrakte Klassen in der objektorientierten Programmierung?
Antwort: Abstrakte Klassen in der objektorientierten Programmierung sind Klassen, die selbst keine Instanzen haben und daher nicht instanziierbar sind. Sie werden oft verwendet, um gemeinsame Eigenschaften und Methoden für ihre Subklassen bereitzustellen, aber sie sind in der Regel unvollständig definiert und können zu Laufzeitfehlern führen, wenn sie direkt instanziiert werden.

Frage: Warum sind abstrakte Klassen in der objektorientierten Programmierung nicht instanziierbar?
Antwort: Abstrakte Klassen sind in der Regel nicht instanziierbar, weil ihnen oft die notwendigen Informationen fehlen, um Instanzen vollständig zu initialisieren. Sie dienen als Vorlagen für Subklassen, die die fehlenden Details ergänzen.

Frage: Was ist ein Beispiel für eine abstrakte Klasse in SMALLTALK und wie zeigt sich ihre Abstraktheit?
Antwort: Ein Beispiel für eine abstrakte Klasse in SMALLTALK ist die Klasse "Collection". Ihre Abstraktheit zeigt sich darin, dass sie keine benannten Instanzvariablen hat und einige ihrer Methoden, wie "add:", nicht implementiert sind. Wenn jemand versuchen würde, die Methode "add:" auf einer Instanz von "Collection" oder einer ihrer Subklassen aufzurufen, würde dies zu einer Fehlermeldung führen.

Frage: Wie kann in SMALLTALK verhindert werden, dass Instanzen einer abstrakten Klasse erzeugt werden?
Antwort: In SMALLTALK erfolgt die Erkennung, dass eine abstrakte Klasse instanziiert wurde, zur Laufzeit, wenn versucht wird, eine nicht implementierte Methode aufzurufen. Um zu verhindern, dass Instanzen einer abstrakten Klasse überhaupt erzeugt werden, könnte man die Konstruktoren, insbesondere "new" und "new:", entsprechend überschreiben. Dies würde jedoch auch die Instanziierung der Klassen verhindern, die von der abstrakten Klasse erben, was oft nicht akzeptabel ist.

Frage: Warum könnte das Weglassen einer Methode wie "add:" in einer abstrakten Klasse in SMALLTALK weniger aufschlussreich für Programmierer sein?
Antwort: Das Weglassen einer Methode wie "add:" in einer abstrakten Klasse in SMALLTALK könnte weniger aufschlussreich sein, da die Fehlermeldung, die bei einem Aufruf dieser Methode auftritt, nicht zwischen einem falschen Methodennamen und dem Vergessen der Implementierung in einer Subklasse unterscheiden könnte. Das Bereitstellen einer Methode wie "add:" in der abstrakten Klasse, die auf ein Versäumnis hinweist, ist sinnvoll, um Programmierer auf das Problem aufmerksam zu machen.
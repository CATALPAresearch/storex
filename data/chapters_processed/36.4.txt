36.4 Überschreiben, Überladen und dynamisches Binden

Nun hat die Subklasse die Möglichkeit, neue Member hinzuzufügen und bereits vorhandene zu redefinieren. In Java ist die Redefinition auf das Überschreiben beschränkt, was bedeutet, dass eine Methode mit derselben Signatur (bestehend aus Methodennamen und formalen Parametertypen) erneut definiert werden kann, jedoch mit einer geänderten Implementierung. Die Methode kann auch den Rückgabetyp kovariant ändern, d.h., in Richtung Subtyp. Die Einhaltung der Typinvarianten, die mit ihren (geerbten) Parametern verbunden sind, über die hinaus die überschreibende Methode nichts tut, was mit der überschriebenen Methode inkompatibel ist, kann durch die Sprachdefinition von Java nicht erzwungen werden. In diesem Punkt liegt die Verantwortung beim Programmierer.


Frage: Was bedeutet es, eine Methode in Java zu redefinieren?
Antwort: In Java kann eine Subklasse eine Methode mit derselben Signatur (bestehend aus Methodennamen und formalen Parametertypen) wie eine Methode der Superklasse neu definieren, jedoch mit einer geänderten Implementierung. Die Methode kann auch den Rückgabetyp kovariant ändern, d.h., in Richtung Subtyp. Die Einhaltung der Typinvarianten, die mit ihren (geerbten) Parametern verbunden sind, über die hinaus die überschreibende Methode nichts tut, was mit der überschriebenen Methode inkompatibel ist, kann durch die Sprachdefinition von Java nicht erzwungen werden. In diesem Punkt liegt die Verantwortung beim Programmierer.

Frage: Was bedeutet es, wenn eine Methode in Java kovariant geändert wird?
Antwort: Wenn eine Methode in Java kovariant geändert wird, bedeutet das, dass sie den Rückgabetyp in Richtung Subtyp ändern kann. Das heißt, der Rückgabetyp der überschriebenen Methode kann eine Unterklasse des Rückgabetyp der ursprünglichen Methode sein.


In Java können auch Methoden mit demselben Namen, aber verschiedenen Parametertypen in derselben Klasse oder einer Subklasse vorhanden sein. Diese Methoden nennt man dann überladen. Es ist wichtig zu verstehen, dass in Java Überladen und Überschreiben zwei grundverschiedene Dinge sind, obwohl in beiden Fällen eine Methode mit dem gleichen Namen erneut definiert wird: Beim Überladen wird eine neue Methode eingeführt, beim Überschreiben wird eine bereits existierende Methode neu definiert. Diese Unterscheidung spielt beim dynamischen Binden eine entscheidende Rolle.


Frage: Was ist der Unterschied zwischen Überladen und Überschreiben in Java?
Antwort: Beim Überladen wird eine neue Methode mit demselben Namen, aber verschiedenen Parametertypen eingeführt, während beim Überschreiben eine bereits existierende Methode neu definiert wird. Diese Unterscheidung ist wichtig für das dynamische Binden.


Um das dynamische Binden in Java genau zu verstehen (und damit das Verhalten eines Programms vorherzusagen), muss man sich den Bindealgorithmus vor Augen halten. Dieser funktioniert wie folgt: 1. Die Methode wird aufgerufen. 2. Der Compiler prüft, ob die Methode in der Klasse, in der sie aufgerufen wurde, definiert ist. Wenn ja, wird die Methode dort ausgeführt. 3. Wenn die Methode nicht in der Klasse definiert ist, wird der Compiler die Superklasse überprüfen. Dies wird so lange wiederholt, bis die Methode gefunden wurde oder die Klassenhierarchie durchsucht ist. 4. Wenn die Methode nicht in der Klassenhierarchie gefunden wurde, wird eine Methode mit dem gleichen Namen in einer Schnittstelle gesucht, die von der Klasse implementiert wird. 5. Wenn die Methode immer noch nicht gefunden wurde, wird eine Fehlermeldung ausgegeben.

Frage: Wie funktioniert der Bindealgorithmus in Java?
Antwort: Der Bindealgorithmus in Java funktioniert, indem er zunächst die Methode in der Klasse sucht, in der sie aufgerufen wurde. Wenn sie nicht gefunden wird, wird die Superklasse überprüft, bis die Methode gefunden wird oder die Klassenhierarchie durchsucht ist. Wenn die Methode nicht in der Klassenhierarchie gefunden wurde, wird eine Methode mit dem gleichen Namen in einer Schnittstelle gesucht, die von der Klasse implementiert wird. Wenn die Methode immer noch nicht gefunden wurde, wird eine Fehlermeldung ausgegeben.

Frage: Wie funktioniert das dynamische Binden in Java?
Antwort: Das dynamische Binden in Java funktioniert durch einen Bindealgorithmus, der im Klassenbereich der Klasse des Objekts beginnt und sich durch die Klassenhierarchie nach oben arbeitet, bis eine passende Methode gefunden wird oder die Suche bei Object endet.


Bereits zur Übersetzungszeit wird ein dynamischer Methodenaufruf lose an eine Methodendeklaration gebunden, und zwar an genau diejenige, die die folgenden Bedingungen erfüllt: Sie hat denselben Namen und dieselbe Anzahl von Parametern wie die aufgerufene Methode. Sie ist in der Klasse, die dem deklarierten Typ des Ausdrucks entspricht, der das Empfängerobjekt liefert (oftmals einfach eine Variable), deklariert oder wird von einer ihrer Superklassen geerbt. Die deklarierten Parametertypen des Aufrufs (die deklarierten tatsächlichen Parametertypen) sind jeweils Subtypen der deklarierten Parametertypen der Methodendeklaration (der deklarierten formalen Parametertypen). Es gibt keine andere Methode, die dieselben Voraussetzungen erfüllt, deren deklarierte formale Parametertypen jedoch näher oder gleich weit vom Typ des Aufrufs entfernt sind (Entfernung gemessen an der Anzahl der Subtypen, die dazwischen liegen).


Frage: Wie wird ein dynamischer Methodenaufruf zur Übersetzungszeit gebunden?
Antwort: Ein dynamischer Methodenaufruf wird zur Übersetzungszeit lose an eine Methodendeklaration gebunden, und zwar an genau diejenige, die den Namen und die Anzahl der Parameter der aufgerufenen Methode teilt, in der Klasse deklariert ist, die dem deklarierten Typ des Empfängerobjekts entspricht, und deren deklarierte Parametertypen Subtypen der deklarierten Parametertypen des Aufrufs sind. Wenn es mehrere solche Methoden gibt, wird diejenige gewählt, deren deklarierte formale Parametertypen am nächsten oder gleich weit vom Typ des Aufrufs entfernt sind.

Frage: Wann wird eine dynamische Methode an eine Methodendeklaration gebunden?
Antwort: Bereits zur Übersetzungszeit wird ein dynamischer Methodenaufruf lose an eine Methodendeklaration gebunden, und zwar an genau diejenige, die den Namen und die Anzahl der Parameter der aufgerufenen Methode teilt, in der Klasse deklariert ist, die dem deklarierten Typ des Empfängerobjekts entspricht oder von einer ihrer Superklassen geerbt wird, und deren deklarierte Parametertypen Subtypen der deklarierten Parametertypen der Methodendeklaration sind.

Frage: Wie wird ein dynamischer Methodenaufruf in der objektorientierten Programmierung gebunden?
Antwort: Ein dynamischer Methodenaufruf wird in der objektorientierten Programmierung an eine Methodendeklaration gebunden, die den gleichen Namen und dieselbe Anzahl von Parametern wie die aufgerufene Methode hat, in der Klasse deklariert ist, die dem deklarierten Typ des Empfängerobjekts entspricht, und deren deklarierte Parametertypen Subtypen der deklarierten Parametertypen des Aufrufs sind. Wenn keine solche Methode gefunden wird, wird die Suche nach einer Methode mit den gleichen Eigenschaften in den Superklassen wiederholt.


Dadurch wird die oberste Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden ausgewählt, die für die Bindung infrage kommt. Beachten Sie, dass die überschreibenden Methoden dieselbe Signatur haben müssen wie die überschriebene Methode; diese Methoden bilden eine Art Familie, aus der eine Methode zur Bindung ausgewählt wird.


Frage: Was ist die Funktion der obersten Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden?
Antwort: Die oberste Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden wird ausgewählt, um für die Bindung infrage zu kommen. Diese Methode muss dieselbe Signatur haben wie die überschreibenden Methoden, die eine Art Familie bilden.

Frage: Was ist die Funktion der obersten Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden?
Antwort: Die oberste Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden wird ausgewählt, um für die Bindung infrage zu kommen. Diese Methode wird ausgewählt, wenn die überschreibenden Methoden dieselbe Signatur haben wie die überschriebene Methode.

Frage: Was ist die Bedeutung der Signatur in der objektorientierten Programmierung?
Antwort: In der objektorientierten Programmierung ist die Signatur eine Möglichkeit, Methoden zu identifizieren und zu unterscheiden. Die Signatur einer Methode besteht aus ihrem Namen und der Anzahl, Art und Reihenfolge ihrer Parameter. Methoden mit derselben Signatur bilden eine Familie, aus der eine Methode zur Bindung ausgewählt wird, wenn eine Nachricht gesendet wird.

Frage: Was ist die Bindung in der objektorientierten Programmierung?
Antwort: In der objektorientierten Programmierung ist die Bindung der Prozess, bei dem eine Methode ausgewählt wird, die auf eine Nachricht reagieren soll. Die Bindung erfolgt dynamisch zur Laufzeit, wenn eine Nachricht gesendet wird. Die oberste Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden wird ausgewählt, die für die Bindung infrage kommt.


Zur Laufzeit wird dann nur noch der tatsächliche Typ des Empfängerobjekts (die Klasse, von der es eine Instanz ist) bestimmt. Dieser muss aufgrund der Regeln der Zuweisungskompatibilität ein Subtyp des deklarierten Typs des Ausdrucks sein, der das Empfängerobjekt liefert. Mit diesem tatsächlichen (auch dynamisch genannten) Typ wird dann aus der zuvor bestimmten Gruppe von in Frage kommenden überschriebenen Methoden diejenige ausgewählt, die in der Klasse definiert wurde, die der Klasse des Empfängerobjekts in der Superklassenkette am nächsten ist.


Frage: Was ist der Unterschied zwischen dem deklarierten Typ und dem tatsächlichen Typ eines Objekts?
Antwort: Der deklarierte Typ eines Objekts ist der Typ, der bei der Deklaration des Objekts angegeben wird, während der tatsächliche Typ (auch dynamischer Typ genannt) erst zur Laufzeit bestimmt wird. Der tatsächliche Typ muss ein Subtyp des deklarierten Typs sein.

Frage: Wie wird die tatsächliche Methode bei der Laufzeit bestimmt?
Antwort: Zur Laufzeit wird der tatsächliche Typ des Empfängerobjekts bestimmt. Mit diesem tatsächlichen (auch dynamisch genannten) Typ wird dann aus der Gruppe der in Frage kommenden überschriebenen Methoden diejenige ausgewählt, die in der Klasse definiert wurde, die der Klasse des Empfängerobjekts in der Superklassenkette am nächsten ist.

Frage: Was ist der Unterschied zwischen dem deklarierten Typ und dem tatsächlichen Typ eines Objekts?
Antwort: Der deklarierte Typ eines Objekts ist der Typ, der bei der Deklaration der Variablen angegeben wird, während der tatsächliche Typ eines Objekts der Typ ist, der zur Laufzeit bestimmt wird und der Klasse angehört, von der das Objekt eine Instanz ist. Die Zuweisungskompatibilität stellt sicher, dass der tatsächliche Typ des Objekts ein Subtyp des deklarierten Typs ist.


Wenn bei der Suche nach einer Methode zur Übersetzungszeit nach dem oben beschriebenen Algorithmus (Schritt 4) eine oder mehrere andere Methodendefinitionen gleich weit von der aufgerufenen Methode entfernt sind, meldet der Compiler einen sogenannten Methodenambiguitätsfehler. Dieser bedeutet, dass die aufgerufene Methode durch den Aufruf nicht eindeutig bestimmt ist. Beachten Sie, dass dieser Fehler durch Methodenaufrufe, nicht durch Methodendeklarationen verursacht wird. Wenn Sie den problematischen Aufruf entfernen, tritt auch kein Fehler mehr auf.


Frage: Was ist ein Methodenambiguitätsfehler?
Antwort: Ein Methodenambiguitätsfehler tritt auf, wenn bei der Suche nach einer Methode zur Übersetzungszeit nach dem oben beschriebenen Algorithmus (Schritt 4) eine oder mehrere andere Methodendefinitionen gleich weit von der aufgerufenen Methode entfernt sind. Dies bedeutet, dass die aufgerufene Methode durch den Aufruf nicht eindeutig bestimmt ist.

Frage: Was verursacht einen Methodenambiguitätsfehler?
Antwort: Ein Methodenambiguitätsfehler wird verursacht, wenn bei der Suche nach einer Methode zur Übersetzungszeit nach dem oben beschriebenen Algorithmus (Schritt 4) eine oder mehrere andere Methodendefinitionen gleich weit von der aufgerufenen Methode entfernt sind und der Compiler dadurch nicht eindeutig bestimmen kann, welche Methode aufgerufen werden soll.

Frage: Wann tritt ein Methodenambiguitätsfehler nicht mehr auf?
Antwort: Ein Methodenambiguitätsfehler tritt nicht mehr auf, wenn der problematische Aufruf entfernt wird.

Frage: Wer meldet einen Methodenambiguitätsfehler?
Antwort: Der Compiler meldet einen Methodenambiguitätsfehler.

Frage: Was bedeutet ein Methodenambiguitätsfehler?
Antwort: Ein Methodenambiguitätsfehler bedeutet, dass die aufgerufene Methode durch den Aufruf nicht eindeutig bestimmt ist.


Beachten Sie, dass in Sprachen, in denen das dynamische Binden auch die Typen der tatsächlichen Parameter berücksichtigt (sogenanntes Mehrfach-Dispatching), der Unterschied zwischen Überladen und Überschreiben verschwimmt. In Java hingegen muss das dynamische Binden anhand der Parametertypen genau wie in SMALLTALK über sogenanntes Doppel-Dispatching simuliert werden.

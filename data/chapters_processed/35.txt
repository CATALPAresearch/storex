35 Objekte und Typen

Java-Programme sind objektorientierte Programme. Zur Laufzeit bestehen sie aus einer Menge interagierender Objekte. Dabei ist Java stark typisiert: Jedes Objekt gehört zum Wertebereich eines oder mehrerer Typen. Anders als in SMALLTALK gibt es in Java neben Objekten auch Werte wie Zahlen, Zeichen und Wahrheitswerte, die keine Objekte sind.


Frage: Was ist der Unterschied zwischen Java und SMALLTALK in Bezug auf die Objektorientierung?
Antwort: In Java sind neben Objekten auch Werte wie Zahlen, Zeichen und Wahrheitswerte vorhanden, die keine Objekte sind. Im Gegensatz dazu sind in SMALLTALK alle Werte Objekte.

Frage: Was ist die Hauptunterschiede zwischen Java und SMALLTALK?
Antwort: Der Hauptunterschied zwischen Java und SMALLTALK ist, dass Java stark typisiert ist und neben Objekten auch Werte wie Zahlen, Zeichen und Wahrheitswerte kennt, die keine Objekte sind. Im Gegensatz dazu ist SMALLTALK dynamisch typisiert und kennt nur Objekte.

Frage: Was ist der Unterschied zwischen Objekten und Werten in Java?
Antwort: In Java sind Objekte Instanzen von Klassen und haben einen Verweis auf einen Speicherbereich, in dem ihre Attribute gespeichert sind. Währenddessen sind Werte wie Zahlen, Zeichen und Wahrheitswerte nicht instanziiert und haben keinen Verweis auf einen Speicherbereich. Sie sind direkt in den Variablen gespeichert.


In Java werden zunächst sechs Arten von Typen unterschieden: primitive Typen, Klassentypen, Interfacetypen, Array-Typen, Aufzählungstypen und Annotationstypen. Von Klassen- und Interfacetypen gibt es seit Java 5 auch parametrisierte Varianten, die denen von STRONGTALK stark ähneln (die Java-Generics stammen teilweise von Autoren von STRONGTALK). Die primitiven Typen sind in der Sprachdefinition festgelegt. Es handelt sich um byte, short, int, long, float, double, boolean und char. Sie unterscheiden sich nicht wesentlich von den Typen in gängigen, statisch typgeprüften prozeduralen Sprachen.


Frage: Wie viele Arten von Typen werden in Java unterschieden?
Antwort: In Java werden sechs Arten von Typen unterschieden: primitive Typen, Klassentypen, Interfacetypen, Array-Typen, Aufzählungstypen und Annotationstypen.


Alle anderen Typen werden in Java durch Typkonstruktion mittels entsprechender Sprachkonstrukte definiert. Ein Teil dieser Typen ist jedoch in der Sprachdefinition bereits festgelegt. Java sieht für jeden primitiven Typ einen im Wesentlichen gleichnamigen Referenztyp vor, dessen Werte jeweils einen Wert eines entsprechenden primitiven Typs aufnehmen können. Diese Typen, nämlich Byte, Short, Integer, Long, Float, Double, Boolean und Character, nennt man deshalb Wrapper-Typen (sie verpacken gewissermaßen einen Wert eines primitiven Typs). Weitere Typen, die die Java-Sprachdefinition voraussetzt, sind Object, String, Throwable, Error, Exception, RuntimeException und Thread. Diese werden an entsprechenden Stellen unten weiter erläutert.


Frage: Was sind Wrapper-Typen in Java?
Antwort: In Java werden für jeden primitiven Typ Referenztypen definiert, die Werte eines entsprechenden primitiven Typs aufnehmen können. Diese Typen, nämlich Byte, Short, Integer, Long, Float, Double, Boolean und Character, werden Wrapper-Typen genannt.


Genau wie in SMALLTALK müssen auch in Java die Objekte irgendwoher kommen. Neben der Instanziierung von Klassen, wie Sie sie auch schon von SMALLTALK kennen, gibt es dafür auch in Java Literale: Ganze Zahlen (Integer-Literale), Gleitkommazahlen (Floating-Point-Literale), Zeichen (Character-Literale), Zeichenketten (String-Literale), Boolean-Literale, Null-Literale

Frage: Was sind Literale in Java?
Antwort: Literale sind in Java fest definierte Werte, die direkt in den Quellcode eingebettet werden können. Sie werden vom Compiler in Maschinencode übersetzt. In Java gibt es Literale für die folgenden Datentypen: Ganze Zahlen (Integer-Literale), Gleitkommazahlen (Floating-Point-Literale), Zeichen (Character-Literale), Zeichenketten (String-Literale), Boolean-Literale und Null-Literale. Ganze Zahlen

Frage: Was ist der Unterschied zwischen lokalen Variablen und Instanzvariablen in Java?
Antwort: Lokale Variablen sind Variablen, die innerhalb einer Methode deklariert werden und nur innerhalb dieser Methode sichtbar sind. Instanzvariablen sind Variablen, die in einer Klasse deklariert werden und für alle Instanzen dieser Klasse gültig sind. Instanzvariablen werden initialisiert, wenn ein Objekt erzeugt wird und behalten ihren Wert zwischen verschiedenen Methodenaufrufen bei.

Frage: Was ist der Unterschied zwischen einem Objekt und einem Literal in Java?
Antwort: Der Unterschied zwischen einem Objekt und einem Literal in Java ist, dass ein Objekt eine Instanz einer Klasse ist, die zur Laufzeit erzeugt wird, während ein Literal ein Wert ist, der direkt in den Quellcode eingebettet ist und zur Laufzeit als konkreter Wert zur Verfügung gestellt wird. Objekte haben einen Klassentyp, während Literale einen primitiven Typ haben.

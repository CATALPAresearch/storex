7.2 Klassendefinitionen

Eine Klassendefinition liefert die Intension einer Klasse. Sie besteht in SMALLTALK zunächst aus der Angabe eines nicht anderweitig verwendeten, durch ein Symbol repräsentierten Klassennamens sowie der Angabe der die Objekte der Klasse beschreibenden Instanzvariablen und Methodendefinitionen. Anders als in vielen anderen objektorientierten Programmiersprachen erfolgt in SMALLTALK die Klassendefinition nicht in einer Datei (was hätte eine Datei auch mit den Konzepten einer Programmiersprache zu tun?), sondern durch Eintragungen in eine dafür vorgesehene Datenstruktur (genauer: durch Erzeugung eines die Klasse beschreibenden Objekts). Es gibt also auch insbesondere keine Syntax für eine Klassendefinition, sondern nur ein Schema.
Alle Instanzen einer Klasse verfügen somit über den gleichen Satz von Instanzvariablen, aber nicht denselben, was so viel bedeutet wie, dass jede Instanz der Klasse (jedes Objekt, das zur Extension der Klasse gehört) diese Variablen individuell belegen kann. Im Gegensatz dazu verstehen alle Instanzen einer Klasse nicht nur dieselben Nachrichten, sie verwenden auch dieselben Methodendefinitionen, um auf die Nachrichten zu reagieren. Instanzen einer Klasse können sich also nur insoweit in ihrem Verhalten unterscheiden, wie sich die Methodendefinitionen auf die Werte der Instanzvariablen beziehen, wie also das in den Methoden spezifizierte Verhalten vom Inhalt der Instanzvariablen abhängt. Insbesondere ist es nicht vorgesehen, dass verschiedene Instanzen einer Klasse über verschiedene Definitionen einer Methode (genauer: über verschiedene Definitionen von zu der Nachricht passenden Methoden) verfügen. Das unterscheidet die klassenbasierte von der prototypenbasierten Form der objektorientierten Programmierung.
Die beiden Einträge „indizierte Instanzvariablen“ und „atomar“ stehen übrigens dafür, ob eine Instanz der Klasse indizierte Instanzvariablen haben soll (klar) und falls ja, ob diese Variablen dann eine binäre Repräsentation (ja) oder Referenzen (nein) enthalten. Mit Hilfe von indizierten Instanzvariablen, die binäre Repräsentationen enthalten, werden z.B. Zahlen, Strings, aber auch Bitmaps wie Fensterinhalte, der Cursor oder Fonts intern dargestellt. Da man als Programmierer solche Klassen in der Regel nicht selbst anlegt, werde ich den Eintrag „atomar“ zukünftig unter den Tisch fallen lassen.
Eine Klasse (das Objekt, das die Klassen repräsentiert, nicht ihr Name) wird in SMALLTALK nach ihrer Erzeugung übrigens durch eine globale Pseudovariable repräsentiert, deren Name der Name der Klasse ist. Da die Variable global ist, muss sie (und damit auch der Name der Klasse) immer mit einem Großbuchstaben beginnen (s. Abschnitt 1.5.2 in Kurseinheit 1). Die Variable wird automatisch mit der Klassendefinition eingeführt (vereinbart); ihr „Wert“, die Klasse, auf die sie verweist, ist das Objekt, das ihr bei der Anlage der Klasse zugewiesen wird. Da Klassennamen globale Variablen sind, da sie insbesondere absolut global sind und nicht nur in Bezug auf irgendeine Programmeinheit (wie etwa eine Methodendefinition), sind sie von überall her zugreifbar. Außerdem wird jede neue Klasse in eine Art Systemwörterbuch namens „Smalltalk“ (repräsentiert von der globalen Variable Smalltalk; s. Selbsttestaufgabe 1.2) eingetragen, und ihr Name (als Symbol) in die Symboltabelle SymbolTable. Mittels einer solchen Klassendefinition ist man nun in der Lage, das SMALLTALK-System um neue, eigene Klassen zu erweitern.

Frage: Was ist eine Klassendefinition in SMALLTALK?
Antwort: Eine Klassendefinition in SMALLTALK liefert die Intension oder Beschreibung einer Klasse. Sie besteht aus dem Namen der Klasse, der Liste der benannten Instanzvariablen, Angaben zu indizierten Instanzvariablen, Informationen zur Atomarität, und einer Liste von Instanzmethoden.

Frage: Wie werden Klassendefinitionen in SMALLTALK umgesetzt, im Vergleich zu anderen objektorientierten Programmiersprachen?
Antwort: In SMALLTALK erfolgt die Klassendefinition nicht in einer separaten Datei wie in vielen anderen objektorientierten Programmiersprachen. Stattdessen werden Klassendefinitionen durch Eintragungen in eine Datenstruktur oder das Erzeugen eines Objekts repräsentiert. Es gibt keine spezielle Syntax für Klassendefinitionen, nur ein Schema.

Frage: Was sind benannte Instanzvariablen und indizierte Instanzvariablen in einer Klassendefinition?
Antwort: Benannte Instanzvariablen sind Instanzvariablen, die einem Namen zugewiesen sind und individuell von Instanzen der Klasse belegt werden können. Alle Instanzen einer Klasse verfügen über den gleichen Satz von benannten Instanzvariablen. Indizierte Instanzvariablen sind eine spezielle Art von Instanzvariablen, die in SMALLTALK verwendet werden, um z.B. Zahlen, Strings und Bitmaps intern darzustellen. Diese Variablen können binäre Repräsentationen oder Referenzen enthalten.

Frage: Welche Rolle spielt die globale Pseudovariable in SMALLTALK in Bezug auf Klassen?
Antwort: In SMALLTALK wird jede Klasse nach ihrer Erzeugung durch eine globale Pseudovariable repräsentiert, deren Name dem Namen der Klasse entspricht. Diese globale Pseudovariable ist notwendig, um auf die Klasse und ihre Methoden zugreifen zu können. Klassennamen sind global und von überall aus im Code zugreifbar.

Frage: Warum könnte es notwendig sein, indirekt auf den Inhalt von indizierten Instanzvariablen zuzugreifen, wie im Fall des Stack-Objekts in der Klassendefinition?
Antwort: Im Fall des Stack-Objekts ist es notwendig, indirekt auf den Inhalt der indizierten Instanzvariablen zuzugreifen, um die Repräsentation des Stack-Inhalts zu verbergen. Durch diese Indirektion können andere Objekte nicht direkt auf die Elemente des Stacks zugreifen, sondern müssen die von der Klasse definierten Methoden verwenden, um Elemente hinzuzufügen, zu entfernen oder abzurufen. Dies ermöglicht eine bessere Kontrolle über den Zustand des Stack-Objekts und verhindert unerlaubte Zugriffe von außen.
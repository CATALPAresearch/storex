39.2 Abhängigkeiten zwischen Modulen

Die Aufteilung eines Programms in Module dient vor allem dem Zweck der unabhängigen Entwicklung der Programmteile. Damit dies erreicht wird, muss die Abhängigkeit der Module möglichst gering ausfallen. Dabei bedeutet Abhängigkeit in der Regel Änderungsabhängigkeit: Wenn sich in einem Teil etwas ändert, muss sich auch im davon abhängigen Teil etwas ändern. Sie ergibt sich regelmäßig aus einer Benutzungsbeziehung. In der objektorientierten Programmierung kommt jedoch noch die Vererbungsabhängigkeit hinzu. Module, die vollkommen unabhängig voneinander sind, sind ein Indikator dafür, dass man nicht ein Programm entwickelt, sondern mehrere. Wo keine Abhängigkeiten bestehen, gibt es auch kein Zusammenspiel.


Frage: Wozu dient die Aufteilung eines Programms in Module?
Antwort: Die Aufteilung eines Programms in Module dient vor allem dem Zweck der unabhängigen Entwicklung der Programmteile. Dabei muss die Abhängigkeit der Module möglichst gering ausfallen.

Frage: Was ist die Folge von Abhängigkeit in der objektorientierten Programmierung?
Antwort: Die Folge von Abhängigkeit in der objektorientierten Programmierung ist Änderungsabhängigkeit, die sich aus einer Benutzungsbeziehung ergibt. Wenn sich in einem Teil etwas ändert, muss sich auch im davon abhängigen Teil etwas ändern. Zusätzlich gibt es in der objektorientierten Programmierung auch Vererbungsabhängigkeit.


Abhängigkeit ist eine gerichtete Beziehung: Dass A von B abhängt, heißt nicht, dass auch B von A abhängt. Und so manifestieren sich auch in den Klassen als Modulen der Java-Programmierung die zwei Richtungen von Abhängigkeit in zwei verschiedenen Formen: Dass eine Klasse von (der Schnittstelle) einer anderen abhängt, erkennt man daran, dass auf Objekte der anderen Klasse zugegriffen wird. Dies zeigt sich wiederum daran, dass Variablen des entsprechenden Typs deklariert werden und, sofern sich die andere Klasse in einem anderen Paket befindet, die Klasse oder sogar das ganze Paket importiert wird. Dass eine Klasse einige ihrer Member anderen zur Benutzung anbietet und diese dadurch von ihr abhängig werden können, erkennt man an der Verwendung von Zugriffsmodifikatoren, die nicht private sind, sowie an der Implementierung von Interfaces.


Frage: Wie äußert sich die Abhängigkeit zwischen Klassen in Java?
Antwort: Die Abhängigkeit zwischen Klassen in Java manifestiert sich in zwei verschiedenen Formen: Zum einen, wenn eine Klasse auf Objekte einer anderen Klasse zugreift, was sich durch die Deklaration von Variablen des entsprechenden Typs und gegebenenfalls durch das Importieren der Klasse oder des Pakets zeigt. Zum anderen, wenn eine Klasse einige ihrer Member anderen zur Benutzung anbietet, was sich durch die Verwendung von Zugriffsmodifikatoren, die nicht private sind, sowie an der Implementierung von Interfaces zeigt.


In Java sind zunächst zirkuläre Abhängigkeiten erlaubt. Insbesondere dürfen sich zwei Klassen (genauer: Kompilierungseinheiten) wechselseitig importieren. In der Softwareentwicklung ist dies jedoch verpönt, schon weil eine wechselseitige Abhängigkeit eine enge Kopplung dokumentiert, die zwischen Modulen grundsätzlich vermieden werden sollte. Für Java-Module (siehe unten) sind zirkuläre Abhängigkeiten daher verboten. Wenn Sie einmal in die Verlegenheit kommen sollten, selbst Java-Module zu definieren, werden Sie feststellen, dass dieses Verbot eine sehr sorgfältige Planung der Modularisierung erzwingt, was an sich schon von großem Wert ist.


Frage: Sind zirkuläre Abhängigkeiten in Java erlaubt?
Antwort: Nein, zirkuläre Abhängigkeiten sind in Java nicht erlaubt, außer bei Klassen (genauer: Kompilierungseinheiten). Für Java-Module sind sie jedoch verboten.

Frage: Warum sind zirkuläre Abhängigkeiten in Java-Modulen verboten?
Antwort: Zirkuläre Abhängigkeiten sind in Java-Modulen verboten, um eine enge Kopplung zwischen Modulen zu vermeiden und eine sorgfältige Planung der Modularisierung zu erzwingen.


Vererbungsabhängigkeiten zwischen Klassen, die in Java durch die Verwendung des Zugriffsmodifikators protected und der Annotation @Override zumindest angedeutet werden, sind naturgemäß nicht zirkulär. Bei der Ausdehnung der Abhängigkeit von Klassen auf Pakete können jedoch auch zirkuläre Abhängigkeiten entstehen.


Frage: Was sind zirkuläre Abhängigkeiten zwischen Paketen?
Antwort: Zirkuläre Abhängigkeiten zwischen Paketen sind Abhängigkeiten, bei denen zwei oder mehr Pakete aufeinander referenzieren, so dass ein Kreislauf entsteht. Diese Abhängigkeiten können die Modularisierung und Wartbarkeit des Codes erschweren.

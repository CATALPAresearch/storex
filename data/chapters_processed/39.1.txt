39.1 Klassen und Pakete als Module

Klassen haben in JAVA mehrere Funktionen: Neben der offensichtlichen Funktion als Vorlage für die Erzeugung von Objekten liefern sie auch Typen für ein Programm und dienen der Modularisierung.
Pakete hingegen dienen der Sammlung von Klassen und sind zugleich Namensräume für sie (keine zwei Klassen innerhalb eines Pakets dürfen denselben Namen haben). Außerdem gelten für Klassen innerhalb eines Pakets laxere gegenseitige Zugriffsbeschränkungen als für Klassen aus verschiedenen Paketen. Zwar können Pakete hierarchisch organisiert sein, aber diese Organisation hat keine Bedeutung. Insbesondere erlauben Pakete keinen privilegierten Zugriff auf Klassen ihrer Subpakete. Damit Klassen paketübergreifend aufeinander zugreifen können, bedarf es expliziter Import-Deklarationen unter Nennung der jeweiligen Paketnamen.
Die Zugreifbarkeit von Klassen, Typen und den Elementen ihrer Definition (den Membern) wird in JAVA durch sogenannte Zugriffsmodifikatoren (engl. access modifiers) eingeschränkt. Dies sind private, protected, public sowie das sogenannte "Package local," für das es kein Schlüsselwort gibt und das in Klassen bei Fehlen eines der drei anderen angenommen wird (bei Interfaces wird public angenommen). Innerhalb der Klasse selbst sind alle Elemente ihrer Definition zugreifbar. Innerhalb ihrer Subklassen sind diejenigen, die public oder protected deklariert wurden, zugänglich. Innerhalb der Klassen desselben Pakets sind alle, die public, protected oder ohne Zugriffsmodifikator deklariert wurden, zugänglich, während in anderen Paketen nur noch diejenigen zugänglich sind, die public deklariert wurden. Faktisch werden Typdefinitionen somit relativ: Was ein Typ anbietet, hängt nicht nur vom Typ selbst ab, sondern auch davon, wo er verwendet wird. Konzeptionell hat die Zugriffsbeschränkung, die gemeinsam mit einem Typ deklariert wird, jedoch nichts mit dem Typ selbst zu tun, sondern ist vielmehr die Schnittstellenspezifikation eines Moduls, wobei das Modul die Klasse ist.
Die Bedeutung von Klassen als Module wird ausführlicher in Kapitel 59 von Kurseinheit 6 behandelt. Hier betrachten wir noch kurz die konkreten Auswirkungen der Zugriffsbeschränkungen:
Die Sichtbarkeit bezieht sich in JAVA auf lexikalische Scopes. Sie wird durch Hiding, Shadowing und Obscuring eingeschränkt und kann bisweilen über Qualifizierer wiederhergestellt werden.
Die Verknüpfung von Typ und Zugriffsbeschränkung (Schnittstelle) ist in JAVA etabliert und kommt auch in anderen Sprachen vor (z. B. EIFFEL, C# und C++). Sie hat den Vorteil der sprachlichen Knappheit (Typ- und Schnittstellendeklaration in einem) und den Nachteil, dass die Zugriffsbeschränkungen nur grob eingestellt werden können. Insbesondere ist es nicht möglich, dass sich zwei inhaltlich eng zusammengehörende Klassen gegenseitig einen freieren Zugriff gestatten als allen anderen, es sei denn, man packt diese beiden in ein Paket. Außerdem hat sie den Nachteil, dass zwei unterschiedliche Konzepte der Programmierung zusammengeführt werden und dadurch von Programmierern u. U. nicht mehr als unterschiedlich wahrgenommen werden. JAVA-Compiler unterscheiden jedoch immerhin zwischen Typfehlern und Zugriffsfehlern (z. B. "is undefined" vs. "is not visible" in ECLIPSE, wobei letzteres freilich "is not accessible" hätte heißen müssen).

Frage: Welche Funktionen haben Klassen in JAVA?
Antwort: Klassen in JAVA dienen als Vorlagen für die Erzeugung von Objekten, liefern Typen für ein Programm und dienen der Modularisierung.

Frage: Wozu dienen Pakete in JAVA?
Antwort: Pakete in JAVA dienen der Sammlung von Klassen und dienen gleichzeitig als Namensräume für diese. Sie ermöglichen die Organisation von Klassen und bieten zugleich laxere Zugriffsbeschränkungen für Klassen innerhalb desselben Pakets.

Frage: Was sind Zugriffsmodifikatoren in JAVA?
Antwort: Zugriffsmodifikatoren (access modifiers) sind in JAVA Schlüsselwörter wie private, protected, public und "Package local," die die Zugriffsbeschränkungen für Klassen, Typen und deren Elemente festlegen. Sie regeln, welche Teile einer Klasse von anderen Klassen aus zugänglich sind.

Frage: Welche Auswirkungen haben die Zugriffsbeschränkungen in JAVA?
Antwort: Die Zugriffsbeschränkungen in JAVA regeln, welche Teile einer Klasse oder eines Typs von anderen Klassen oder Typen aus zugänglich sind. Sie beeinflussen die Sichtbarkeit von Variablen, Methoden und anderen Elementen innerhalb einer Klasse und zwischen Klassen, insbesondere in verschiedenen Paketen.

Frage: Wie kann auf Klassen und Typen in unterschiedlichen Paketen in JAVA zugegriffen werden?
Antwort: Um auf Klassen und Typen in verschiedenen Paketen zuzugreifen, müssen in JAVA explizite Import-Deklarationen verwendet werden, die die jeweiligen Paketnamen nennen. Pakete ermöglichen keinen privilegierten Zugriff auf Klassen ihrer Subpakete.

Frage: Was sind die konkreten Auswirkungen der Zugriffsbeschränkungen in JAVA?
Antwort: Die Zugriffsbeschränkungen in JAVA wirken sich auf die Sichtbarkeit von Elementen innerhalb von Klassen und zwischen Klassen aus. Sie regeln, welche Teile eines Moduls von anderen Modulen aus sichtbar sind und können durch Hiding, Shadowing und Obscuring weiter eingeschränkt werden. Die Verknüpfung von Typ und Zugriffsbeschränkung ist in JAVA etabliert und ermöglicht die Deklaration von Typen und Schnittstellen in einem.
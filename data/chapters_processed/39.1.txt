39.1 Klassen und Pakete als Module

Klassen haben in Java mehrere Funktionen: Neben der offensichtlichen Funktion als Vorlage für die Erzeugung von Objekten liefern sie auch Typen für ein Programm und dienen der Modularisierung.


Frage: Was sind die Funktionen von Klassen in Java?
Antwort: Klassen in Java haben drei Funktionen: Sie dienen als Vorlage für die Erzeugung von Objekten, sie liefern Typen für ein Programm und sie dienen der Modularisierung.


Pakete hingegen dienen der Sammlung von Klassen und sind zugleich Namensräume für sie (keine zwei Klassen innerhalb eines Pakets dürfen denselben Namen haben). Außerdem gelten für Klassen innerhalb eines Pakets laxere gegenseitige Zugriffsbeschränkungen als für Klassen aus verschiedenen Paketen. Zwar können Pakete hierarchisch organisiert sein, aber diese Organisation hat keine Bedeutung. Insbesondere erlauben Pakete keinen privilegierten Zugriff auf Klassen ihrer Subpakete. Damit Klassen paketübergreifend aufeinander zugreifen können, bedarf es expliziter Import-Deklarationen unter Nennung der jeweiligen Paketnamen.


Frage: Was ist die Funktion von Paketen in der Programmierung?
Antwort: Pakete dienen der Sammlung von Klassen und sind zugleich Namensräume für sie. Sie erlauben eine hierarchische Organisation, haben aber keine Bedeutung für den Zugriff auf Klassen. Für Klassenübergreifenden Zugriff sind explizite Import-Deklarationen notwendig.

Frage: Was sind Pakete in der Programmierung?
Antwort: Pakete sind in der Programmierung Sammlungen von Klassen und dienen gleichzeitig als Namensräume für sie. Sie haben eine hierarchische Organisation, aber diese hat keine Bedeutung. Pakete erlauben keinen privilegierten Zugriff auf Klassen ihrer Subpakete. Damit Klassen paketübergreifend aufeinander zugreifen können, bedarf es expliziter Import-Deklarationen unter Nennung der jeweiligen Paketnamen.


Die Zugreifbarkeit von Klassen, Typen und den Elementen ihrer Definition (den Membern) wird in Java durch sogenannte Zugriffsmodifikatoren (engl. access modifiers) eingeschränkt. Dies sind private, protected, public sowie das sogenannte "Package local," für das es kein Schlüsselwort gibt und das in Klassen bei Fehlen eines der drei anderen angenommen wird (bei Interfaces wird public angenommen). Innerhalb der Klasse selbst sind alle Elemente ihrer Definition zugreifbar. Innerhalb ihrer Subklassen sind diejenigen, die public oder protected deklariert wurden, zugänglich. Innerhalb der Klassen desselben Pakets sind alle, die public, protected oder ohne Zugriffsmodifikator deklariert wurden, zugänglich, während in anderen Paketen nur noch diejenigen zugänglich sind, die public deklariert wurden. Faktisch werden Typdefinitionen somit relativ: Was ein Typ anbietet, hängt nicht nur vom Typ selbst ab, sondern auch davon, wo er verwendet wird. Konzeptionell hat die Zugriffsbeschränkung, die gemeinsam mit einem Typ deklariert wird, jedoch nichts mit dem Typ selbst zu tun, sondern ist vielmehr die Schnittstellenspezifikation eines Moduls, wobei das Modul die Klasse ist.


Frage: Was sind Zugriffsmodifikatoren in Java?
Antwort: Zugriffsmodifikatoren in Java sind private, protected, public sowie das sogenannte "Package local". Sie werden verwendet, um die Zugreifbarkeit von Klassen, Typen und den Elementen ihrer Definition (den Membern) einzuschränken. Die Zugriffsmodifikatoren bestimmen, welche Klassen, Typen und Elemente von anderen Klassen, Typen und Elementen zugreifbar sind.

Frage: Wie wird der Zugriff auf Klassen, Typen und deren Elemente in Java eingeschränkt?
Antwort: In Java wird der Zugriff auf Klassen, Typen und deren Elemente durch sogenannte Zugriffsmodifikatoren eingeschränkt. Es gibt vier Zugriffsmodifikatoren: private, protected, public und "Package local". Die Zugriffsbeschränkung ist konzeptionell eine Schnittstellenspezifikation eines Moduls, wobei das Modul die Klasse ist.

Frage: Was regeln die Zugriffsmodifikatoren in Java?
Antwort: Die Zugriffsmodifikatoren in Java regeln die Zugreifbarkeit von Klassen, Typen und den Elementen ihrer Definition (den Membern) in Abhängigkeit von der Position, an der sie verwendet werden. Es gibt vier Zugriffsmodifikatoren: private, protected, public und "Package local". Die Zugriffsbeschränkung, die gemeinsam mit einem Typ deklariert wird, ist konzeptionell jedoch nicht mit dem Typ selbst verbunden, sondern vielmehr die Schnittstellenspezifikation eines Moduls, wobei das Modul die Klasse ist.


Hier betrachten wir noch kurz die konkreten Auswirkungen der Zugriffsbeschränkungen: Eine Klasse kann nur auf Instanzvariablen und Instanzmethoden der Klasse selbst und ihrer Superklassen zugreifen. Eine Instanzvariable ist nur innerhalb der Klasse sichtbar, in der sie deklariert ist. Eine Instanzmethode kann nur auf Instanzvariablen und Instanzmethoden der Klasse, in der sie deklariert ist, und ihrer Superklassen zugreifen. Eine Klasse kann nur auf Klassenvariablen und Klassenmethoden der Klasse selbst zugreifen. Eine Klassenvariable ist nur innerhalb der Klasse sichtbar, in der sie deklariert ist. Eine Klassenmethode kann nur auf Klassenvariablen und Klassenmethoden der Klasse, in der sie deklariert ist, zugreifen.

Frage: Wie ist der Zugriff auf Instanzvariablen und Instanzmethoden geregelt?
Antwort: Eine Klasse kann nur auf Instanzvariablen und Instanzmethoden der Klasse selbst und ihrer Superklassen zugreifen. Eine Instanzvariable ist nur innerhalb der Klasse sichtbar, in der sie deklariert ist. Eine Instanzmethode kann nur auf Instanzvariablen und Instanzmethoden der Klasse, in der sie deklariert ist, und ihrer Superklassen zugreifen.

Frage: Wie wirken sich Zugriffsbeschränkungen auf die Verwendung von Variablen und Methoden aus?
Antwort: Eine Klasse kann die Instanzvariablen und Instanzmethoden anderer Klassen nicht verwenden, wenn diese mit private deklariert sind. Eine Instanzmethode kann die Instanzvariablen und Instanzmethoden anderer Objekte nicht verwenden, wenn diese mit private deklariert sind. Eine Klasse kann die Klassenvariablen und Klassenmethoden anderer Klassen jedoch immer verwenden, unabhängig von der Deklaration. Eine Instanzmethode kann die Instanzvariablen und Instanzmethoden des Empfängers sowie die Klassenvariablen und Klassenmethoden anderer Klassen immer verwenden, unabhängig von der Deklaration.

Zugriffsbeschränkungen auf Instanzvariablen und Klassenvariablen verhindern, dass diese von außen verändert werden. Zugriffsbeschränkungen auf Methoden verhindern, dass diese von außen aufgerufen werden.

Frage: Was verhindern Zugriffsbeschränkungen auf Instanzvariablen und Klassenvariablen?
Antwort: Zugriffsbeschränkungen auf Instanzvariablen und Klassenvariablen verhindern, dass diese von außen verändert werden.

Frage: Was verhindern Zugriffsbeschränkungen auf Methoden?
Antwort: Zugriffsbeschränkungen auf Methoden verhindern, dass diese von außen aufgerufen werden.


Die Sichtbarkeit bezieht sich in Java auf lexikalische Scopes. Sie wird durch Hiding, Shadowing und Obscuring eingeschränkt und kann bisweilen über Qualifizierer wiederhergestellt werden.


Frage: Was ist Sichtbarkeit in Java?
Antwort: In Java bezieht sich Sichtbarkeit auf lexikalische Scopes und wird durch Hiding, Shadowing und Obscuring eingeschränkt. Sie kann bisweilen über Qualifizierer wiederhergestellt werden.


Die Verknüpfung von Typ und Zugriffsbeschränkung (Schnittstelle) ist in Java etabliert und kommt auch in anderen Sprachen vor (z. B. EIFFEL, C-Sharp und C++). Sie hat den Vorteil der sprachlichen Knappheit (Typ- und Schnittstellendeklaration in einem) und den Nachteil, dass die Zugriffsbeschränkungen nur grob eingestellt werden können. Insbesondere ist es nicht möglich, dass sich zwei inhaltlich eng zusammengehörende Klassen gegenseitig einen freieren Zugriff gestatten als allen anderen, es sei denn, man packt diese beiden in ein Paket. Außerdem hat sie den Nachteil, dass zwei unterschiedliche Konzepte der Programmierung zusammengeführt werden und dadurch von Programmierern u. U. nicht mehr als unterschiedlich wahrgenommen werden. Java-Compiler unterscheiden jedoch immerhin zwischen Typfehlern und Zugriffsfehlern (z. B. "is undefined" vs. "is not visible" in ECLIPSE, wobei letzteres freilich "is not accessible" hätte heißen müssen).


Frage: Was ist die Verknüpfung von Typ und Zugriffsbeschränkung in Java?
Antwort: In Java sind Typ und Zugriffsbeschränkung verknüpft, was den Vorteil der sprachlichen Knappheit hat, aber den Nachteil, dass die Zugriffsbeschränkungen nur grob eingestellt werden können. Zudem werden zwei unterschiedliche Konzepte der Programmierung zusammengeführt, was von Programmierern u. U. nicht mehr als unterschiedlich wahrgenommen wird.

Frage: Was ist der Vorteil der Verknüpfung von Typ und Zugriffsbeschränkung in Java?
Antwort: Der Vorteil der Verknüpfung von Typ und Zugriffsbeschränkung in Java ist die sprachliche Knappheit, da Typ- und Schnittstellendeklaration in einem angegeben werden können.

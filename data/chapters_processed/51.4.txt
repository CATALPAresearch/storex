51.4 Mehrfachvererbung

Getreu seinem Motto, alle Freiheit in die Hand der Programmiererin zu legen und ihr nicht mit einer gouvernantenhaften "Du-kannst-das-bestimmt-nicht"-Attitüde zu begegnen, bietet C++ (im Gegensatz zu SMALLTALK, JAVA und C-Sharp) uneingeschränkte Mehrfachvererbung. Das kann aus verschiedenen Gründen sinnvoll erscheinen: Eine Klasse, die von mehreren vollständig abstrakten (also mit keinerlei Implementierung versehenen) Klassen erbt, implementiert damit faktisch mehrere Interfaces. Der einzige Nachteil ist, dass die Programmiererin nicht in Mitteln der Sprache ausdrücken kann, ob eine abstrakte Klasse die Funktion eines Interfaces oder die einer Generalisierung (von der man Implementierung erben kann; vgl. Abschnitt 9.1) haben soll – dazu sind dann schon Namenskonventionen notwendig. Nicht selten ergibt sich aus der Aufgabenstellung, dass eine Klasse Eigenschaften von mehreren anderen gebrauchen könnte. In Sprachen mit Einfachvererbung muss man sich dann für eine Klasse als Superklasse entscheiden und den Beitrag der anderen Klassen wiederholen, also erneut implementieren oder per Delegation bzw. Forwarding einbinden. Mehrfachvererbung erlaubt im Gegensatz dazu, sich alles zusammenzuerben, was man benötigt.
Da das Erben jedoch nicht selektiv (im Sinne, dass man sich aussuchen könnte, was man von einer Klasse erbt) erfolgt und das Löschen von geerbten Membern in C++ nicht möglich ist, fühlt man sich häufig bemüßigt, die Klassen, von denen man erbt, in viele kleine Teile aufzusplitten und nur die zu beerben, deren Eigenschaften man braucht, um sich von unnötigem Ballast freizuhalten. Mehrfachvererbung ist etwas, das sich Programmiererinnen gerne wünschen. Sie bringt jedoch einige praktische Probleme mit sich, unter anderem die Frage, was zu tun ist, wenn eine Klasse von mehreren anderen Klassen verschiedene Definitionen desselben Elements (Feld oder Methode) erbt. Da die Klasse sich dann für eine der beiden Definitionen entscheiden muss, geht die der anderen verloren. Dies kann, insbesondere im Zusammenhang mit dynamischem Binden und offener Rekursion, zu unerwartetem Verhalten führen. Darüber hinaus führt die Mehrfachvererbung noch zu zahlreichen weiteren Problemen, die hier nicht weiter ausgeführt werden sollen.

Frage: Welche Art der Vererbung bietet C++ in Bezug auf Mehrfachvererbung?
Antwort: C++ bietet uneingeschränkte Mehrfachvererbung, was bedeutet, dass eine Klasse von mehreren anderen Klassen erben kann.

Frage: Warum kann Mehrfachvererbung in C++ sinnvoll sein?
Antwort: Mehrfachvererbung kann aus verschiedenen Gründen sinnvoll sein: Eine Klasse kann von mehreren vollständig abstrakten Klassen erben und damit mehrere Interfaces implementieren. In Aufgabenstellungen, in denen eine Klasse Eigenschaften von mehreren anderen Klassen benötigt, erlaubt Mehrfachvererbung, alle benötigten Eigenschaften zu erben, anstatt sich für eine einzige Superklasse entscheiden zu müssen.

Frage: Was ist ein Nachteil der Mehrfachvererbung in C++?
Antwort: Ein Nachteil der Mehrfachvererbung in C++ ist, dass das Erben nicht selektiv erfolgt, und das Löschen von geerbten Membern nicht möglich ist. Dies führt oft dazu, dass Klassen in viele kleine Teile aufgespalten werden, um unnötigen Ballast zu vermeiden.

Frage: Welches Problem kann auftreten, wenn eine Klasse von mehreren anderen Klassen verschiedene Definitionen desselben Elements erbt?
Antwort: Wenn eine Klasse in C++ von mehreren anderen Klassen verschiedene Definitionen desselben Elements (z. B. eines Feldes oder einer Methode) erbt, muss die Klasse sich für eine der beiden Definitionen entscheiden, und die andere geht verloren. Dies kann zu unerwartetem Verhalten führen, insbesondere im Zusammenhang mit dynamischem Binden und offener Rekursion.

Frage: Welche praktischen Probleme können sich aus der Mehrfachvererbung in C++ ergeben?
Antwort: Die Mehrfachvererbung in C++ kann zu zahlreichen praktischen Problemen führen, darunter die Auswahl von geerbten Definitionen, Konflikte bei gleichen Elementen in verschiedenen Elternklassen und unerwartetes Verhalten im Zusammenhang mit dynamischem Binden. Weitere Probleme können auftreten, sind jedoch in diesem Abschnitt nicht näher erläutert.
46.1 Externe Iteration

In Beziehungen mit Zu-n-Verbindungen müssen häufig mehrere Elemente der gleichen Behandlung unterzogen werden oder es müssen Elemente aus der Menge gesucht werden. Wenn jedoch Collections verwendet werden, die nicht indiziert sind (Java bietet auch Collections wie Bäume oder verkettete Listen), ist die oben gezeigte Form der Iteration nicht anwendbar. Stattdessen gibt es in Java die beiden Interfaces Enumeration (total veraltet) und Iterator (etwas neuer), die eine einheitliche Iteration über Collections mittels sogenannter Iteratoren erlauben. Jede Collection-Klasse, die Iterator implementiert, bietet dazu eine Methode iterator() an, die ein solches Iteratorobjekt (vom Typ Iterator) zurückliefert.

Frage: Was sind Iteratoren in Java?
Antwort: Iteratoren in Java sind Objekte, die eine einheitliche Iteration über verschiedene Collection-Klassen ermöglichen. Jede Collection-Klasse, die Iterator implementiert, bietet eine Methode iterator() an, die ein Iteratorobjekt zurückliefert.

Frage: Wozu dienen Iteratoren in Java?
Antwort: Iteratoren in Java dienen dazu, eine einheitliche Iteration über verschiedene Arten von Collections zu ermöglichen, unabhängig davon, ob sie indiziert sind oder nicht. Sie bieten eine standardisierte Möglichkeit, durch die Elemente einer Collection zu iterieren, ohne sich um die interne Implementierung der Collection kümmern zu müssen.

Frage: Wie erhält man einen Iterator für eine Collection in Java?
Antwort: In Java kann man einen Iterator für eine Collection erhalten, indem man die Methode iterator() auf der Collection aufruft. Diese Methode gibt ein Iterator-Objekt zurück, das für die Iteration über die Elemente der Collection verwendet werden kann.


Mit der Methode next() erhält man von diesem Iterator-Objekt zunächst das erste und anschließend alle weiteren Objekte der Collection. Mit der Methode hasNext() fragt man ab, ob die Collection noch weitere Objekte enthält.


Frage: Was tut die Methode next() in einem Iterator-Objekt?
Antwort: Die Methode next() in einem Iterator-Objekt gibt das erste und anschließend alle weiteren Objekte der Collection zurück.

Frage: Was macht die Methode hasNext() in einem Iterator-Objekt?
Antwort: Die Methode hasNext() in einem Iterator-Objekt fragt ab, ob die Collection noch weitere Objekte enthält.


Die Wahl der unnötig langen Bezeichner lässt vermuten, dass man die Häufigkeit solcher Konstruktionen in der Programmierpraxis unterschätzt hatte. Dieser Fehler wurde mit Java 5 korrigiert. Voraussetzung ist allerdings, dass die Klasse von "aCollection" das Interface "Iterable" implementiert, das wiederum verspricht, dass die Instanzen die Methode "Iterator iterator()" anbieten und damit einen Iterator zurückliefern, der dann von der "for"-Schleife zur Produktion der Elemente ausgenutzt werden kann. Es handelt sich bei dieser Version der "for"-Schleife also lediglich um "syntaktischen Zucker". Man beachte, dass dabei eine weitere Verquickung von Sprachdefinition und Klassenbibliothek (API; speziell des Interface "Iterator") stattgefunden hat, die nicht schön ist.

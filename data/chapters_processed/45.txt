45 Programmieren mit Interfaces

Oben hatten wir ja bereits erwähnt, dass eine Klasse neben den in ihrem Interface veröffentlichten noch weitere öffentliche (public deklarierte) Methoden haben kann. Daraus folgt, dass unterschiedliche Interfaces einer Klasse unterschiedliche Methodenmengen zur Verfügung stellen können. Da auf eine Variable, die mit einem Interfacetyp deklariert wurde, aber immer nur die Methoden aufgerufen werden dürfen, die der Interfacetyp veröffentlicht (sonst könnte aus der erfolgreichen Prüfung der Zuweisungskompatibilität eines Programms nicht abgeleitet werden, dass auch keine Laufzeitfehler der Art, dass eine Methode nicht vorhanden ist, auftreten können), können mit Hilfe von verschiedenen Interfaces verschiedene Sichten auf ein Objekt gewährt werden. So kann beispielsweise ein Ein- und Ausgabestrom als Klasse zwei Interfaces implementieren, von denen das eine nur die zum Lesen benötigten Methoden enthält und das andere nur die zum Schreiben:


Frage: Wozu können verschiedene Interfaces einer Klasse dienen?
Antwort: Unterschiedliche Interfaces einer Klasse können unterschiedliche Methodenmengen zur Verfügung stellen. Dadurch können mithilfe von verschiedenen Interfaces verschiedene Sichten auf ein Objekt gewährt werden. Zum Beispiel kann eine Klasse zwei Interfaces implementieren, von denen das eine nur die zum Lesen benötigten Methoden enthält und das andere nur die zum Schreiben.

Frage: Was ist der Zweck von Interfaces in der objektorientierten Programmierung?
Antwort: Interfaces in der objektorientierten Programmierung dienen dazu, unterschiedliche Sichten auf ein Objekt zu gewährleisten. Sie definieren eine Menge von Methoden, die ein Objekt zur Verfügung stellen muss. Durch die Verwendung von Interfaces können unterschiedliche Methodenmengen für eine Klasse definiert werden, was die Flexibilität und Wiederverwendbarkeit von Klassen erhöht.

Frage: Was sind die Vorteile von Interfaces?
Antwort: Interfaces ermöglichen es, unterschiedliche Sichten auf ein Objekt zu gewähren, indem sie unterschiedliche Methodenmengen zur Verfügung stellen. Dadurch können beispielsweise auf eine Variable, die mit einem Interfacetyp deklariert wurde, nur die Methoden aufgerufen werden, die der Interfacetyp veröffentlicht. Dies führt zu einer besseren Kapselung und erhöht die Sicherheit, da Laufzeitfehler vermieden werden können.


Verschiedene Klienten von Instanzen dieser Klasse könnten dann jeweils entweder nur lesend oder nur schreibend auf einen Ein-/Ausgabestrom zugreifen, und zwar abhängig davon, welches Interface die Variable, die auf den Strom verweist, zum Typ hat.


Frage: Was ist ein Klient einer Instanz?
Antwort: Ein Klient von Instanz einer Klasse kann auf die Methoden und Variablen der Klasse zugreifen.

Frage: Was ist der Zweck von Interfaces in der Programmierung?
Antwort: Interfaces definieren eine Schnittstelle für Klassen, die eine bestimmte Funktionalität bereitstellen. Sie legen fest, welche Methoden eine Klasse implementieren muss, um ein bestimmtes Interface zu unterstützen. Durch Interfaces können Klienten auf die Funktionalität einer Klasse zugreifen, ohne von der konkreten Implementierung abhängig zu sein. In dem oben genannten Kontext können verschiedene Klienten entweder nur lesend oder nur schreibend auf einen Ein-/Ausgabestrom zugreifen, abhängig davon, welches Interface die Variable, die auf den Strom verweist, zum Typ hat.

Frage: Was ist der Zweck von Interfaces in Java?
Antwort: Interfaces in Java definieren einen Vertrag, der festlegt, welche Methoden eine Klasse implementieren muss, um ein bestimmtes Verhalten zu bieten. Sie werden verwendet, um die Schnittstelle zwischen Klienten und Diensten zu definieren, und ermöglichen es, die Abhängigkeit von der Implementierung zu verringern. Durch die Verwendung von Interfaces können Klienten auf die Methoden zugreifen, ohne die tatsächliche Implementierung zu kennen.

Frage: Wie können Klienten auf die Methoden zugreifen, ohne die tatsächliche Implementierung zu kennen?
Antwort: Klienten können auf die Methoden zugreifen, ohne die tatsächliche Implementierung zu kennen, indem sie die Interfaces verwenden, die die Schnittstelle zwischen Klienten und Diensten definieren. Die Interfaces definieren den Vertrag, welche Methoden eine Klasse implementieren muss, um ein bestimmtes Verhalten zu bieten, und die Klienten können auf die Methoden zugreifen, indem sie die Interfaces als Typen verwenden.

Frage: Was ist der Vorteil von Interfaces in Java?
Antwort: Der Vorteil von Interfaces in Java ist, dass sie die Abhängigkeit von der Implementierung verringern, da Klienten auf die Methoden zugreifen können, ohne die tatsächliche Implementierung zu kennen. Dies ermöglicht es, die Klassen zu ändern, ohne die Klienten zu beeinflussen, und erleichtert die Wartung und Erweiterung des Codes.


Umgangen werden kann diese Zugriffsbeschränkung über Interfaces in Java immer dann, wenn die Klasse, von der das verwendete Objekt eine Instanz ist, ebenfalls als Typ zur Verfügung steht. Man kann in Variablendeklarationen dann genauso gut die Klasse als Typ verwenden. So könnte man sowohl in "WillNurLesen" die Variable "eingabe" als auch in "WillNurSchreiben" die Variable "ausgabe" mit dem Typ "IOStream" deklarieren, hätte damit jedoch keine syntaktische Unterstützung (Einschränkung des Funktionsumfangs) bei der Benutzung der Variable mehr. C-Sharp geht hier einen Schritt weiter und ermöglicht Klassendefinitionen zumindest, ihre Methoden ausschließlich über Interfacetypen zugänglich zu machen. Seit Java 8 kann man allerdings in Interfaces auch statische Methoden definieren, die neue Instanzen von Klassen, die die Interfaces implementieren, zurückliefern und somit die Konstruktoren dieser Klassen ersetzen. Man braucht dann keinerlei Zugriff mehr auf die Klassen, die deswegen als package local deklariert und die somit vollständig hinter dem Interface als Schnittstelle verborgen werden können.


Frage: Was ist der Unterschied zwischen der Verwendung von Interfaces und Klassen als Variablentypen in Java?
Antwort: Wenn die Klasse, von der das verwendete Objekt eine Instanz ist, als Typ zur Verfügung steht, kann man in Java in Variablendeklarationen genauso gut die Klasse als Typ verwenden. Dann hat man jedoch keine syntaktische Unterstützung (Einschränkung des Funktionsumfangs) bei der Benutzung der Variable mehr. Seit Java 8 können in Interfaces auch statische Methoden definiert werden, die neue Instanzen von Klassen, die die Interfaces implementieren, zurückliefern und somit die Konstruktoren dieser Klassen ersetzen. Man braucht dann keinerlei Zugriff mehr auf die Klassen, die somit vollständig hinter dem Interface als Schnittstelle verborgen werden können.

Frage: Was ist der Unterschied zwischen der Verwendung von Interfaces und Klassen als Typ in Java?
Antwort: In Java können Variablendeklarationen entweder mit der Klasse oder mit dem Interface als Typ erfolgen. Wenn man die Klasse als Typ verwendet, hat man syntaktische Unterstützung bei der Benutzung der Variable, aber keine Zugriffsbeschränkung. Wenn man das Interface als Typ verwendet, hat man eine Zugriffsbeschränkung, aber keine syntaktische Unterstützung. Seit Java 8 können in Interfaces auch statische Methoden definiert werden, die neue Instanzen von Klassen, die das Interface implementieren, zurückliefern. Dadurch können die Konstruktoren der Klassen ersetzt und die Klassen hinter dem Interface als Schnittstelle verborgen werden.

Frage: Was ermöglichen Interfaces in Java und C-Sharp?
Antwort: Interfaces in Java ermöglichen es, die Variablen mit dem Typ der Klasse zu deklarieren, die die Instanz des Objekts bereitstellt, und somit die syntaktische Unterstützung (Einschränkung des Funktionsumfangs) bei der Benutzung der Variablen zu behalten. C-Sharp geht noch weiter und ermöglicht es, Klassendefinitionen ihre Methoden ausschließlich über Interfacetypen zugänglich zu machen und somit die Konstruktoren der Klassen zu ersetzen. Seit Java 8 können in Interfaces auch statische Methoden definiert werden, die neue Instanzen von Klassen, die die Interfaces implementieren, zurückliefern und somit die Konstruktoren dieser Klassen ersetzen.


Interfaces dienen aber nicht nur der Beschränkung des Zugriffs wie im obigen Beispiel — sie dienen auch der besseren Austauschbarkeit von Klassen. Dadurch, dass die Variable "liste" mit dem Typ "List" (ein Interface) und nicht "ArrayList" (eine Klasse) deklariert wurde, können ihr auch Instanzen anderer Klassen als "ArrayList" zugewiesen werden, solange sie nur dasselbe Interface implementieren. Das Interface als Typ der Variable verlangt lediglich, dass alle in ihm versammelten Methoden von den Objekten, auf die die Variable per Typsystem verweisen darf, auch angeboten werden, und das wird dadurch sichergestellt, dass der Typ der rechten Seite aller Zuweisungen zur Variablen konform zum Typ der linken Seite sein muss. Die Zuweisungskompatibilität ist in Java also an die Typkonformität gebunden, und zwar an die nominale.


Frage: Wozu dienen Interfaces in Java?
Antwort: Interfaces in Java dienen der Beschränkung des Zugriffs und der besseren Austauschbarkeit von Klassen. Durch die Verwendung von Interfaces als Typen von Variablen können Objekte verschiedener Klassen zugewiesen werden, solange sie dasselbe Interface implementieren.


Eine weitere, vergleichsweise häufig verwendete Möglichkeit des Einsatzes von Interfaces ist die als sog. Tagging oder Marker interfaces. Ein Tagging oder Marker Interface hat in der Regel keine eigenen Methodendeklarationen, sondern dient lediglich der Filterung von Variablenwerten. "Serializable" wäre ein solches Interface. Da in Java die vom Compiler statisch geprüfte Zuweisungskompatibilität ja Namenskonformität verlangt, kann die Typisierung einer Variable mit dem Interface "Markiert" erzwingen, dass dieser Variable nur Instanzen solcher Klassen zugewiesen werden, die das Interface "Markiert" zu implementieren deklarieren. Da das Interface aber keine Auflagen macht (keine Methodendeklarationen vorgibt, die von der Klasse mit Definitionen versehen werden müssen), ist die Implementierung des Interfaces für die Klasse zunächst ohne Konsequenzen. Die durch das Interface erfolgte Markierung der Klassen (bzw. deren Instanzen) kann jedoch zur Übersetzungszeit vom Compiler (s. o.) und zur Laufzeit durch einen Typtest (s. Abschnitt 44.2) überprüft werden. Ein konkretes Beispiel für ein Marker-Interface in Java ist das Interface "Serializable", mit dessen Implementierung eine Klasse deklariert, dass ihre Instanzen serialisiert werden können. Die Serialisierung wird aber nicht von der Klasse selbst vorgenommen, sondern von einer anderen; die Klasse muss also zu ihrer Serialisierung nichts weiter beitragen. Seit Java 5 würde man allerdings solche Marker-Interfaces eher durch Metadaten (auch Annotationen genannt; s. Abschnitt 47.4) ersetzen, so wie das in C-Sharp schon länger gehandhabt wird. Interfaces erhöhen die Komplexität des Codes und können durch Metadaten ersetzt werden, die nur Informationen enthalten, aber keine Methoden deklarieren.


Frage: Was sind Tagging oder Marker Interfaces in Java?
Antwort: Tagging oder Marker Interfaces in Java haben keine eigenen Methodendeklarationen, sondern dienen lediglich der Filterung von Variablenwerten. Sie können erzwingen, dass einer Variablen nur Instanzen solcher Klassen zugewiesen werden, die das Interface zu implementieren deklarieren. Die Implementierung des Interfaces für die Klasse ist zunächst ohne Konsequenzen, kann aber zur Übersetzungszeit vom Compiler und zur Laufzeit durch einen Typtest überprüft werden.


Javas Interface-als-Typ-Konzept ist ziemlich interessant und vielleicht sogar der größte einzelne Beitrag Javas zur objektorientierten Programmierung. In der Programmierpraxis scheint es jedoch, sieht man einmal von großen Frameworks ab, nur langsam anzukommen. Das mag zum einen an der schlechten Verkaufsstrategie liegen („Ersatz für Mehrfachvererbung“ — jede Anfängerin merkt nach fünf Minuten, dass das nicht stimmt), zum anderen aber auch an der Vergrößerung des Programmumfangs, die der parallelen Definition von Klassen und Interfaces geschuldet ist (die auch den Wartungsaufwand erhöhen kann, obwohl ja Interfaces eigentlich die Wartung vereinfachen sollen). Für so manche Programmiererin scheinen die Möglichkeiten, die Schnittstelle einer Klasse mittels der Zugriffsmodifikatoren innerhalb der Klasse selbst zu definieren, völlig auszureichen. Der Preis dafür ist eine mangelnde Differenzierbarkeit des Zugriffs nach verschiedenen Klienten sowie eine (häufig vorschnelle) Festlegung von Variablen auf Instanzen einer Klasse.


Frage: Was ist das Interface-als-Typ-Konzept in Java?
Antwort: Javas Interface-als-Typ-Konzept ist ein Mechanismus, bei dem Interfaces als Typen verwendet werden können. Dies ermöglicht es, eine Schnittstelle einer Klasse unabhängig von ihrer Implementierung zu definieren und verschiedene Klassen können diese Schnittstelle implementieren. Das Interface-als-Typ-Konzept ist ein wichtiger Beitrag von Java zur objektorientierten Programmierung, wird aber in der Praxis nur langsam angenommen.

Frage: Warum wird das Interface-als-Typ-Konzept in Java nur langsam angenommen?
Antwort: Javas Interface-als-Typ-Konzept wird nur langsam angenommen, weil die Verkaufsstrategie schlecht ist und es den Programmumfang erhöht, was auch den Wartungsaufwand erhöhen kann. Einige Programmiererinnen scheinen die Möglichkeiten, die Schnittstelle einer Klasse mittels der Zugriffsmodifikatoren innerhalb der Klasse selbst zu definieren, auszureichen. Der Preis dafür ist eine mangelnde Differenzierbarkeit des Zugriffs nach verschiedenen Klienten sowie eine (häufig vorschnelle) Festlegung von Variablen auf Instanzen einer Klasse.

67 Ausgewogene Verteilung

Ein weiteres Kennzeichen der objektorientierten Programmierung ist, dass Klassen nicht ins Uferlose wachsen sollten. Wenn der Methodenumfang einer Klasse immer weiter ansteigt, wird die erfahrene objektorientierte Programmiererin bald den Verdacht schöpfen, dass es sich bei der Klasse in Wirklichkeit nicht um eine, sondern um mehrere handelt. Dafür gibt es zwei Erklärungen: Die Klasse steht nicht nur für eine Abstraktion der Anwendungsdomäne, sondern für mehrere. In diesem Fall sollte die Aufteilung der Klasse in mehrere Teilklassen – eine für jede Abstraktion – leicht fallen: Sie ordnen zunächst die Daten den Abstraktionen (Allgemeinbegriffen) zu und lassen dann die Methoden den Daten folgen. Die Klasse steht zwar für eine Abstraktion der Anwendungsdomäne, aber dies auf einem höheren Abstraktionsniveau als das der Implementierung, die Sie gerade betrachten. Dafür gibt es wiederum mindestens zwei mögliche Erklärungen: a. Die Abstraktion ist eine Generalisierung, und Sie haben alle ihre Spezialisierungen in einer Klasse zusammengefasst. In diesem Fall müssen Sie lediglich die unterschiedlichen Spezialisierungen identifizieren und die jeweils darauf bezogenen (dafür charakteristischen) Daten und Funktionen in neu zu schaffende Subklassen verlagern. Lediglich das allen Fällen gemeinsame Protokoll verbleibt dann in der (idealerweise abstrakten) neuen Superklasse. Ein guter Indikator für diesen Fall ist das wiederholte Vorkommen gleicher Fallunterscheidungen, insbesondere dann, wenn diese Fallunterscheidungen die Art der Objekte betreffen (vgl. dazu auch das sog. "Replace-conditional-with-polymorphism-Refactoring"). b. Die Abstraktion ist eine Aggregation (oder Komposition), also eine Zusammensetzung eines Ganzen aus mehreren Teilen. In diesem Fall müssen Sie die Teile als logische Einheiten identifizieren und dafür neue Klassen formulieren. Falls diese neuen Klassen außerhalb der Abstraktion keine Bedeutung haben, können Sie in Erwägung ziehen, sie als innere Klassen zu deklarieren (sofern Ihre Programmiersprache dies erlaubt), um den Namensraum nicht unnötig zu überfrachten und die von anderen wahrgenommene Anzahl der Klassen nicht unnötig zu erhöhen.


Frage: Was ist ein Indikator dafür, dass eine Klasse in mehrere Subklassen aufgeteilt werden sollte?
Antwort: Ein guter Indikator dafür ist das wiederholte Vorkommen gleicher Fallunterscheidungen, insbesondere dann, wenn diese Fallunterscheidungen die Art der Objekte betreffen.

Frage: Was ist ein Indikator dafür, dass eine Klasse nicht nur für eine Abstraktion der Anwendungsdomäne steht, sondern für mehrere?
Antwort: Ein guter Indikator dafür ist das wiederholte Vorkommen gleicher Fallunterscheidungen, insbesondere dann, wenn diese Fallunterscheidungen die Art der Objekte betreffen.

Frage: Was ist ein Indikator dafür, dass eine Klasse in mehrere Spezialisierungen aufgeteilt werden sollte?
Antwort: Ein guter Indikator dafür ist das wiederholte Vorkommen gleicher Fallunterscheidungen, insbesondere dann, wenn diese Fallunterscheidungen die Art der Objekte betreffen.

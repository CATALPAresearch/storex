68.2 Automatische Überprüfung

Man kann sich fragen, ob sich die Einhaltung des Law of Demeter so wie die Einhaltung der Zugreifbarkeitsregeln automatisch überprüfen lässt. Dabei gibt es aber ein Problem: Das Gesetz ist nämlich oben in Termini von Objekten, nicht von Variablen oder Typen formuliert. Eine Überprüfung würde also die Auswertung von konkreten Zuweisungen und damit des dynamischen Programmflusses erfordern, die aber mechanisch extrem aufwendig bis gar nicht durchzuführen ist. Statt dessen prüfen automatische Checker des Law of Demeter zumeist lediglich die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters (wenn der Aufruf aus einer Methode heraus erfolgt, was meistens der Fall ist) haben. Daraus folgt, dass eine solche Prüfung in SMALLTALK nicht möglich ist (da Ausdrücke nicht typisiert sind).


Frage: Kann die Einhaltung des Law of Demeter automatisch überprüft werden?
Antwort: Die Einhaltung des Law of Demeter kann nicht automatisch überprüft werden, da das Gesetz in Termini von Objekten und nicht von Variablen oder Typen formuliert ist. Automatische Checker prüfen zumeist nur die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters haben. In SMALLTALK ist eine solche Prüfung nicht möglich, da Ausdrücke nicht typisiert sind.

Frage: Warum ist es in SMALLTALK nicht möglich, das Law of Demeter automatisch zu überprüfen?
Antwort: Das Law of Demeter kann in SMALLTALK nicht automatisch überprüft werden, da Ausdrücke nicht typisiert sind und die Prüfung daher nicht auf Variablendeklarationen und Methodenaufrufe beschränkt werden kann. Stattdessen würde eine Überprüfung die Auswertung von konkreten Zuweisungen und damit des dynamischen Programmflusses erfordern, was mechanisch extrem aufwendig bis gar nicht durchführbar ist.


Was aber tun, wenn man gleichzeitig die Funktion von Ausdrücken haben will und Demeters Gesetz folgen möchte? Die Antwort ist einfach: Man erweitert das Protokoll der Klasse des ersten Nachrichtenempfängers um die Methode(n), die man nicht verkettet aufrufen darf, also beispielsweise die Klasse des von "a" benannten Objekts um die Methode "doY". Da "a" das Ergebnis von "doX" ist, nennen wir es "b", muss "a" auch die Methode "doY" aufrufen und das Ergebnis zurückgeben. Die Implementierung von "doY" würde dann durch "^ b doY" abgeschlossen.


Frage: Wie kann man Demeters Gesetz folgen und gleichzeitig die Funktion von Ausdrücken haben?
Antwort: Man erweitert das Protokoll der Klasse des ersten Nachrichtenempfängers um die Methode(n), die man nicht verkettet aufrufen darf, und lässt das Ergebnis von "doX" die Methode "doY" aufrufen und das Ergebnis zurückgeben.


Komplizierter wird die Sache jedoch, wenn die Verkettung länger ist, wenn also der zu vermeidende Ausdruck "a doX doY doZ" heißen würde, denn dann müsste auch noch "doZ" zur Klasse von "a" hinzugefügt und mit entsprechenden Implementierungen versehen werden. Man ahnt schon, wohin das führt: zu einem Wachstum des Protokolls von "a".


Frage: Was passiert, wenn die Verkettung von Nachrichtenausdrücken länger wird?
Antwort: Wenn die Verkettung von Nachrichtenausdrücken länger wird, wird das Protokoll der Klasse von "a" komplexer und muss mit entsprechenden Implementierungen versehen werden.

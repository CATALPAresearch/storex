29 Generische Typen oder parametrischer Polymorphismus

Typen beschränken die Wertebereiche von Variablen und Methoden. Inklusionspolymorphie lockert diese Beschränkung insofern, als dadurch Wertebereiche von Typen um die von Subtypen erweitert werden können, selbst wenn diese Subtypen zum Zeitpunkt der Typdefinition noch gar nicht bekannt waren. Nun ist Inklusionspolymorphie nicht die einzige Möglichkeit, den Wertebereich eines Typs variabel zu halten, ohne die statische Typprüfung aufgeben zu müssen. Eine andere ist, einen Typ mit einem oder mehreren anderen zu parametrisieren.


Frage: Was ist Parametrisierung von Typen?
Antwort: Parametrisierung von Typen ist eine Möglichkeit, den Wertebereich eines Typs variabel zu halten, ohne die statische Typprüfung aufgeben zu müssen. Dabei wird der Typ mit einem oder mehreren anderen Typen parametrisiert.


Eine parametrische Typdefinition unterscheidet sich von einer normalen dadurch, dass in der Typdefinition verwendete, andere Typen nicht genannt (referenziert) werden müssen, sondern durch Platzhalter, die Typparameter, vertreten werden können. Diese Platzhalter sind Variablen, deren Wert implizit (also ohne entsprechende Deklaration) auf Typen beschränkt ist; man nennt sie auch Typvariablen. Diese Typvariablen werden erst bei der Verwendung eines parametrisierten Typs in der Deklaration eines anderen Programmelements mit einem Wert, also einem Typ, belegt. Man spricht bei dieser Wertzuweisung an eine Typvariable von einer Instanziierung des parametrischen Typs; erst bei ihr entsteht ein konkreter Wertebereich, der dann dem deklarierten Programmelement zugeordnet wird. Insbesondere hat ein parametrischer Typ, bei dem Typvariablen nicht belegt sind, keinen konkreten Wertebereich. Dieser Umstand ist bei der Betrachtung von Zuweisungskompatibilität unter parametrischem Polymorphismus wichtig.


Frage: Was ist eine parametrische Typdefinition?
Antwort: Eine parametrische Typdefinition ist eine Art von Typdefinition, die Platzhalter für andere Typen verwendet, die durch Typparameter, auch Typvariablen genannt, vertreten werden. Diese Typvariablen werden erst bei der Verwendung eines parametrisierten Typs in der Deklaration eines anderen Programmelements mit einem Wert, also einem Typ, belegt.

Frage: Was ist der Unterschied zwischen einer parametrischen Typdefinition und einer normalen Typdefinition?
Antwort: Eine parametrische Typdefinition unterscheidet sich von einer normalen dadurch, dass in der Typdefinition verwendete, andere Typen durch Platzhalter, die Typparameter, vertreten werden können. Diese Platzhalter sind Variablen, deren Wert implizit auf Typen beschränkt ist. Diese Typvariablen werden erst bei der Verwendung eines parametrisierten Typs in der Deklaration eines anderen Programmelements mit einem Wert, also einem Typ, belegt.


Die Idee des parametrischen Polymorphismus ist, aus einer Typdefinition durch Parametrisierung viele zu machen. Eine parametrische Typdefinition steht also nicht für einen Typ, sondern für (theoretisch) beliebig viele — sie erlaubt es gewissermaßen, Unterschiede zur Typen nach Bedarf zu generieren. Wohl deswegen bezeichnet man parametrische Typen (Typdefinitionen) auch als generische Typen (Typdefinitionen) oder kurz als Generics. Wie eben schon erwähnt, wird der Wertebereich bei einer solchen Typgeneration jeweils mitgeneriert.


Frage: Was ist parametrischer Polymorphismus?
Antwort: Parametrischer Polymorphismus ist ein Konzept, bei dem aus einer Typdefinition durch Parametrisierung viele verschiedene Typen erzeugt werden können. Diese parametrische Typdefinition wird auch als generische Typdefinition oder kurz als Generics bezeichnet. Der Wertebereich wird bei der Typgeneration mitgeneriert.


Es erfolgt also die Zuweisung eines Typs zu einer Typvariable bei der Verwendung eines parametrisch definierten Typs in einer Deklaration, beispielsweise der Deklaration einer Variable oder des Rückgabewerts einer Methode. Oberflächlich betrachtet entspricht diese Verwendung in etwa dem Aufruf einer (ja auch an einer anderen Stelle definierten) Methode oder besser (und schon aufgrund der Verwendung des Begriffs Instanziierung) eines Konstruktors; deswegen nennt man die Typvariablen, die in parametrischen Typdefinitionen vorkommen, auch formale Typparameter und die konkreten Typen, die bei der Verwendung des Typen in Deklarationen in die formalen Parameter eingesetzt werden, auch tatsächliche Typparameter. Trotz dieser Analogie zu Methoden- bzw. Konstruktoraufrufen muss man sich immer vor Augen halten, dass die Verwendung eines parametrisch definierten Typs bereits zur Übersetzungszeit zu einer Zuweisung an die Typvariablen führt, man es also keineswegs mit etwas Dynamischem zu tun hat. Insbesondere müssen Typen keine Objekte sein, um Typvariablen zugewiesen werden zu können.


Frage: Was sind formale Typparameter und tatsächliche Typparameter?
Antwort: Formale Typparameter sind die Typvariablen, die in parametrischen Typdefinitionen vorkommen. Tatsächliche Typparameter sind die konkreten Typen, die bei der Verwendung des Typs in Deklarationen in die formalen Parameter eingesetzt werden.

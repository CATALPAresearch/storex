39.3 Die Module von Java 9

Als Java entworfen wurde, ging man wohl davon aus, dass ein Programm aus mehreren Klassen besteht, die alle zu einem Paket zusammengefasst werden können. Die Klassen eines Programms gewähren sich somit untereinander privilegierten Zugriff (alles, was nicht privat deklariert ist, ist zugreifbar), nach außen sind jedoch nur öffentlich deklarierte Programmelemente sichtbar.


Frage: Wie ist der Zugriff auf Klassen in Java geregelt?
Antwort: In Java gewähren Klassen sich untereinander privilegierten Zugriff, während nach außen nur öffentlich deklarierte Programmelemente sichtbar sind.

Frage: Wie ist der Zugriff auf Programmelemente in Java geregelt?
Antwort: In Java ist der Zugriff auf Programmelemente so geregelt, dass Klassen eines Programms untereinander privilegierten Zugriff haben, während nach außen nur öffentlich deklarierte Programmelemente sichtbar sind.

Frage: Was ist der Zugriffsschutz in Java?
Antwort: In Java wird der Zugriffsschutz durch die Zugriffskontrollmodifikatoren private, protected und public realisiert. Diese Modifikatoren bestimmen, welche Klassen auf die Elemente einer anderen Klasse zugreifen können. Standardmäßig ist alles, was nicht explizit als privat, geschützt oder öffentlich deklariert ist, in Java package-private, d.h. nur innerhalb des Pakets sichtbar.

Frage: Wie wird der Zugriffsschutz in Java realisiert?
Antwort: Der Zugriffsschutz in Java wird durch die Zugriffskontrollmodifikatoren private, protected und public realisiert. Diese Modifikatoren bestimmen, welche Klassen auf die Elemente einer anderen Klasse zugreifen können. Standardmäßig ist alles, was nicht explizit als privat, geschützt oder öffentlich deklariert ist, in Java package-private, d.h. nur innerhalb des Pakets sichtbar.

Frage: Was ist der privilegierte Zugriff in Java?
Antwort: In Java wird der privilegierte Zugriff durch die Zugriffskontrollmodifikatoren private, protected und public realisiert. Diese Modifikatoren bestimmen, welche Klassen auf die Elemente einer anderen Klasse zugreifen können. Klassen, die sich im selben Paket befinden, können auf package-private Elemente zugreifen, und Klassen, die eine Klasse erweitern, können auf protected Elemente zugreifen. Somit gewähren sich die Klassen eines Programms untereinander privilegierten Zugriff.

Frage: Wie wird der Zugriff auf die Elemente einer anderen Klasse in Java geregelt?
Antwort: Der Zugriff auf die Elemente einer anderen Klasse in Java wird durch die Zugriffskontrollmodifikatoren private, protected und public geregelt. Diese Modifikatoren bestimmen, welche Klassen auf die


Dieser Ansatz funktioniert jedoch in dem Moment nicht mehr, in dem Programme auf mehrere Pakete aufgeteilt werden. Wenn zwischen den Paketen nämlich Abhängigkeiten bestehen (was, wenn die Pakete zusammen ein Programm repräsentieren, naturgemäß der Fall ist), dann sind hierfür öffentliche Deklarationen erforderlich, die die so deklarierten Programmelemente jedoch für alle gleichermaßen sichtbar machen. Ein Programm kann also keine andere (eingeschränktere) öffentliche Schnittstelle haben als die Summe seiner Pakete.


Frage: Was passiert, wenn Programme auf mehrere Pakete aufgeteilt werden?
Antwort: Wenn Programme auf mehrere Pakete aufgeteilt werden und zwischen den Paketen Abhängigkeiten bestehen, sind hierfür öffentliche Deklarationen erforderlich, die die so deklarierten Programmelemente jedoch für alle gleichermaßen sichtbar machen. Ein Programm kann also keine andere (eingeschränktere) öffentliche Schnittstelle haben als die Summe seiner Pakete.

Frage: Warum führen Abhängigkeiten zwischen Paketen zu öffentlichen Deklarationen?
Antwort: Wenn zwischen Paketen Abhängigkeiten bestehen, sind hierfür öffentliche Deklarationen erforderlich, die die so deklarierten Programmelemente für alle gleichermaßen sichtbar machen.

Frage: Was ist der Unterschied zwischen Paketen und Modulen?
Antwort: Der Unterschied zwischen Paketen und Modulen besteht darin, dass Module neben einer öffentlichen Schnittstelle auch eine private Schnittstelle haben, die für andere Module nicht sichtbar ist, wodurch die Kapselung von Details gewährleistet wird.

Frage: Was ist die private Schnittstelle eines Moduls?
Antwort: Die private Schnittstelle eines Moduls besteht aus allen Deklarationen, die nicht Teil der öffentlichen Schnittstelle sind.

Frage: Was ist die öffentliche Schnittstelle eines Moduls?
Antwort: Die öffentliche Schnittstelle eines Moduls besteht aus allen Deklarationen, die mit einem Schlüsselwort als öffentlich gekennzeichnet sind.


Diese unbefriedigende Situation wurde von der Java-Community aufgegriffen, die mit der Open Services Gateway Initiative (OSGi) einen Standard etablierte, der die Zusammenfassung von Java-Paketen zu Modulen mit einer eigenen Schnittstellenspezifikation erlaubte. Dieser Standard ist unter anderem die Grundlage von Eclipse, das nicht nur eine Java-IDE, sondern im Kern ein Framework für die Entwicklung beliebig komplexer Java-Programme (sog. Rich Clients) ist.


Frage: Was ist die Open Services Gateway Initiative (OSGi)?
Antwort: Die Open Services Gateway Initiative (OSGi) ist ein Standard, der die Zusammenfassung von Java-Paketen zu Modulen mit einer eigenen Schnittstellenspezifikation erlaubt. Dieser Standard ist unter anderem die Grundlage von Eclipse, das nicht nur eine Java-IDE, sondern im Kern ein Framework für die Entwicklung beliebig komplexer Java-Programme (sog. Rich Clients) ist.


Mit Java 9 wurde dann Java ein eigenes, über Klassen und Paketen stehendes Modulkonzept verpasst. Ein Modul ist demnach eine Menge von Paketen, die über eine Moduldeklaration eine gemeinsame Schnittstelle spezifiziert. Eine Moduldeklaration besteht aus einem (eindeutigen) Namen des Moduls, einer Deklaration der angebotenen Schnittstelle (bislang über öffentliche Deklarationen hergestellt) und einer Deklaration der benötigten Schnittstelle (bislang ausschließlich über import-Direktiven deklariert). Neben den allgemeinen Export tritt der sog. qualifizierte Export, wie er auch in EIFFEL vorgesehen ist: Er nennt die Module, an die exportiert wird, namentlich und erlaubt so einen „privaten“ Austausch zwischen bestimmten Modulen (die somit ihre eigenen, oder privaten, Schnittstellen haben).


Frage: Was ist ein Modul in Java?
Antwort: Ein Modul in Java 9 ist eine Menge von Paketen, die über eine Moduldeklaration eine gemeinsame Schnittstelle spezifiziert. Eine Moduldeklaration besteht aus einem (eindeutigen) Namen des Moduls, einer Deklaration der angebotenen Schnittstelle und einer Deklaration der benötigten Schnittstelle. Neben den allgemeinen Export tritt der sog. qualifizierte Export, der den Austausch zwischen bestimmten Modulen erlaubt.


Das Besondere an der Moduldefinition von Java ist, dass die Einhaltung der damit einhergehenden Schnittstellenspezifikationen sowohl zur Übersetzungszeit als auch zur Laufzeit erzwungen wird. Außerdem kontrolliert sie auch den reflektiven Zugriff auf Programmelemente, der bislang gar nicht unterbunden werden konnte. Java-Programme werden dadurch erheblich sicherer.


Frage: Was wird durch die Moduldefinition in Java erzwungen?
Antwort: Die Einhaltung der Schnittstellenspezifikationen wird sowohl zur Übersetzungszeit als auch zur Laufzeit erzwungen. Zudem wird der reflektive Zugriff auf Programmelemente kontrolliert, was die Sicherheit von Java-Programmen erhöht.

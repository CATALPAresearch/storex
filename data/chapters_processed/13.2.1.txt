13.2.1 Dictionaries

Dictionaries repräsentieren sogenannte qualifizierte Beziehungen, bei denen jedes Element der Beziehung durch einen Qualifizierer eindeutig bestimmt wird. Der Qualifizierer heißt auch Schlüssel (engl. key; vergleichbar mit dem Primärschlüssel relationaler Datenbanken), das qualifizierte Element der Beziehung nennt man auch Wert (engl. value). Ein Element einer qualifizierten Beziehung besteht also gewissermaßen aus einer Assoziation eines Schlüssels mit einem Wert. Der Clou an der Implementierung von Dictionaries ist, dass man Werte unter ihren Schlüsseln extrem schnell (im Idealfall ohne jede Suche) auffinden kann. Das wird heute fast immer über sogenanntes Hashing erreicht.


Frage: Was sind Dictionaries und wie werden Werte darin aufgefunden?
Antwort: Dictionaries sind eine Art qualifizierter Beziehung, bei der jedes Element durch einen Qualifizierer, auch Schlüssel genannt, eindeutig bestimmt wird. Der Wert ist das qualifizierte Element der Beziehung. In der Implementierung von Dictionaries werden Werte unter ihren Schlüsseln extrem schnell gefunden, was heute meist über Hashing erreicht wird.

Frage: Was ist der Unterschied zwischen Schlüssel und Wert in einem Dictionary?
Antwort: Der Schlüssel (key) ist ein eindeutiger Bezeichner für ein Element in einem Dictionary, während der Wert (value) das Element selbst ist, das unter diesem Schlüssel gespeichert ist.


Die Klasse Dictionary hat für die Programmierung besondere Bedeutung: Sie realisiert sogenannte Assoziativspeicher, also Speicher, bei dem auf eine Speicherzelle nicht durch Angabe einer Speicheradresse, sondern durch Assoziation mit dem Inhalt zugegriffen wird. Sie wird im SMALLTALK-System selbst häufig verwendet. So werden beispielsweise Methoden in Dictionaries hinterlegt (wobei der Nachrichtenselektor die Rolle des Schlüssels spielt und als Wertobjekt die kompilierte Methode gespeichert ist). Aber auch andere Arten von Collections lassen sich mit Hilfe von Dictionaries sehr einfach realisieren.


Frage: Was ist die Klasse Dictionary in SMALLTALK?
Antwort: Die Klasse Dictionary in SMALLTALK realisiert sogenannte Assoziativspeicher, bei denen auf eine Speicherzelle nicht durch Angabe einer Speicheradresse, sondern durch Assoziation mit dem Inhalt zugegriffen wird. Sie wird im SMALLTALK-System selbst häufig verwendet, zum Beispiel für das Hinterlegen von Methoden in Dictionaries.


Dabei wird einfach die Anzahl der Vorkommen eines Elements (repräsentiert durch den formalen Parameter anObject) der Bag, solange diese nicht Null ist, in einem Dictionary unter dem Element als Schlüssel gespeichert.


Frage: Was wird in einem Dictionary unter dem Element als Schlüssel gespeichert?
Antwort: In dem Dictionary wird die Anzahl der Vorkommen eines Elements (repräsentiert durch den formalen Parameter anObject) der Bag gespeichert.

Frage: Was wird in einem Dictionary während der Ausführung einer Methode gespeichert?
Antwort: In einem Dictionary wird während der Ausführung einer Methode die Anzahl der Vorkommen eines Elements (repräsentiert durch den formalen Parameter anObject) der Bag, solange diese nicht Null ist, in einem Dictionary unter dem Element als Schlüssel gespeichert.

Frage: Wie wird die Anzahl der Vorkommen eines Elements in einem Bag in Smalltalk gezählt?
Antwort: In Smalltalk wird die Anzahl der Vorkommen eines Elements in einem Bag gezählt, indem ein Dictionary verwendet wird, in dem das Element als Schlüssel und die Anzahl seiner Vorkommen als Wert gespeichert wird. Die Anzahl der Vorkommen wird solange inkrementiert, bis das Element nicht mehr in der Bag vorhanden ist.


Man beachte hierbei, dass Bag die Klasse Dictionary nutzt, ohne von ihr zu erben. Stattdessen hält sich jede Instanz von Bag eine Instanz von Dictionary als Sklavin, die für sie den Dienst verrichtet. Man spricht hier auch von einer Delegation; da die Delegation in den prototypenbasierten objektorientierten Programmiersprachen tatsächlich die Funktion der Vererbung übernimmt und zudem dynamisch (also nachdem eine Instanz erzeugt wurde) eingerichtet werden kann und da sie zudem von Fragen der Generalisierung/Spezialisierung völlig befreit ist, erfreut sie sich in der objektorientierten Programmierung großer Beliebtheit.


Frage: Was ist Delegation in der objektorientierten Programmierung?
Antwort: Delegation ist eine Technik in der objektorientierten Programmierung, bei der eine Instanz eine andere Instanz als Sklavin hält, die für sie den Dienst verrichtet. Sie wird oft genutzt, um die Funktion der Vererbung zu übernehmen, da sie dynamisch eingerichtet werden kann und nicht an Fragen der Generalisierung/Spezialisierung gebunden ist.
ng, bei der eine Instanz eine andere Instanz als Sklavin hält, die für sie einen Dienst verrichtet. Im Gegensatz zur Vererbung kann die Delegation dynamisch eingerichtet werden und ist nicht an Fragen der Generalisierung/Spezialisierung gebunden.

Frage: Was ist Delegation und wie wird sie in prototypenbasierten objektorientierten Programmiersprachen genutzt?
Antwort: Delegation ist eine Beziehung zwischen zwei Objekten, bei der ein Objekt (Delegierter) die Verantwortung für die Bearbeitung bestimmter Anfragen an ein anderes Objekt (Delegator) überträgt. In prototypenbasierten objektorientierten Programmiersprachen wird Delegation genutzt, um die Funktion der Vererbung zu übernehmen. Sie kann dynamisch eingerichtet werden und ist von Fragen der Generalisierung/Spezialisierung befreit, was sie zu einer beliebten Alternative zur Vererbung macht.


Je länger Sie in SMALLTALK programmieren, desto häufiger werden Sie feststellen, dass Sie durch Verwendung eines Dictionaries Ihren Code deutlich vereinfachen können. Tatsächlich erlauben es Dictionaries (bzw. der von ihnen realisierte Assoziativspeicher), Assoziationsketten, die Grundlage vieler menschlicher Denkprozesse sind, direkt in einem Programm nachzubilden. Fragen Sie sich also, wann immer Sie es mit einer Menge von Objekten zu tun haben, wie Sie auf die Elemente der Menge zugreifen wollen; wenn dies über einen Schlüssel erfolgt, dann ist Dictionary die Klasse Ihrer Wahl.


Frage: Wofür können Dictionaries in SMALLTALK verwendet werden?
Antwort: Dictionaries können in SMALLTALK verwendet werden, um Assoziationsketten direkt in einem Programm nachzubilden. Sie erlauben es, auf die Elemente einer Menge über einen Schlüssel zuzugreifen.

Frage: Was ist der Zweck von Dictionaries in SMALLTALK?
Antwort: Dictionaries in SMALLTALK werden verwendet, um Assoziationsketten zu simulieren und den Zugriff auf Elemente einer Menge über einen Schlüssel zu ermöglichen. Sie erleichtern das Programmieren, indem sie die Verwendung von Assoziativspeicher ermöglichen, der die Grundlage vieler menschlicher Denkprozesse ist.


Es darf übrigens der Schlüssel eines in einem Dictionary gespeicherten Objekts ruhig ein Attribut (der Inhalt einer Instanzvariable) des Objekts sein; dies kommt sogar recht häufig vor. Beispielsweise wird man Personen in einem Dictionary unter ihrem Nachnamen oder einer Ausweisnummer speichern. Allerdings sollte dieses Attribut dann unveränderlich sein, da das Objekt nach einer Änderung des Attributs immer noch unter dem alten Attributwert als Schlüssel gespeichert ist und nur unter diesem wiedergefunden wird.


Frage: Sollte das Attribut, das als Schlüssel verwendet wird, unveränderlich sein?
Antwort: Ja, das Attribut, das als Schlüssel verwendet wird, sollte unveränderlich sein, da das Objekt nach einer Änderung des Attributs immer noch unter dem alten Attributwert als Schlüssel gespeichert ist und nur unter diesem wiedergefunden wird.

Frage: Warum sollte das Attribut, das als Schlüssel in einem Dictionary verwendet wird, unveränderlich sein?
Antwort: Das Attribut, das als Schlüssel in einem Dictionary verwendet wird, sollte unveränderlich sein, da das Objekt nach einer Änderung des Attributs immer noch unter dem alten Attributwert als Schlüssel gespeichert ist und nur unter diesem wiedergefunden wird. Wenn das Attribut veränderlich ist, kann es zu Problemen bei der Suche nach dem Objekt im Dictionary führen, da der alte Attributwert nicht mehr gültig ist.

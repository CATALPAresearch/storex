52.5 Das Typsystem von EIFFEL

EIFFEL besitzt ein einheitliches Typsystem (keine separaten Referenz- und Werttypen) und unterscheidet auch nicht (wie Java) zwischen eingebauten Operatoren und von Programmiererinnen definierten Methoden: Die Operation + auf Integern beispielsweise ist (wie in SMALLTALK) nichts weiter als eine syntaktische Variante einer Methode "plus" definiert in einer Klasse "INTEGER" mit gleichem Parametertyp (EIFFEL verwendet per Konvention für Klassen und Typen vollständige Großschreibung; allerdings ist EIFFEL — wie PASCAL — nicht case-sensitive). Die Einheitlichkeit des Typsystems von EIFFEL geht dabei über die von C-Sharp insofern hinaus, als es keine an bestimmte Typkonstruktoren gebundene Unterscheidung von Wert- und Referenztypen gibt; gleichzeitig unterscheidet es sich aber von SMALLTALK (das sich zumindest dem Anschein nach vollständig auf Referenztypen festgelegt hat) insofern, als es auch Werttypen zulässt. Mehr dazu gleich.


Frage: Was ist das Typsystem in EIFFEL?
Antwort: Das Typsystem in EIFFEL ist ein einheitliches Typsystem, das keine separaten Referenz- und Werttypen kennt. Es unterscheidet auch nicht zwischen eingebauten Operatoren und von Programmiererinnen definierten Methoden.

Frage: Welche Unterscheidung gibt es im Typsystem von EIFFEL nicht?
Antwort: EIFFEL besitzt ein einheitliches Typsystem und unterscheidet nicht zwischen eingebauten Operatoren und von Programmiererinnen definierten Methoden. Auch gibt es keine an bestimmte Typkonstruktoren gebundene Unterscheidung von Wert- und Referenztypen.

Frage: Was unterscheidet EIFFEL von SMALLTALK und C-Sharp in Bezug auf das Typsystem?
Antwort: EIFFEL hat ein einheitliches Typsystem, das keine separate Unterscheidung zwischen Referenz- und Werttypen macht, im Gegensatz zu C-Sharp. Im Gegensatz zu SMALLTALK, das sich auf Referenztypen festgelegt hat, unterstützt EIFFEL auch Werttypen.


Zu den prominentesten Eigenschaften des Typsystems von EIFFEL zählen: Mehrfachvererbung. Generizität (genauer: beschränkter parametrischer Polymorphismus). Das Unterdrücken von Instanzvariablen und Methoden in Subklassen (Löschen von Methoden). Kovariante Redefinition, unterstützt durch sog. "verankerte Typen" (engl. "anchored types"; so gut wie ein Alleinstellungsmerkmal von EIFFEL).


Frage: Was sind die prominentesten Eigenschaften des Typsystems von EIFFEL?
Antwort: Die prominentesten Eigenschaften des Typsystems von EIFFEL sind Mehrfachvererbung, Generizität, das Unterdrücken von Instanzvariablen und Methoden in Subklassen, und kovariante Redefinition, unterstützt durch sog. "verankerte Typen".

Frage: Was ist Mehrfachvererbung in EIFFEL?
Antwort: Mehrfachvererbung in EIFFEL ist eine Eigenschaft des Typsystems, die es ermöglicht, dass eine Klasse von mehreren übergeordneten Klassen erben kann. Das bedeutet, dass eine Klasse Merkmale und Eigenschaften von mehreren Elternklassen erben kann, was die Wiederverwendung von Code und die Flexibilität bei der Gestaltung von Klassenhierarchien erhöht.


In gewisser Weise kann man das Unterdrücken von Methoden eines Typs in seinen Subtypen in EIFFEL als einen Spezialfall der kovarianten Redefinition ansehen, nämlich einen, in dem die Menge der möglichen Parameterobjekte auf die leere Menge eingeschränkt wird, sodass es keinen gültigen Aufruf gibt. Auch sind die Probleme, die kovariante Redefinition und Unterdrückung verursachen, ähnlich. Deshalb beschränken wir uns bei der Motivation (der Erklärung, warum EIFFEL über diese Eigenschaften verfügt), auf ein Beispiel für kovariante Redefinition.


Frage: Was ist kovariante Redefinition in EIFFEL?
Antwort: In EIFFEL, kovariante Redefinition ist eine Eigenschaft, bei der die Menge der möglichen Parameterobjekte in einer Unterklasse eingeschränkt wird, so dass es keinen gültigen Aufruf gibt. Diese Eigenschaft ist ähnlich wie das Unterdrücken von Methoden eines Typs in seinen Subtypen.

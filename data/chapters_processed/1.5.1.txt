1.5.1 Inhalt

Das bezeichnete Objekt wird manchmal auch als "Wert" oder "Inhalt" der Variable bezeichnet (und die Variable selbst als Platzhalter des Objekts). Besonders die Verwendung von "Inhalt" ist jedoch gefährlich, da sie nahelegt, dass ein Objekt zu einem Zeitpunkt nur von genau einer Variable bezeichnet werden kann, ähnlich wie ein Gegenstand zu einer Zeit immer nur Inhalt eines Behälters sein kann. Tatsächlich können aber mehrere Variablen gleichzeitig auf ein und dasselbe Objekt verweisen – die Variablen haben nämlich nur Verweise (auch Referenzen oder Pointer genannt) auf Objekte (genauer gesagt auf die Speicherstellen, an denen die Objekte abgelegt sind; siehe oben) und nicht den Inhalt selbst. Man spricht deshalb von einer Verweis- oder Referenzsemantik von Variablen, im Gegensatz zur Wertsemantik, bei der das bezeichnete Objekt tatsächlich auch den Inhalt der Variable ausmacht.
Aus technischer Sicht entspricht einer Variable einer Stelle im Speicher. Bei Variablen mit Verweissemantik steht an dieser Stelle jedoch nicht das Objekt, das sie bezeichnet, sondern lediglich ein Verweis auf die Speicherstelle, an der das Objekt gespeichert ist. Es handelt sich also bei Variablen mit Verweissemantik aus technischer Sicht um Pointervariablen, wie man sie auch aus nicht objektorientierten Programmiersprachen wie Pascal oder C kennt.
Verweis- und Wertsemantik von Variablen unterscheiden sich fundamental: Unter Wertsemantik können, solange jedes Objekt seine eigene Identität hat, zwei Variablen niemals dasselbe Objekt bezeichnen. Dies wird jedoch nur den wenigsten Programmierproblemen gerecht. Da zudem die Verweissemantik einen wesentlich speicher- und recheneffizienteren Umgang mit Objekten erlaubt und da unterschiedliche Objekte wie oben beschrieben unterschiedlich viel Speicherplatz belegen, so dass man im Vorfeld nicht immer weiß, wie viel davon man für eine Variable vorsehen muss, ist sie in der objektorientierten Programmierung vorherrschend. In manchen Sprachen, die neben Objekten auch Werte kennen, haben Variablen, die Objekte aufnehmen, stets Verweissemantik, und Variablen, die Werte aufnehmen, stets Wertsemantik (z. B. JAVA); andere objektorientierte Sprachen erlauben der Programmiererin, für jede Variable getrennt festzulegen, ob sie Wert- oder Verweissemantik haben soll (so z. B. C++ und EIFFEL).
Nun ist besonders für unveränderliche Objekte, deren interne Repräsentation klein ist (die also wenig Speicherplatz belegt), die Forderung nach der Speicherung eines Objektes an genau einem Ort und Speicherung von Wert- und Verweisen in Variablen (also die Speicherung in Variablen mit Verweissemantik) ineffizient. Welchen Sinn hätte es beispielsweise, allen Zeichen eine Identität zu geben, an der mit der jeweiligen Identität verbundenen Stelle im Speicher die internen Repräsentationen zu hinterlegen und dann in Variablen die Speicherstelle (Identität) zu speichern, wenn der Verweis mehr Speicher belegt als das Zeichenobjekt, auf das verwiesen wird? Das Gleiche gilt auch für Zahlen bis zu einer gewissen Größe.
In den meisten SMALLTALK-Implementationen wurde dieses Problem so gelöst, dass Variablen, die Zeichen, kleine Zahlen und die booleschen Werte true und false bezeichnen, Wertsemantik haben. Die Objekte können damit tatsächlich an mehreren Stellen im Speicher gespeichert werden, was einen Widerspruch zur reinen Lehre darstellt. Zwar geht damit der Begriff der Identität für diese Objekte verloren, aber für die Programmiererin ist die damit verbundene mehrfache Existenz identischer Objekte im Speicher insofern ohne größere Bedeutung, als hier Gleichheit problemlos an die Stelle der Identität treten kann. Der Preis für diese Flexibilität ist jedoch, dass man den Variablen nicht mehr fix Wert- oder Verweissemantik zuordnen kann – diese hängt vielmehr jeweils von der Art der Objekte ab, die sie gerade bezeichnen. In diesem Fall würde man Wert- bzw. Verweissemantik eher als eine Eigenschaft des Objekts denn der Variable ansehen; das ist jedoch ziemlich SMALLTALK-spezifisch.

Frage: Was wird mit "Inhalt" eines Objekts oder einer Variable gemeint?
Antwort: Der "Inhalt" eines Objekts oder einer Variable bezieht sich auf das Objekt, das von der Variable bezeichnet wird.

Frage: Welche Semantik wird verwendet, wenn Variablen Verweise auf Objekte haben?
Antwort: Variablen mit Verweissemantik haben Verweise (auch Referenzen oder Pointer genannt) auf Objekte, anstatt den Inhalt selbst zu speichern.

Frage: Wie unterscheiden sich Verweissemantik und Wertsemantik von Variablen?
Antwort: Unter Wertsemantik können zwei Variablen niemals dasselbe Objekt bezeichnen, während Verweissemantik erlaubt, dass mehrere Variablen auf dasselbe Objekt verweisen.

Frage: Warum wird in der objektorientierten Programmierung in der Regel Verweissemantik verwendet?
Antwort: Verweissemantik wird in der objektorientierten Programmierung häufig verwendet, da sie einen effizienteren Umgang mit Objekten ermöglicht und unterschiedliche Objekte unterschiedlich viel Speicherplatz belegen.

Frage: In welchen objektorientierten Programmiersprachen können Programmierer festlegen, ob Variablen Wert- oder Verweissemantik haben sollen?
Antwort: In einigen objektorientierten Sprachen wie C++ und EIFFEL können Programmierer festlegen, ob Variablen Wert- oder Verweissemantik haben sollen.

Frage: Warum haben in den meisten SMALLTALK-Implementationen Variablen, die Zeichen, kleine Zahlen und boolesche Werte bezeichnen, Wertsemantik?
Antwort: In den meisten SMALLTALK-Implementationen haben diese Variablen Wertsemantik, um Speicherplatz zu sparen, obwohl der Begriff der Identität für diese Objekte verloren geht. Die mehrfache Existenz identischer Objekte im Speicher hat in der Regel keine große Bedeutung, da Gleichheit an die Stelle der Identität treten kann.
18 Hintergrund

Sie kennen vielleicht aus anderen Programmiersprachen, dass Variablen und anderen Programmelementen bei ihrer Deklaration (Kapitel 19) ein Typ zugeordnet wird. Dieser Typ schränkt die möglichen Werte der deklarierten Elemente ein. So lassen sich beispielsweise in einer Variable vom Typ Boolean nur Wahrheitswerte, in einer vom Typ String nur Zeichenketten speichern.


Frage: Was ist der Zweck der Typisierung in Programmiersprachen?
Antwort: Der Zweck der Typisierung in Programmiersprachen ist es, den möglichen Wertebereich von Variablen und anderen Programmelementen einzuschränken. So lassen sich beispielsweise in einer Variable vom Typ Boolean nur Wahrheitswerte, in einer vom Typ String nur Zeichenketten speichern.


Typ ist ein primitiver Begriff, vergleichbar etwa mit dem Begriff der Menge in der Mengentheorie. Ein Typ hat eine Intension und eine Extension, wobei erstere der Definition des Typs entspricht, letztere seinem Wertebereich, also der Menge der Elemente (Objekte), die zu dem Typ gehören (man sagt auch, „die den Typ haben“ oder „die von dem Typ sind“). Häufig hat ein Typ auch einen Namen, den Typbezeichner. Typen sind die Grundlage von Typsystemen.


Frage: Was ist ein Typ?
Antwort: Ein Typ ist ein primitiver Begriff, der vergleichbar ist mit dem Begriff der Menge in der Mengentheorie. Ein Typ hat eine Intension, die der Definition des Typs entspricht, und eine Extension, die dem Wertebereich entspricht, also der Menge der Elemente, die zu dem Typ gehören. Typen sind die Grundlage von Typsystemen.

Frage: Was ist der Unterschied zwischen Intension und Extension eines Typs?
Antwort: Die Intension eines Typs entspricht seiner Definition, während die Extension dem Wertebereich des Typs entspricht, also der Menge der Elemente (Objekte), die zu dem Typ gehören.


Ihnen fällt wahrscheinlich sofort die Ähnlichkeit zum Konstrukt der Klasse, wie es in der letzten Kurseinheit eingeführt wurde, auf. Tatsächlich gibt es hier auch einen Zusammenhang. Um Sie aber nicht gleich in für diese Kurseinheit eher schädliche Denkmuster verfallen zu lassen, soll dieser Zusammenhang zunächst zurückgestellt werden. Eine Aufklärung erfolgt dann in Kapitel 28.


Frage: Wie hängen Klassen und temporäre Variablen zusammen?
Antwort: Es gibt eine Ähnlichkeit zwischen Klassen und temporären Variablen, die in der letzten Kurseinheit eingeführt wurde. Der Zusammenhang wird in Kapitel 28 aufgeklärt.

Frage: Was ist der Zusammenhang zwischen Objekt und Klasse?
Antwort: Objekt und Klasse sind eng verwandt, aber nicht dasselbe. Eine Klasse ist eine Art Bauplan oder Schablone, die beschreibt, wie ein Objekt aussehen sollte und was es können sollte. Ein Objekt ist eine konkrete Instanz einer Klasse, die einen bestimmten Zustand und ein bestimmtes Verhalten aufweist.

Frage: Warum sollte der Zusammenhang zwischen Objekt und Klasse zurückgestellt werden?
Antwort: Der Zusammenhang zwischen Objekt und Klasse sollte zurückgestellt werden, um den Schülern nicht in Denkmuster zu verfallen, die für das Verständnis der aktuellen Kurseinheit eher schädlich sind. Eine Aufklärung erfolgt dann in Kapitel 28.


Ein Typsystem umfasst Typausdrücke, Objekt- oder Wertausdrücke, Regeln, die Wertausdrücken Typen zuordnen, und Regeln, die von Wertausdrücken einzuhalten sind (zusammen die Typregeln). Wertausdrücke (bzw. schlicht Ausdrücke, wenn es nicht um die Abgrenzung von Typausdrücken geht) kennen Sie schon: In SMALLTALK sind es die in Kurseinheit 1, Kapitel 4.1 aufgeführten. Mit den anderen Konzepten werden Sie in den nachfolgenden Kapiteln vertraut gemacht, allerdings in weniger formaler Form, als Sie das nach dieser Definition vielleicht befürchten.


Frage: Was ist ein Typsystem?
Antwort: Ein Typsystem umfasst Typausdrücke, Objekt- oder Wertausdrücke, Regeln, die Wertausdrücken Typen zuordnen, und Regeln, die von Wertausdrücken einzuhalten sind(zusammen die Typregeln).


Warum aber typisiert man Variablen und andere Programmelemente? Dafür gibt es mindestens vier gute Gründe: Typisierung regelt das Speicher-Layout. Typisierung erlaubt die effizientere Ausführung eines Programms. Typisierung erhöht die Lesbarkeit eines Programms. Typisierung ermöglicht das automatische Finden von logischen Fehlern in einem Programm.


Frage: Welche Vorteile bietet die Typisierung von Variablen und anderen Programmelementen?
Antwort: Typisierung regelt das Speicher-Layout, erlaubt die effizientere Ausführung eines Programms, erhöht die Lesbarkeit eines Programms und ermöglicht das automatische Finden von logischen Fehlern in einem Programm.


Zu 1.: Der Compiler kann anhand des Typs einer Variable bestimmen, wie viel Speicherplatz er für die Aufnahme eines Wertes reservieren muss. Dies ist jedoch naturgemäß nur für Variablen mit Wertsemantik relevant und daher für die objektorientierte Programmierung, insbesondere für Sprachen wie SMALLTALK (in denen Referenzsemantik vorherrscht), von untergeordneter Bedeutung.


Frage: Wie bestimmt der Compiler den Speicherbedarf für Variablen?
Antwort: Der Compiler kann anhand des Typs einer Variablen bestimmen, wie viel Speicherplatz er für die Aufnahme eines Wertes reservieren muss.

Frage: Wofür ist der Typ einer Variablen in der objektorientierten Programmierung relevant?
Antwort: In der objektorientierten Programmierung ist der Typ einer Variablen nur für Variablen mit Wertsemantik relevant, was jedoch in Sprachen wie SMALLTALK, in denen Referenzsemantik vorherrscht, von untergeordneter Bedeutung ist.

Frage: Warum ist der Typ einer Variablen für die objektorientierte Programmierung von untergeordneter Bedeutung?
Antwort: In der objektorientierten Programmierung, insbesondere in Sprachen wie SMALLTALK, ist Referenzsemantik vorherrschend. Daher ist der Typ einer Variablen nicht so wichtig, da der Compiler nicht anhand des Typs bestimmen kann, wie viel Speicherplatz er für die Aufnahme eines Wertes reservieren muss. Stattdessen wird der Speicherplatz für die Aufnahme eines Objektwertes zur Laufzeit bestimmt.


Zu 2.: Wenn man weiß, dass die Werte einer Variable immer vom selben Typ sind, also alle demselben Wertebereich entstammen, dann lassen sich bestimmte Optimierungen durchführen. Wenn man z. B. aufgrund der Deklaration einer Variable x für gegeben annehmen kann, dass x nur ganze Zahlen enthält, dann kann der Compiler für die Übersetzung von x := x + 1 die Ganzzahladdition, ja sogar die Inkrement-Anweisung des Prozessors verwenden. Kennt der Compiler den Typ von x hingegen nicht, dann muss das Programm vor der Ausführung der Addition erst prüfen, von welchem Typ der Wert von x ist — handelt es sich um eine Fließkommazahl, so muss es zu der entsprechenden Operation verzweigen, handelt es sich womöglich um gar keine Zahl, dann muss es einen Laufzeitfehler signalisieren oder sich etwas anderes einfallen lassen. Dem kann man entgegenhalten, dass im Falle der objektorientierten Programmierung selbst bei einer Typisierung aller Variablen gelegentlich noch Laufzeittests durchgeführt (oder andernfalls schwere Programmfehler in Kauf genommen) werden müssen, und dass sich die zur Optimierung benötigte Information auch anders als über explizite Typisierung von Variablen (z. B. über die sog. Typinferenz, also die Ausnutzung impliziter Typinformation) gewinnen lässt.


Frage: Was ist der Vorteil einer expliziten Typisierung von Variablen?
Antwort: Wenn man weiß, dass die Werte einer Variable immer vom selben Typ sind, also alle demselben Wertebereich entstammen, dann lassen sich bestimmte Optimierungen durchführen. Zum Beispiel kann der Compiler für die Übersetzung von x := x + 1 die Ganzzahladdition, ja sogar die Inkrement-Anweisung des Prozessors verwenden.

Frage: Warum ist es vorteilhaft, wenn man den Typ einer Variablen kennt?
Antwort: Wenn man den Typ einer Variablen kennt, kann der Compiler bestimmte Optimierungen durchführen, wie z.B. die Ganzzahladdition oder die Inkrement-Anweisung des Prozessors verwenden. Wenn der Compiler den Typ nicht kennt, muss das Programm vor der Ausführung der Addition erst prüfen, von welchem Typ der Wert von x ist, was zu Laufzeitverzögerungen führen kann.


Zu 3.: In der Vergangenheit hatten Variablen eher kurze, wenig selbsterklärende Namen (vgl. dazu auch Kapitel 62 in Kurseinheit 7). Es ist dann sinnvoll, wenigstens an der Stelle der ersten Erwähnung der Variablen (in der Regel deren Deklaration) einen Hinweis darauf zu haben, wofür (für welche Menge von Objekten) die Variable steht. Dies kann über einen Kommentar erfolgen, aber auch durch die Assoziation mit einem Typen, die aussagt, welcher Art die Werte der Variable sein müssen. Doch nicht nur Variablen-, auch Methodennamen können für sich genommen wenig aussagekräftig sein und durch die Verknüpfung mit Typen aussagekräftiger gemacht werden: Eine Deklaration der Methode next etwa, die ListElement als Typ des Ein- und Ausgabeparameters deklariert, legt nahe, dass sie das in einer Liste auf den Eingabeparameter folgende Element zurückliefert. Ohne die Angabe der Parametertypen müsste man als Nutzerin der Funktion, die ihre Implementation nicht kennt, schon über ihren Zweck spekulieren. Dem mag man freilich entgegenhalten, dass man stattdessen ja auch selbsterklärende Namen für Variablen und Methoden vergeben könnte (mehr dazu in Kurseinheit 7, Kapitel 62).


Frage: Warum ist es sinnvoll, temporären Variablen einen Hinweis auf den Typ der Werte zu geben?
Antwort: Es ist sinnvoll, temporären Variablen einen Hinweis auf den Typ der Werte zu geben, um die Lesbarkeit des Codes zu verbessern und die Funktion der Variablen für die Nutzerin der Funktion, die die Implementation nicht kennt, transparenter zu gestalten.

Frage: Warum ist es sinnvoll, Variablen und Methoden mit Typen zu assoziieren?
Antwort: Es ist sinnvoll, Variablen und Methoden mit Typen zu assoziieren, um die Bedeutung der Variablen und Methoden für den Nutzer zu verdeutlichen. Zum Beispiel kann eine Deklaration der Methode next, die ListElement als Typ des Ein- und Ausgabeparameters deklariert, nahelegen, dass sie das in einer Liste auf den Eingabeparameter folgende Element zurückliefert. Ohne die Angabe der Parametertypen müsste man als Nutzerin der Funktion, die ihre Implementation nicht kennt, schon über ihren Zweck spekulieren.


Es bleibt aber in jedem Fall Punkt 4, das Aufdecken von logischen Fehlern in einem Programm. Ohne externes Wissen, was ein Programm tun soll, verlangt das Finden von Fehlern jedoch ein gewisses Maß an Redundanz, also die mehrfache Lieferung gleicher Information, im Programm, denn nur wenn eine solche Redundanz vorliegt, können Widersprüche entstehen, die auf einen logischen Programmierfehler hinweisen. Die Verknüpfung von deklarierten Elementen mit Typen erlaubt aber genau die Angabe solcher redundanter Information. Die Schaffung dieser Redundanz verlangt jedoch vermehrte Denk- und Schreibarbeit und ist zudem auch noch, im Falle eines fehlerfreien Programms, überflüssig. Dem kann man allerdings entgegenhalten, dass kaum eine Programmiererin auf Anhieb korrekte Programme schreibt, und wenn eine Typisierung Fehler zu finden in der Lage ist und somit nicht minder aufwendige Tests ersetzt, dann ist das natürlich gut.


Frage: Warum kann die Verknüpfung von deklarierten Elementen mit Typen hilfreich sein?
Antwort: Die Verknüpfung von deklarierten Elementen mit Typen erlaubt die Angabe redundanter Information im Programm, was das Aufdecken von logischen Fehlern ermöglichen kann. Die Schaffung dieser Redundanz verlangt jedoch vermehrte Denk- und Schreibarbeit und ist zudem auch noch überflüssig, wenn das Programm fehlerfrei ist. Allerdings kann eine Typisierung Fehler finden und somit nicht minder aufwendige Tests ersetzen.

Frage: Wozu dient die Verknüpfung von deklarierten Elementen mit Typen?
Antwort: Die Verknüpfung von deklarierten Elementen mit Typen erlaubt die Angabe redundanter Information im Programm, was das Aufdecken von logischen Fehlern erleichtert. Denn nur wenn eine solche Redundanz vorliegt, können Widersprüche entstehen, die auf einen logischen Programmierfehler hinweisen.

Frage: Warum erlaubt die Verknüpfung von deklarierten Elementen mit Typen die Angabe redundanter Information?
Antwort: Die Verknüpfung von deklarierten Elementen mit Typen erlaubt die Angabe redundanter Information, weil sie eine zusätzliche Information über die Variablen und Funktionen bereitstellt, die in der Programmlogik selbst nicht zwingend erforderlich ist. Diese zusätzliche Information kann dazu beitragen, logische Fehler im Programm zu entdecken, indem sie Widersprüche aufzeigt.


Ein fünfter, oben nicht aufgezählter Grund zur Verwendung eines der heute üblichen Typsysteme ist übrigens die dadurch entstehende Modularisierung von Programmen, nämlich wenn ein Typ zugleich eine Schnittstelle oder ein Interface ausdrückt.


Frage: Was ist ein Vorteil von Typsystemen?
Antwort: Ein Vorteil von Typsystemen ist die dadurch entstehende Modularisierung von Programmen, wenn ein Typ zugleich eine Schnittstelle oder ein Interface ausdrückt.

Frage: Was ist ein weiterer Grund für die Verwendung von Typsystemen?
Antwort: Ein weiterer Grund für die Verwendung von Typsystemen ist die dadurch entstehende Modularisierung von Programmen, nämlich wenn ein Typ zugleich eine Schnittstelle oder ein Interface ausdrückt.

Frage: Was ist die Aufgabe des Verhaltens eines Objekts?
Antwort: Das Verhalten eines Objekts ist dafür verantwortlich, den Zustand des Objekts zu ändern und somit Zustandsänderungen eines Objekts herbeizuführen.

Frage: Warum hängt das Verhalten eines Objekts von seinem Zustand ab?
Antwort: Das Verhalten eines Objekts hängt in der Regel von seinem Zustand ab, weil der Zustand eines Objekts die Informationen enthält, die benötigt werden, um die richtigen Entscheidungen zu treffen und die entsprechenden Aktionen auszuführen. Das Verhalten eines Objekts basiert auf den Daten in seinem Zustand, und diese Daten beeinflussen, wie das Objekt auf Nachrichten reagiert.


Die der Fehlerentdeckung mittels Typsystemen zugrundeliegende These ist, dass ein guter Teil logischer Programmierfehler bereits frühzeitig daran erkannt werden kann, dass eine Variable einen Wert hat, den sie eigentlich niemals haben dürfte. So zeugt beispielsweise von einem Fehler, wenn einer Variable, die für Zahlen gedacht war, eine Zeichenkette zugewiesen wird. Wenn dann nämlich einem Ausdruck mit einer arithmetischen Operation, die Zahlen als Operanden verlangt, eine solchermaßen fehlbelegte Variable zugeführt wird, kann dieser nicht ausgewertet werden. Ohne Typprüfung würde dieser Fehler erst zur Laufzeit, also wenn der Ausdruck tatsächlich ausgewertet werden soll, in Erscheinung treten und hätte dann in aller Regel einen Programmabbruch zur Folge. Man nennt einen solchen Programmierfehler einen Typfehler.


Frage: Was ist die Aufgabe von Typsystemen in der Fehlerentdeckung?
Antwort: Die Aufgabe von Typsystemen in der Fehlerentdeckung ist es, einen Teil logischer Programmierfehler frühzeitig zu erkennen, indem sie prüfen, ob eine Variable einen Wert hat, den sie eigentlich niemals haben dürfte. Zum Beispiel wird ein Fehler erkannt, wenn einer Variable, die für Zahlen gedacht ist, eine Zeichenkette zugewiesen wird.

Frage: Was ist der Zweck von Typsystemen in der Fehlerentdeckung?
Antwort: Typsysteme in der Fehlerentdeckung zielen darauf ab, einen Teil logischer Programmierfehler frühzeitig zu erkennen, indem sie Variablen daran hindern, Werte anzunehmen, die sie eigentlich nicht haben dürften. Dies hilft, Fehler zu vermeiden, die erst zur Laufzeit auftreten und in der Regel einen Programmabbruch verursachen. Diese Art von Fehlern werden als Typfehler bezeichnet.


Während ein Programmabbruch wenigstens noch eine erkennbare Reaktion auf einen Programmierfehler darstellt, ist es fast noch schlimmer, wenn ein logischer Fehler ohne solche bleibt. So kann es beispielsweise vorkommen, dass man einer Variable, deren Inhalt eine Strecke darstellen soll, eine andere zuweist, deren Inhalt eine Zeit repräsentiert. Mit beiden ließe sich gleich rechnen (dieselben Rechenoperationen durchführen), aber das Ergebnis wäre vermutlich falsch. Merken muss man das allerdings selbst, denn das Programm läuft einfach weiter.


Frage: Was ist ein logischer Fehler in einem Programm?
Antwort: Ein logischer Fehler in einem Programm ist ein Fehler, bei dem das Programm zwar fehlerfrei läuft, aber das Ergebnis falsch ist. Im Gegensatz zu einem Programmabbruch, der auf einen Programmierfehler hinweist, bleibt ein logischer Fehler oft unbemerkt.

Frage: Was sind die Folgen eines logischen Fehlers in einem Programm?
Antwort: Ein logischer Fehler in einem Programm kann dazu führen, dass das Programm weiterläuft, aber das Ergebnis falsch ist. Es ist schwieriger zu erkennen als ein Programmabbruch, da keine erkennbare Reaktion auf einen Programmierfehler stattfindet.

Frage: Was ist ein Programmabbruch und was ist ein logischer Fehler?
Antwort: Ein Programmabbruch ist ein Fehler, der zu einer erkennbaren Reaktion führt, während ein logischer Fehler ein Fehler ist, der ohne solche Reaktion weiterläuft. Ein Beispiel für einen logischen Fehler ist das versehentliche Zuweisen einer falschen Variablen, die zwar gleich rechnen lässt, aber das Ergebnis falsch macht.


Man kann Variablenfehlbelegungen dieser Art verhindern, indem man Variablen mit expliziten Typinvarianten versieht, die die Menge ihrer zulässigen Werte beschränken, und dann darüber wacht, dass diese Invarianten immer eingehalten werden. Eine besonders einfache Möglichkeit, solche Invarianten zu spezifizieren, erlauben sogenannte Typannotationen, also die Verbindung einer Variable mit einem Typen, wobei der Typ eine Menge von Werten festlegt, die die Variable ausschließlich haben darf. In typisierten Programmiersprachen erfolgt die Typannotation explizit und zwingend bei der Variablendeklaration; in nicht oder nur optional typisierten Sprachen kann sie auch (für einzelne oder alle Variablen) hergeleitet (inferiert; die Typinferenz) werden und ist dann implizit.


Frage: Was sind Typinvarianten?
Antwort: Typinvarianten sind eine Möglichkeit, Variablenfehlbelegungen zu verhindern. Sie beschränken die Menge der zulässigen Werte einer Variablen. In typisierten Programmiersprachen erfolgt die Typannotation explizit und zwingend bei der Variablendeklaration. In nicht oder nur optional typisierten Sprachen kann sie auch hergeleitet (inferiert) werden.

Frage: Was sind Typannotationen?
Antwort: Typannotationen sind eine Möglichkeit, Variablen mit expliziten Typinvarianten zu versehen, die die Menge ihrer zulässigen Werte beschränken. Sie werden in typisierten Programmiersprachen explizit und zwingend bei der Variablendeklaration angegeben, während sie in nicht oder nur optional typisierten Sprachen hergeleitet und implizit sein können.


Ein Programm, in dem alle Variablenbelegungen immer alle Typinvarianten erfüllen, heißt typkorrekt. In einer Sprache, die durch ihr Typsystem Typkorrektheit festzustellen erlaubt, nennt man die logischen Fehler, die sich in unzulässigen Wertzuweisungen ausdrücken, auch semantische Fehler (und zwar, weil der Inhalt eines Programmelements nicht seiner intendierten Bedeutung entspricht). Dabei ist die Semantik des Programmelements im Programm zweimal, auf redundante, aber unterschiedliche Art, spezifiziert: in Form seines Typs und in Form seiner tatsächlichen Verwendung (festgelegt durch Zuweisungen und Methodenaufrufe). Lässt sich aus beiden ein Widerspruch ableiten, muss eine von beiden falsch gewesen sein.


Frage: Was sind semantische Fehler in einem Programm?
Antwort: Semantische Fehler in einem Programm sind logische Fehler, die sich in unzulässigen Wertzuweisungen ausdrücken. Sie entstehen, wenn die tatsächliche Verwendung eines Programmelements nicht seiner intendierten Bedeutung entspricht, die im Typ des Programmelements spezifiziert ist.


Der einzige Weg, eine mit der Typisierung einer Variable ausgedrückte Invariante zu verletzen, also Typinkorrektheit herzustellen, ist per Wertzuweisung an die Variable. Ein Typsystem muss also lediglich alle Wertzuweisungen in einem Programm überprüfen, um Freiheit von semantischen Fehlern zu garantieren. Dazu zählen allerdings auch die impliziten Zuweisungen bei Methodenaufrufen, die, auch wegen des dynamischen Bindens, nicht immer alle offensichtlich sind. Im Folgenden heißen Zuweisungen und Methodenaufrufe, die nicht zu typinkorrekten Programmen führen können, zulässig.


Frage: Was ist das Typsystem?
Antwort: Das Typsystem ist ein Mechanismus, der überprüft, ob eine Wertzuweisung an eine Variable die Typinvarianz verletzt und somit zu semantischen Fehlern führt. Es muss alle Wertzuweisungen in einem Programm überprüfen, um Freiheit von semantischen Fehlern zu garantieren, einschließlich impliziter Zuweisungen bei Methodenaufrufen.

Frage: Was ist der Zweck eines Typsystems in der Programmierung?
Antwort: Ein Typsystem in der Programmierung überprüft alle Wertzuweisungen in einem Programm, um Freiheit von semantischen Fehlern zu garantieren. Dazu zählen auch die impliziten Zuweisungen bei Methodenaufrufen, die wegen des dynamischen Bindens nicht immer offensichtlich sind.

Frage: Was ist der einzige Weg, eine mit der Typisierung einer Variablen ausgedrückte Invariante zu verletzen?
Antwort: Der einzige Weg, eine mit der Typisierung einer Variablen ausgedrückte Invariante zu verletzen, ist per Wertzuweisung an die Variable.


Nun kann man sich vorstellen, dass es für einen Compiler selbst in einfachen Fällen nicht leicht ist, festzustellen, ob eine Wertzuweisung eine Invariante verletzt und somit zu einem typinkorrekten Programm führt. So ist das folgende STRONGTALK-Programmfragment das zunächst eine temporäre Variable i mit dem Typ Integer (in STRONGTALK wird die Typannotation hinter der Variable in spitzen Klammern angeführt) deklariert und ihr dann, in einer Folge von Anweisungen, zunächst 0 und dann 1 (beides Werte vom Typ Integer) zuweist, zwar typkorrekt im Sinne obiger Definition, aber um das zu erschließen, muss man schon wissen, dass die Bedingung in Zeile 835 immer erfüllt ist, der False-Zweig, der zu einer Verletzung der Invariante von i (nämlich dass die Werte immer vom Typ Integer sein müssen und somit nicht vom Typ String sein dürfen) führen würde, also nie ausgeführt wird. Im gegebenen Fall ist das zwar offensichtlich (und bereits von einer recht einfachen Programmanalyse feststellbar), aber es lassen sich auch Fälle konstruieren, in denen eine automatische Programmanalyse streiken muss.


Frage: Was ist eine temporäre Variable in STRONGTALK?
Antwort: In STRONGTALK ist eine temporäre Variable eine Variable, die für eine Methode deklariert wird und nur für die Dauer der Ausführung der Methode existiert. Sie wird vom System nach Beendigung der Methode entfernt und die Werte sind außerhalb der Methode nicht sichtbar. Temporäre Variablen können auch der besseren Lesbarkeit dienen, indem sie Zwischenergebnissen Namen geben. Im Gegensatz zu anderen Programmiersprachen müssen temporäre Variablen in STRONGTALK mit ihrem Typ annotiert werden.

Frage: Was ist eine Invariante?
Antwort: Eine Invariante ist eine Bedingung, die während der Ausführung eines Programms immer erfüllt sein muss. Im gegebenen Beispiel ist die Invariante von i, dass die Werte immer vom Typ Integer sein müssen und somit nicht vom Typ String sein dürfen.


Was man jedoch immer tun kann, um Typkorrektheit zu gewährleisten, ist, dass man zur Laufzeit vor einer Variablenzuweisung prüft, ob der zuzuweisende Wert den von der Variable geforderten Typ hat. Diese sogenannte dynamische Typprüfung (engl. dynamic type checking) hat jedoch den entscheidenden Nachteil, dass sie zu spät kommt, nämlich zu einem Zeitpunkt, in dem man bereits nicht mehr viel anderes machen kann als einen Fehler zu signalisieren (der dann günstigenfalls durch eine dafür vorgesehene Fehlerbehandlungsmethode aufgefangen wird, der aber in der Praxis häufig nur zu einem Programmabbruch führt). Man kann jedoch argumentieren, dass auch letzteres immer noch besser ist, als mit falschen Werten weiterzuarbeiten und damit entweder einen Programmabbruch an einer anderen Stelle, die nicht mehr so leicht mit der fehlerhaften Wertzuweisung in Zusammenhang zu bringen ist, in Kauf zu nehmen oder gar einen logischen Fehler, der überhaupt nicht erkannt wird.


Frage: Was ist dynamische Typprüfung?
Antwort: Dynamische Typprüfung ist eine Methode zur Gewährleistung von Typkorrektheit, bei der zur Laufzeit vor einer Variablenzuweisung geprüft wird, ob der zuzuweisende Wert den von der Variablen geforderten Typ hat. Der Nachteil ist, dass diese Prüfung zu spät kommt und häufig nur zu einem Programmabbruch führt.

Frage: Was ist der Nachteil der dynamischen Typprüfung?
Antwort: Der Nachteil der dynamischen Typprüfung ist, dass sie zu spät kommt, nämlich zu einem Zeitpunkt, in dem man bereits nicht mehr viel anderes machen kann als einen Fehler zu signalisieren.


Man beachte übrigens, dass nach diesem Kriterium SMALLTALK — entgegen häufig zu lesenden Behauptungen — keine dynamische Typprüfung durchführt, da Typfehler erst im letztmöglichen Moment offenbar werden, nämlich wenn auf einer Variable eine Methode aufgerufen werden soll, die für das Objekt, auf das die Variable verweist, gar nicht definiert ist. Um das zu verhindern, findet man in SMALLTALK-Code gelegentlich Figuren wie (SMALLTALK EXPRESS entnommen). Dies entspricht natürlich genau einer dynamischen Typprüfung, nur dass hier Typ durch Klasse ersetzt wurde und die Prüfung eben nicht automatisch durch ein Laufzeittypsystem erfolgt, sondern ausprogrammiert werden muss.


Frage: Führt SMALLTALK dynamische Typprüfung durch?
Antwort: Nein, SMALLTALK führt keine dynamische Typprüfung durch. Typfehler werden erst im letztmöglichen Moment offenbar, wenn auf einer Variablen eine Methode aufgerufen werden soll, die für das Objekt, auf das die Variable verweist, gar nicht definiert ist.

Frage: Was ist dynamische Typprüfung und warum wird sie in Smalltalk nicht durchgeführt?
Antwort: Dynamische Typprüfung ist eine Technik, bei der die Typen der Variablen zur Laufzeit überprüft werden, um sicherzustellen, dass sie mit den erwarteten Typen übereinstimmen. In Smalltalk wird diese Art von Prüfung nicht automatisch durchgeführt, da Typfehler erst im letzten Moment offenbar werden, wenn auf einer Variablen eine Methode aufgerufen wird, die für das Objekt, auf das die Variable verweist, gar nicht definiert ist. Stattdessen muss die Prüfung ausprogrammiert werden, wie in dem Beispiel (SMALLTALK EXPRESS entnommen) gezeigt wird, bei dem Typ durch Klasse ersetzt wurde.


Eine Typisierung findet in SMALLTALK gar nicht, auch nicht zur Laufzeit, statt. Außerdem ist mit dynamischer Typisierung in der Regel dynamische Typprüfung gemeint. Was ein dynamischer Typ sein soll, ist auch gar nicht klar. dynamische


Frage: Gibt es in SMALLTALK eine Typisierung?
Antwort: Nein, in SMALLTALK gibt es keine Typisierung, weder statisch noch dynamisch.

Frage: Was ist dynamische Typisierung?
Antwort: Dynamische Typisierung ist die Tatsache, dass der Typ eines Objekts zur Laufzeit bekannt ist. Im Gegensatz zur statischen Typisierung, bei der der Typ zur Übersetzungszeit bekannt ist.


Sehr viel nützlicher als die dynamische Typprüfung ist die statische Typprüfung, bei der, trotz aller theoretischen Hindernisse, die Typkorrektheit zur Übersetzungszeit gewährleistet werden soll. Die Typprüfung ist damit Aufgabe des Compilers und nicht, wie im Fall der dynamischen Typprüfung, Aufgabe des Laufzeitsystems oder gar der Programmiererin. Wie wir schon gesehen haben, bedeutet dies nicht weniger, als einen Beweis zu führen, dass bei keiner Ausführung eines Programms eine Typinvariante verletzt wird. In der Praxis bedeutet dies aber, dass eine rein statische Typprüfung immer auch Programme zurückweist, die nützlich, sinnvoll und typkorrekt sind (s. obiges Beispiel der Zeilen


Frage: Was ist statische Typprüfung?
Antwort: Die statische Typprüfung ist ein Verfahren, bei dem die Typkorrektheit eines Programms bereits während der Übersetzungszeit geprüft wird. Im Gegensatz zur dynamischen Typprüfung, die zur Laufzeit erfolgt, wird bei der statischen Typprüfung der Beweis erbracht, dass bei keiner Ausführung eines Programms eine Typinvariante verletzt wird.

Frage: Was ist der Unterschied zwischen dynamischer und statischer Typprüfung?
Antwort: Dynamische Typprüfung findet zur Laufzeit eines Programms statt und wird vom Laufzeitsystem oder der Programmiererin durchgeführt, während statische Typprüfung zur Übersetzungszeit stattfindet und vom Compiler durchgeführt wird. Statische Typprüfung stellt sicher, dass bei keiner Ausführung eines Programms eine Typinvariante verletzt wird, während dynamische Typprüfung dies zur Laufzeit überprüft. Statische Typprüfung ist nützlicher als dynamische Typprüfung, lehnt aber auch Programme ab, die nützlich, sinnvoll und typkorrekt sind.


Zwar kann man versuchen, möglichst wenige typkorrekte Programme durch die statische Typprüfung zurückzuweisen, aber wie man sich leicht vorstellen kann, wird mit steigender Genauigkeit das dazu notwendige Typsystem immer aufwendiger und schwieriger zu benutzen, bis es irgendwann so kompliziert ist wie das Programm, dessen Fehler es entdecken soll (so dass man bei auftretenden Typfehlern erst einmal prüfen muss, ob die Ursache tatsächlich in einem fehlerhaften Programm oder vielleicht nur in fehlerhaften Typannotationen liegt).


Frage: Was passiert, wenn das Typsystem eines Programms zu kompliziert wird?
Antwort: Wenn das Typsystem eines Programms zu kompliziert wird, wird es schwieriger zu benutzen und kann sogar so kompliziert sein wie das Programm, dessen Fehler es entdecken soll. In diesem Fall muss man bei auftretenden Typfehlern prüfen, ob die Ursache in einem fehlerhaften Programm oder in fehlerhaften Typannotationen liegt.

Frage: Was passiert, wenn man versucht, möglichst wenige typkorrekte Programme durch die statische Typprüfung zurückzuweisen?
Antwort: Wenn man versucht, möglichst wenige typkorrekte Programme durch die statische Typprüfung zurückzuweisen, wird das dazu notwendige Typsystem immer aufwendiger und schwieriger zu benutzen, bis es irgendwann so kompliziert ist wie das Programm, dessen Fehler es entdecken soll. In diesem Fall muss man bei auftretenden Typfehlern prüfen, ob die Ursache tatsächlich in einem fehlerhaften Programm oder in fehlerhaften Typannotationen liegt.


So ist die Suche nach einem guten Typsystem immer die Suche nach einem guten Kompromiss. Die meisten heute in der Praxis verwendeten Typsysteme basieren auf einem solchen: einer statischen Komponente, die möglichst viele Fehler findet, ohne dabei die Programmiererin allzu sehr einzuschränken, und einer dynamischen Komponente, die den Rest erledigt. Eine erwähnenswerte Ausnahme von diesem Muster bildet das STRONGTALK-Typsystem.


Frage: Was ist das STRONGTALK-Typsystem?
Antwort: Das STRONGTALK-Typsystem ist ein Typsystem, das eine erwähnenswerte Ausnahme von den meisten heute in der Praxis verwendeten Typsystemen darstellt, die auf einer statischen und dynamischen Komponente basieren.


Ein weiterer Kompromiss betrifft die Ausdruckskraft des Typsystems. Je ausdruckskräftiger ein Typsystem ist, desto mehr Informationen kann es in einer Typannotation unterbringen und desto mehr Typfehler lassen sich aufdecken. Allerdings steigt mit der Ausdruckskraft auch die Komplexität des Typsystems und damit die Wahrscheinlichkeit, dass es in einem konkreten Fall notwendig ist, eine aufwändige (und unter Umständen nicht einmal terminierende) Typprüfung durchzuführen. Besonders anspruchsvolle Typsysteme können außerdem die Gestaltung von Schnittstellen (Interfaces, siehe Kapitel 62) deutlich erschweren, so dass die beteiligten Programme nicht ohne weiteres zusammenarbeiten können (dies ist in der objektorientierten Programmierung ein schwer wiegendes Manko, da das gemeinsame Arbeiten von Klassen aus verschiedenen Bibliotheken die Regel ist).


Frage: Was ist ein Typsystem und wie wirkt sich seine Ausdruckskraft auf die Komplexität aus?
Antwort: Ein Typsystem ist ein Mechanismus, der Typen von Variablen und Ausdrücken überprüft. Je ausdruckskräftiger ein Typsystem ist, desto mehr Informationen kann es in einer Typannotation unterbringen und desto mehr Typfehler lassen sich aufdecken. Allerdings steigt mit der Ausdruckskraft auch die Komplexität des Typsystems und damit die Wahrscheinlichkeit, dass es in einem konkreten Fall notwendig ist, eine aufwändige (und unter Umständen nicht einmal terminierende) Typprüfung durchzuführen.

Frage: Was ist ein ausdruckskräftiges Typsystem?
Antwort: Ein ausdruckskräftiges Typsystem ist ein Typsystem, das in einer Typannotation mehr Informationen unterbringen und damit mehr Typfehler aufdecken kann. Allerdings steigt mit der Ausdruckskraft auch die Komplexität des Typsystems und damit die Wahrscheinlichkeit, dass eine aufwändige Typprüfung notwendig ist. Besonders anspruchsvolle Typsysteme können außerdem die Gestaltung von Schnittstellen erschweren, so dass die beteiligten Programme nicht ohne weiteres zusammenarbeiten können.

Frage: Was ist ein Nachteil von ausdruckskräftigen Typsystemen?
Antwort: Ein Nachteil von ausdruckskräftigen Typsystemen ist, dass sie die Gestaltung von Schnittstellen erschweren können und die beteiligten Programme nicht ohne weiteres zusammenarbeiten können.


Die folgende Grafik zeigt, wie die Typisierung von Variablen und anderen Programmkonstrukten in den verschiedenen Phasen eines Entwicklungszyklus verwendet werden kann: 1. In der Phase der statischen Typisierung wird der Typ einer Variablen bereits bei der Deklaration festgelegt. 2. In der Phase der dynamischen Typisierung wird der Typ einer Variablen erst zur Laufzeit bestimmt. 3. In der Phase der statischen Typprüfung wird der Typ einer Variablen bereits vor der Ausführung des Programms geprüft. 4. In der Phase der dynamischen Typprüfung wird der Typ einer Variablen erst zur Laufzeit geprüft. In der Analysephase wird die Typisierung von Variablen und anderen Programmkonstrukten nicht verwendet. In der Designphase wird die Typisierung von Variablen und anderen Programmkonstrukten verwendet, um die Struktur des Systems zu beschreiben. In der Implementierungsphase wird die Typisierung von Variablen und anderen Programmkonstrukten verwendet, um die statische Integrität des Systems zu gewährleisten. In der Testphase wird die Typisierung von Variablen und anderen Programmkonstrukten verwendet, um die dynamische Integrität des Systems zu gewährleisten. In der Wartungsphase wird die Typisierung von Variablen und anderen Programmkonstrukten verwendet, um die Korrektheit des Systems zu gewährleisten.

Frage: Wann wird die Typisierung von Variablen und anderen Programmkonstrukten in der Implementierungsphase verwendet?
Antwort: In der Implementierungsphase wird die Typisierung von Variablen und anderen Programmkonstrukten verwendet, um die statische Integrität des Systems zu gewährleisten.

Frage: Wie wird die Typisierung von Variablen und anderen Programmkonstrukten in den verschiedenen Phasen eines Entwicklungszyklus verwendet?
Antwort: Die Typisierung von Variablen und anderen Programmkonstrukten wird in den verschiedenen Phasen eines Entwicklungszyklus verwendet, um die Korrektheit und Konsistenz des Codes zu gewährleisten. In der Designphase wird die Typisierung verwendet, um die Architektur des Systems zu definieren und die Beziehungen zwischen den verschiedenen Komponenten zu beschreiben. In der Implementierungsphase wird die Typisierung verwendet, um die Syntax und Semantik des Codes zu überprüfen und sicherzustellen, dass er den Anforderungen entspricht. In der Testphase wird die Typisierung verwendet, um die Funktionalität des Codes zu überprüfen und sicherzustellen, dass er die erwarteten Ergebnisse liefert. In der Wartungsphase wird die Typisierung verwendet, um sicherzustellen, dass Änderungen am Code nicht unbeabsichtigte Auswirkungen haben und dass der Code weiterhin den Anforderungen entspricht.


Entwurfsphase: In dieser Phase hilft die Typisierung, die Struktur des Programms zu definieren. Sie kann dazu verwendet werden, abstrakte Datentypen und Schnittstellen zu spezifizieren, bevor die Implementierung beginnt. Implementierungsphase: In dieser Phase wird der Algorithmus für jede Methode entworfen und implementiert. Die Typisierung hilft, die Eingabeparameter und Rückgabewerte der Methoden zu spezifizieren und die Korrektheit der Implementierung zu überprüfen. Testphase: In dieser Phase wird das Programm getestet, um sicherzustellen, dass es korrekt funktioniert. Die Typisierung kann dazu verwendet werden, die Testfälle zu definieren und die Ergebnisse zu überprüfen. Implementierungsphase: In dieser Phase wird der Algorithmus für jede Methode definiert. Die Typisierung hilft, die Eingabeparameter und Rückgabewerte der Methoden zu spezifizieren, und sie kann auch verwendet werden, um die Konsistenz der Daten während der Ausführung des Programms zu gewährleisten. Implementierungsphase: Während der Implementierung hilft die Typisierung, sicherzustellen, dass Variablen und Funktionen korrekt verwendet werden. Compiler und Entwicklungsumgebungen können Typfehler frühzeitig erkennen und dem Entwickler Rückmeldungen geben. Testphase: Typisierung ermöglicht es, gezielte Tests durchzuführen, um sicherzustellen, dass das Programm die erwarteten Datentypen und Schnittstellen einhält. Wartungsphase: Bei der Wartung eines Programms kann die Typisierung dazu beitragen, Änderungen sicherer zu gestalten, da sie potenzielle Typfehler frühzeitig identifiziert. Dokumentation: Typinformationen dienen auch der Dokumentation des Codes, indem sie anderen Entwicklern helfen, den Code zu verstehen und korrekt zu verwenden.


Frage: Wozu dient die Typisierung in den verschiedenen Phasen des Programmentwicklungsprozesses?
Antwort: In der Entwurfsphase hilft die Typisierung, die Struktur des Programms zu definieren, indem sie abstrakte Datentypen und Schnittstellen spezifiziert. In der Implementierungsphase wird sie verwendet, um die Eingabeparameter und Rückgabewerte der Methoden zu spezifizieren und die Korrektheit der Implementierung zu überprüfen. In der Testphase kann die Typisierung dazu verwendet werden, die Testfälle zu definieren und die Ergebnisse zu überprüfen.

Frage: Wozu kann die Typisierung in der Entwurfsphase verwendet werden?
Antwort: In der Entwurfsphase kann die Typisierung dazu verwendet werden, abstrakte Datentypen und Schnittstellen zu spezifizieren, bevor die Implementierung beginnt.

Frage: Wozu kann die Typisierung in der Implementierungsphase verwendet werden?
Antwort: In der Implementierungsphase kann die Typisierung dazu verwendet werden, die richtigen Methoden für die richtigen Objekte aufzurufen.

Frage: Wozu kann die Typisierung in der Testphase verwendet werden?
Antwort: In der Testphase kann die Typisierung dazu verwendet werden, die Art der Daten zu überprüfen, die an Methoden übergeben werden.

Frage: Wozu kann die Typisierung in der Wartungsphase verwendet werden?
Antwort: In der Wartungsphase kann die Typisierung dazu verwendet werden, die Auswirkungen von Änderungen zu verstehen und zu kontrollieren.

Frage: Wie hilft die Typisierung während der Implementierungsphase?
Antwort: Die Typisierung hilft während der Implementierungsphase sicherzustellen, dass Variablen und Funktionen korrekt verwendet werden. Compiler und Entwicklungsumgebungen können Typfehler frühzeitig erkennen und dem Entwickler Rückmeldungen geben.

Frage: Was ist das Ziel von Typisierung in der Testphase?
Antwort: Das Ziel von Typisierung in der Testphase ist es, gezielte Tests durchzuführen, um sicherzustellen, dass das Programm die erwarteten Datentypen und Schnittstellen einhält.

Frage: Wie kann die Typisierung bei der Wartung eines Programms helfen?
Antwort: Die Typisierung kann bei der Wartung eines Programms dazu beitragen, Änderungen sicherer zu gestalten, da sie potenzielle Typfehler frühzeitig identifiziert.

Frage: Wozu dienen Typinformationen in der Dokumentation?
Antwort: Typinformationen in der Dokumentation helfen anderen Entwicklern, den Code zu verstehen und korrekt zu verwenden.

Zusammenfassend kann man sagen, dass Typisierung in der Softwareentwicklung eine wichtige Rolle spielt, um die Qualität, Sicherheit und Wartbarkeit von Programmen zu erhöhen. Sie ermöglicht es, Fehler frühzeitig zu erkennen, die Lesbarkeit des Codes zu verbessern und die Zusammenarbeit in größeren Entwicklungsprojekten zu erleichtern. Es gibt verschiedene Ansätze zur Typisierung, von dynamischer Typprüfung zur Laufzeit bis hin zu statischer Typprüfung während der Übersetzungsphase, und die Wahl des richtigen Typsystems hängt von den Anforderungen des jeweiligen Projekts ab.

Frage: Was ist der Zweck der Typisierung in der Softwareentwicklung?
Antwort: Der Zweck der Typisierung in der Softwareentwicklung ist es, die Qualität, Sicherheit und Wartbarkeit von Programmen zu erhöhen. Sie ermöglicht es, Fehler frühzeitig zu erkennen, die Lesbarkeit des Codes zu verbessern und die Zusammenarbeit in größeren Entwicklungsprojekten zu erleichtern.

Frage: Was sind die Vorteile von Typisierung in der Softwareentwicklung?
Antwort: Typisierung in der Softwareentwicklung erhöht die Qualität, Sicherheit und Wartbarkeit von Programmen, indem sie Fehler frühzeitig erkennt, die Lesbarkeit des Codes verbessert und die Zusammenarbeit in größeren Entwicklungsprojekten erleichtert.

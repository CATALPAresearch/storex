52 EIFFEL

EIFFEL nimmt unter den hier behandelten Sprachen eine Sonderstellung ein. Es soll nämlich mehrere Dinge auf einmal sein: eine Sprache für objektorientierte Analyse und Design, eine Sprache für kommerzielle Programmierung und eine akademische Lehrsprache.


Frage: Was ist die Sprache EIFFEL?
Antwort: EIFFEL ist eine Sprache, die für objektorientierte Analyse und Design, kommerzielle Programmierung und akademische Lehre verwendet wird.

Frage: Was ist die Sonderstellung von EIFFEL unter den hier behandelten Sprachen?
Antwort: EIFFEL ist eine Sprache für objektorientierte Analyse und Design, eine Sprache für kommerzielle Programmierung und eine akademische Lehrsprache.


Das herausragende Merkmal, das EIFFEL zu dieser Multifunktion qualifiziert, ist die Integration von Zusicherungen (die Formulierung von Vorbedingungen, Nachbedingungen und Klasseninvarianten), die als Verträge zwischen dienstanbietenden und dienstnehmenden Klassen interpretiert werden können. Dies erlaubt, das "Was" einer Software zumindest teilweise unabhängig vom "Wie" zu spezifizieren. Die Typsysteme, die Sie in den vorangegangenen Kapiteln kennengelernt haben und von denen auch EIFFEL eines besitzt, erlauben zwar auch schon, Zusicherungen auszudrücken, aber diese beziehen sich jeweils auf die möglichen Werte einer Variable und bleiben dabei sowohl voneinander als auch von der Zeit unabhängig. EIFFEL erlaubt darüber hinaus, nahezu beliebige Bedingungen für Variablen- und Rückgabewerte von Methoden auszudrücken, die sowohl auf andere Werte als auch auf den zeitlichen Verlauf (vorher/nachher) Bezug nehmen können.


Frage: Was ist die Besonderheit von EIFFEL?
Antwort: Die Besonderheit von EIFFEL ist die Integration von Zusicherungen, die als Verträge zwischen dienstanbietenden und dienstnehmenden Klassen interpretiert werden können. Diese erlauben, das "Was" einer Software zumindest teilweise unabhängig vom "Wie" zu spezifizieren. EIFFEL erlaubt darüber hinaus, nahezu beliebige Bedingungen für Variablen- und Rückgabewerte von Methoden auszudrücken, die sowohl auf andere Werte als auch auf den zeitlichen Verlauf (vorher/nachher) Bezug nehmen können.

Frage: Was ermöglicht EIFFEL im Vergleich zu anderen Typsystemen?
Antwort: EIFFEL ermöglicht es, nahezu beliebige Bedingungen für Variablen- und Rückgabewerte von Methoden auszudrücken, die sowohl auf andere Werte als auch auf den zeitlichen Verlauf (vorher/nachher) Bezug nehmen können. Im Gegensatz zu anderen Typsystemen, die sich jeweils auf die möglichen Werte einer Variablen beziehen und dabei voneinander und von der Zeit unabhängig bleiben.


EIFFEL tritt in vielerlei Hinsicht in die Fußstapfen von PASCAL: Es ist nicht nur syntaktisch ähnlich, sondern ist auch um Sparsamkeit, Klarheit und Orthogonalität der Konzepte bemüht. Viele Dinge sind in EIFFEL ein klein bisschen anders als in anderen Sprachen, weswegen man meinen könnte, es sei aus Prinzip anders; die meisten Abweichungen sind jedoch wohlbegründet und vermitteln mitunter eine angenehm andere Perspektive auf vertraute Dinge. So ist es eigentlich nur folgerichtig, dass der Erschaffer von EIFFEL, BERTRAND MEYER, Nachfolger von NIKLAUS WIRTH auf dessen Lehrstuhl an der ETH Zürich wurde.


Frage: Was ist EIFFEL?
Antwort: EIFFEL ist eine objektorientierte Programmiersprache, die um Sparsamkeit, Klarheit und Orthogonalität der Konzepte bemüht ist. Sie wurde von Bertrand Meyer entwickelt und ist syntaktisch ähnlich zu Pascal.

Frage: Wer ist der Erfinder der Programmiersprache EIFFEL?
Antwort: Der Erfinder der Programmiersprache EIFFEL ist Bertrand Meyer.


Es ist mir nicht ganz klar, warum EIFFEL kein größerer Erfolg beschieden ist. Es mag zum einen an der über Jahre absolut unzureichenden Implementierung der Werkzeuge liegen, insbesondere des Compilers. Anfangs wurde er noch nach C übersetzt, was beim Debuggen sicherlich keine Freude für Programmierende war. Zum anderen könnte es an der Natur von BERTRAND MEYER liegen, der sich mit seiner Kompromisslosigkeit nicht nur Freunde gemacht hat. Eine Rolle spielt sicherlich auch das unmögliche, aber trotzdem angestrebte Spagat zwischen kommerzieller Einsetzbarkeit und akademischer Eignung. Viele Programmierweisen, die in der Praxis üblich sind und auf die kaum eine Entwicklerin verzichten will, sind akademisch verpönt. Das Typsystem von EIFFEL trägt, wie Sie sich in Abschnitt 52.5 selbst vergewissern können, auch nicht unbedingt zur Akzeptanz bei. Auf der anderen Seite hat EIFFEL neben SMALLTALK noch am ehesten das Format und die Art, wie man über das Programmieren denkt, zu beeinflussen.


Frage: Warum ist EIFFEL kein größerer Erfolg beschieden?
Antwort: Es gibt mehrere Gründe, warum EIFFEL kein größerer Erfolg beschieden ist. Dazu gehören die anfänglich unzureichende Implementierung der Werkzeuge, insbesondere des Compilers, die Natur von Bertrand Meyer, der sich mit seiner Kompromisslosigkeit nicht nur Freunde gemacht hat, und der Spagat zwischen kommerzieller Einsetzbarkeit und akademischer Eignung. Zudem ist das Typsystem von EIFFEL nicht unbedingt zur Akzeptanz beigetragen. Trotzdem hat EIFFEL neben Smalltalk am ehesten das Format und die Art, wie man über das Programmieren denkt, beeinflusst.

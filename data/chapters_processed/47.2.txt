47.2 Exception Handling

Wie Sie bereits in den Anweisungen in Kapitel 38 gesehen haben, bietet Java ein sogenanntes Exception Handling. Beim Exception Handling handelt es sich um eine Möglichkeit, bei der Spezifikation des Kontrollflusses eines Programms zunächst mögliche Ausnahmesituationen und deren Behandlung unberücksichtigt zu lassen und so zu tun, als würde immer alles gutgehen. Da dies normalerweise der Fall sein sollte, erlaubt es sowohl der Autorin als auch dem Leser eines Programms, sich auf die Hauptfunktion zu konzentrieren, mit dem Motto "Zu den Ausnahmen kommen wir später!"


Frage: Was ist Exception Handling in Java?
Antwort: Exception Handling in Java ist eine Möglichkeit, bei der Spezifikation des Kontrollflusses eines Programms zunächst mögliche Ausnahmesituationen und deren Behandlung unberücksichtigt zu lassen und so zu tun, als würde immer alles gutgehen. Es erlaubt sowohl der Autorin als auch dem Leser eines Programms, sich auf die Hauptfunktion zu konzentrieren, mit dem Motto "Zu den Ausnahmen kommen wir später!".


Die möglichen Ausnahmesituationen eines Programms werden in Java in Klassen unterteilt, deren Instanzen jeweils eine konkrete Ausnahmesituation während des Programmablaufs repräsentieren. Wenn beispielsweise in einem Programm auf ein Element eines Arrays zugegriffen werden soll, dessen Index außerhalb der Grenzen des Arrays liegt, erzeugt die JVM, die über die Einhaltung der Array-Grenzen wacht, eine Instanz der Klasse ArrayIndexOutOfBoundsException und wirft diese. Das Werfen einer Exception (genauer gesagt, einer Instanz einer Exception-Klasse) bedeutet, dass der Programmablauf an der aktuellen Stelle unterbrochen und an der nächsten Stelle fortgesetzt wird, an der ein passender Exception Handler für den Typ der geworfenen Exception vorhanden ist. Dies erfordert, dass der Codeabschnitt, in dem die Exception auftreten kann, in einen Try-Catch-Block eingefasst wird.


Frage: Was ist eine Exception in Java?
Antwort: In Java sind Exceptions Instanzen von Klassen, die jeweils eine konkrete Ausnahmesituation während des Programmablaufs repräsentieren. Wenn eine Exception geworfen wird, wird der Programmablauf an der aktuellen Stelle unterbrochen und an der nächsten Stelle fortgesetzt, an der ein passender Exception Handler für den Typ der geworfenen Exception vorhanden ist.

Frage: Was ist der Zweck von Try-Catch-Blöcken in Java?
Antwort: Try-Catch-Blöcke in Java werden verwendet, um Ausnahmesituationen während des Programmablaufs abzufangen und zu behandeln. Der Codeabschnitt, in dem die Exception auftreten kann, wird in den Try-Block eingefasst, während der Catch-Block den Code enthält, der die Exception behandelt.

Frage: Was passiert, wenn eine Exception geworfen wird?
Antwort: Wenn eine Exception geworfen wird, wird der Programmablauf an der aktuellen Stelle unterbrochen und an der nächsten Stelle fortgesetzt, an der ein passender Exception Handler für den Typ der geworfenen Exception vorhanden ist. Der Codeabschnitt, in dem die Exception auftreten kann, muss in einen Try-Catch-Block eingefasst sein.


Wenn der Typ der geworfenen Exception nicht in einer der Catch-Klauseln aufgeführt ist, wird die Exception als unbehandelt betrachtet, und die nächst umgebende Klammer wird nach einer passenden Behandlung durchsucht. Wenn keine geeignete Behandlung gefunden wird, führt dies zu einem Programmabbruch mit einer entsprechenden Fehlermeldung ("Exception in thread ...").


Frage: Was passiert, wenn der Typ der geworfenen Exception nicht in einer der Catch-Klauseln aufgeführt ist?
Antwort: Wenn der Typ der geworfenen Exception nicht in einer der Catch-Klauseln aufgeführt ist, wird die Exception als unbehandelt betrachtet, und die nächst umgebende Klammer wird nach einer passenden Behandlung durchsucht. Wenn keine geeignete Behandlung gefunden wird, führt dies zu einem Programmabbruch mit einer entsprechenden Fehlermeldung ("Exception in thread ...").


Ausnahmesituationen können jedoch auch vom Programm selbst erkannt und gemeldet werden, indem die bereits erwähnte Throw-Anweisung verwendet wird, um eine entsprechende Exception-Klasse zu instanziieren. Dies ermöglicht es, die Verantwortung für die Behandlung von Ausnahmen von der virtuellen Maschine auf das Programm selbst zu verlagern.


Frage: Wie können Ausnahmesituationen in einem Programm erkannt und gemeldet werden?
Antwort: Ausnahmesituationen können durch die Verwendung der Throw-Anweisung erkannt und gemeldet werden, um die Verantwortung für die Behandlung von Ausnahmen von der virtuellen Maschine auf das Programm selbst zu verlagern.

Frage: Wie können Ausnahmesituationen in einem Programm behandelt werden?
Antwort: Ausnahmesituationen können vom Programm selbst erkannt und gemeldet werden, indem die Throw-Anweisung verwendet wird, um eine entsprechende Exception-Klasse zu instanziieren. Dies ermöglicht es, die Verantwortung für die Behandlung von Ausnahmen von der virtuellen Maschine auf das Programm selbst zu verlagern.

Frage: Was ermöglicht die Throw-Anweisung in Java?
Antwort: Die Throw-Anweisung in Java ermöglicht es, Ausnahmesituationen vom Programm selbst zu erkennen und eine entsprechende Exception-Klasse zu instanziieren, um die Verantwortung für die Behandlung von Ausnahmen von der virtuellen Maschine auf das Programm selbst zu verlagern.


Try-Catch-Anweisungen in Java werden, wie fast alle Anweisungen, im Körper von Methoden platziert. Wenn eine Methode eine bestimmte Exception wirft, ohne sie selbst abzufangen (d. h., wenn die Throw-Anweisung nicht innerhalb eines Try-Catch-Blocks verwendet wird, der eine passende Catch-Klausel enthält), muss die Methode dies deklarieren. Dies geschieht durch Hinzufügen einer Throws-Klausel zur Methodendeklaration.


Frage: Was ist der Zweck der Throws-Klausel in Java?
Antwort: Die Throws-Klausel in Java wird verwendet, um eine Methode zu deklarieren, dass sie eine bestimmte Exception wirft, ohne sie selbst abzufangen. Dies muss geschehen, wenn die Methode eine Exception wirft und kein passender Catch-Block vorhanden ist.


Eine Methode, die die obige Methode aufruft, muss den Aufruf entweder in einen Try-Catch-Block einschließen, der die erforderliche Catch-Klausel enthält, oder selbst deklarieren, dass sie die Exception behandelt oder weiterwirft.


Frage: Was ist ein Try-Catch-Block in der Programmierung?
Antwort: Ein Try-Catch-Block ist eine Programmstruktur, die eine Ausnahmebehandlung ermöglicht. Der Try-Block enthält den Code, der möglicherweise eine Ausnahme auslöst, während der Catch-Block den Code enthält, der die Ausnahme behandelt.

Frage: Was muss eine Methode tun, wenn sie eine Exception aufruft, die von einer anderen Methode geworfen wird?
Antwort: Eine Methode, die eine Exception aufruft, die von einer anderen Methode geworfen wird, muss den Aufruf entweder in einen Try-Catch-Block einschließen, der die erforderliche Catch-Klausel enthält, oder selbst deklarieren, dass sie die Exception behandelt oder weiterwirft.

Frage: Was muss eine Methode tun, wenn sie eine Exception aufruft, die sie nicht behandeln kann?
Antwort: Wenn eine Methode eine Exception aufruft, die sie nicht behandeln kann, muss sie diese Exception weiterwerfen oder sie in einem Try-Catch-Block einschließen, der die erforderliche Catch-Klausel enthält.


Diese Praxis kann zwar zu erheblichem Schreibaufwand führen, stellt jedoch die einzige Möglichkeit dar, sicherzustellen, dass die Programmierer sich der möglichen Ausnahmesituationen bewusst sind, ohne die Kontrollflussspezifikation übermäßig zu belasten. Exceptions, die eine Deklaration im Methodenkopf erfordern oder innerhalb der Methode behandelt werden müssen, werden als Checked Exceptions bezeichnet.


Frage: Was sind Checked Exceptions?
Antwort: Checked Exceptions sind Exceptions, die eine Deklaration im Methodenkopf erfordern oder innerhalb der Methode behandelt werden müssen. Diese Praxis kann zwar zu erheblichem Schreibaufwand führen, stellt jedoch sicher, dass die Programmierer sich der möglichen Ausnahmesituationen bewusst sind, ohne die Kontrollflussspezifikation übermäßig zu belasten.


Es gibt jedoch auch Exceptions, bei denen dies nicht erforderlich ist, die sogenannten Unchecked Exceptions. Im Gegensatz zu Checked Exceptions können Unchecked Exceptions in der Praxis überall auftreten. Ein prominentes Beispiel ist die "Out of Memory Exception", die auftritt, wenn eine Speicheranforderung des Programms von der JVM nicht erfüllt werden kann. Eine weitere häufige, aber programmatisch vermeidbare Exception ist die "Null Pointer Exception", die auftritt, wenn ein Ausdruck, auf dem auf ein Feld oder eine Methode zugegriffen wird, zu null ausgewertet wird. In dieselbe Kategorie fällt auch die "Array Index Out of Bounds Exception", die durch sorgfältiges Programmieren vermieden werden könnte, aber dennoch häufig vorkommt.


Frage: Was sind Unchecked Exceptions?
Antwort: Unchecked Exceptions sind Exceptions, die in der Praxis überall auftreten können und nicht explizit deklariert werden müssen. Einige Beispiele für Unchecked Exceptions sind "Out of Memory Exception", "Null Pointer Exception" und "Array Index Out of Bounds Exception".


Es wäre äußerst mühsam, jede Anweisung, bei der eine solche Exception auftreten könnte, mit einem Try-Catch-Block abzusichern. Daher gibt es in Java Exceptions, bei denen dies nicht erforderlich ist, die sogenannten Unchecked Exceptions. Die Unterscheidung, ob eine Exception als Checked oder Unchecked gilt, liegt nicht in der Hand der Programmiererin, die sie wirft, sondern erfolgt anhand der Vererbungshierarchie der Exception-Klassen. Alle Exceptions, die von der Klasse RuntimeException abgeleitet sind, werden per Definition als Unchecked betrachtet. RuntimeException selbst ist eine Subklasse der Klasse Exception, die wiederum eine Subklasse von Throwable ist. Throwable ist die Superklasse aller Klassen, die in Throw-Anweisungen, Catch-Zweigen und Throws-Klauseln verwendet werden dürfen. Mit RuntimeException wird also ein Zweig der Exception-Klassenhierarchie eingeleitet, dessen Elemente alle als Unchecked gelten.


Frage: Was sind Unchecked Exceptions in Java?
Antwort: Unchecked Exceptions in Java sind Exceptions, bei denen es nicht erforderlich ist, jede Anweisung, bei der eine solche Exception auftreten könnte, mit einem Try-Catch-Block abzusichern. Alle Exceptions, die von der Klasse RuntimeException abgeleitet sind, werden als Unchecked Exceptions betrachtet.


Neben Exception ist auch Error eine Subklasse von Throwable. Errors sollten jedoch nicht abgefangen werden und führen zu einem sofortigen Programmabbruch. Auslassungszeichen stehen für die Formulierung einer Invariante, wurde früher zur Emulation der mittlerweile vorhandenen Assert-Anweisung verwendet. Auch heute sollte man Errors eigentlich nur während der Testphase eines Programms einsetzen. Genauso wie Exceptions der Sorte RuntimeException sind Errors unchecked.


Frage: Was ist der Unterschied zwischen Exceptions und Errors in Java?
Antwort: Exceptions und Errors sind beides Unterklassen von Throwable, aber Errors sollten nicht abgefangen werden und führen zu einem sofortigen Programmabbruch. Exceptions sind checked und müssen abgefangen werden, während Errors unchecked sind und nicht abgefangen werden sollten. Auslassungszeichen in Java werden zur Formulierung einer Invariante verwendet und wurden früher zur Emulation der mittlerweile vorhandenen Assert-Anweisung verwendet. Auch heute sollte man Errors eigentlich nur während der Testphase eines Programms einsetzen.

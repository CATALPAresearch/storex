11.3 Löschen von Methoden

Wie bereits in Abschnitt 10.3 erwähnt, wird die Programmiererin, die eine abstrakte, weil unvollständige, Klasse instanziiert, irgendwann damit bestraft, dass das Versenden einer Nachricht an die entsprechende Instanz zu einer Fehlermeldung führt, die ihr (per subclassResponsibility oder implementedBySubclass, die, genau wie doesNotUnderstand:, in der Klasse Object definiert ist) anzeigt, dass die Methode (erst) in einer Subklasse implementiert werden sollte. Dummerweise bekommt die Programmiererin diesen Hinweis erst zur Laufzeit des Programms zu Gesicht, also dann, wenn es schon zu spät ist (es sei denn, man testet gerade). Man erkennt hieran sehr schön den interaktiven Geist des SMALLTALK-Systems, insbesondere die Philosophie, nach der Programmieren nichts weiter ist als das iterative Zurechtbiegen und Erweitern eines bereits bestehenden, funktionierenden Systems. Man muss eine Weile damit gespielt haben, um diesem Charme zu erliegen.


Frage: Was ist die Philosophie des SMALLTALK-Systems?
Antwort: Die Philosophie des SMALLTALK-Systems ist, dass Programmieren nichts weiter ist als das iterative Zurechtbiegen und Erweitern eines bereits bestehenden, funktionierenden Systems. Diese Philosophie spiegelt sich in der Interaktivität des SMALLTALK-Systems wider.

Frage: Was passiert, wenn eine Programmiererin eine abstrakte Klasse instanziiert und eine Nachricht an die entsprechende Instanz sendet?
Antwort: Wenn eine Programmiererin eine abstrakte Klasse instanziiert und eine Nachricht an die entsprechende Instanz sendet, führt dies zu einer Fehlermeldung, die ihr anzeigt, dass die Methode (erst) in einer Subklasse implementiert werden sollte. Diese Fehlermeldung bekommt die Programmiererin allerdings erst zur Laufzeit des Programms zu Gesicht, was bedeutet, dass sie das Problem erst bemerkt, wenn es bereits zu spät ist.

Frage: Was ist der interaktive Geist des SMALLTALK-Systems?
Antwort: Der interaktive Geist des SMALLTALK-Systems liegt in der Philosophie, nach der Programmieren nichts weiter ist als das iterative Zurechtbiegen und Erweitern eines bereits bestehenden, funktionierenden Systems. Diese Philosophie ermöglicht es, dass Fehlermeldungen erst zur Laufzeit des Programms auftreten, was die Programmiererin dazu zwingt, das System interaktiv zu testen und zu erweitern.


Wenn man sich erst einmal damit abgefunden hat, dass man als Programmiererin Methoden schreibt, die ausschließlich dem Zweck dienen, sich selbst oder eine Kollegin auf Programmierfehler hinzuweisen, dann erscheint einem eine weitere SMALLTALK-Konvention geradezu als elegant, nämlich die, geerbte Methoden durch Überschreiben auszulöschen. Tatsächlich ist genau hierfür eine weitere Methode in der Klasse Object mit dem Namen „shouldNotImplement“ vorgesehen, die zu einer entsprechenden Fehlermeldung führt. Eine Klasse, die also eine geerbte Methode löschen möchte, überschreibt diese einfach mit shouldNotImplement. Bevor Sie jetzt als disziplinierte Programmiererin den Stab über SMALLTALK brechen, erlauben Sie noch den Hinweis, dass der Wunsch, geerbte Methoden zu löschen, eine direkte Folge der vorrangigen Orientierung an Vererbung ist, die bereits oben kritisiert wurde: Wäre die Superklasse auf Grundlage des Prinzips der Generalisierung ausgewählt worden, käme man gar nicht in die Verlegenheit, Methoden löschen zu wollen, denn alles, was für die Generalisierung sinnvoll ist, ist grundsätzlich auch für ihre Spezialisierungen sinnvoll, oder die Generalisierung ist keine Generalisierung. Außerdem haben Sie auch in Sprachen mit starker Typprüfung, in denen das Löschen von Methoden nicht möglich ist, als Programmiererin immer die Freiheit, eine Methode so zu überschreiben, dass sie garantiert nichts tut, was mit der Idee der Klasse, von der sie geerbt ist, in Einklang zu bringen wäre. Auch hier wäre ein Laufzeitfehler die unvermeidbare Folge. Mehr dazu in Kurseinheit 3; hier sei nur so viel bemerkt wie, dass wenn man sich bei der Organisation seiner Klassenhierarchie auf das Prinzip der Generalisierung stützt, man dann auch nicht in die Verlegenheit kommt, Methoden löschen zu wollen.


Frage: Wozu dient die Methode "shouldNotImplement" in Smalltalk?
Antwort: Die Methode "shouldNotImplement" in Smalltalk dient dazu, geerbte Methoden durch Überschreiben auszulöschen und eine entsprechende Fehlermeldung zu erzeugen.

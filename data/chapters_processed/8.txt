8 Metaklassen

Da in SMALLTALK auch eine Klasse ein Objekt ist, kann die Klasse selbst, genau wie alle anderen Objekte, Instanzvariablen und -methoden haben. Aber wo werden diese definiert? Der Analogie der Objekte, die Instanzen der Klasse sind, folgend müsste das in der jeweiligen Klasse der Klasse, also der Klasse, von der die Klasse (als Objekt) eine Instanz ist, erfolgen. Und so ist es tatsächlich auch.


Frage: Wo werden Instanzvariablen und -methoden von Klassen definiert?
Antwort: Da in SMALLTALK auch eine Klasse ein Objekt ist, kann die Klasse selbst, genau wie alle anderen Objekte, Instanzvariablen und -methoden haben. Diese werden in der jeweiligen Klasse der Klasse, also der Klasse, von der die Klasse (als Objekt) eine Instanz ist, definiert.


Zunächst könnte man annehmen, dass alle Klassen Instanzen einer speziellen Klasse, nennen wir sie "Class", sind. Jede Klasse hätte dann (als Instanz dieser Klasse) die Instanzvariablen und Methoden, die in "Class" definiert sind. Insbesondere hätte jede Klasse dieselbe Menge von Instanzvariablen und Methoden. Dies scheint zunächst auch sinnvoll, denn bei den Klassen handelt es sich ja um Objekte derselben Art, nämlich einheitlich um Klassen.


Frage: Warum sind Klassen keine Instanzen einer speziellen Klasse "Class"?
Antwort: Wenn Klassen Instanzen einer speziellen Klasse "Class" wären, hätten sie dieselbe Menge von Instanzvariablen und Methoden. Das würde aber bedeuten, dass alle Klassen gleich wären, was nicht der Fall ist. Jede Klasse hat ihre eigene, einzigartige Menge von Instanzvariablen und Methoden. Deshalb sind Klassen keine Instanzen einer speziellen Klasse "Class".

Frage: Was wäre die Folge davon, wenn jede Klasse Instanzen einer speziellen Klasse "Class" wäre?
Antwort: Wenn jede Klasse Instanzen einer speziellen Klasse "Class" wäre, hätten alle Klassen dieselbe Menge von Instanzvariablen und Methoden. Das würde bedeuten, dass alle Klassen gleich wären, was aber nicht der Fall ist. Daher ist es notwendig, dass jede Klasse ihre eigenen Instanzvariablen und Methoden hat.

Frage: Warum hätte jede Klasse dieselbe Menge von Instanzvariablen und Methoden, wenn sie Instanzen einer speziellen Klasse "Class" wären?
Antwort: Wenn jede Klasse Instanzen einer speziellen Klasse "Class" wäre, hätte jede Klasse dieselbe Menge von Instanzvariablen und Methoden, weil sie alle Instanzen derselben Klasse sind und somit dieselben Attribute und Methoden haben sollten.


Es stellt sich dann die Frage, welche Instanzvariablen und Methoden alle Klassen gleichermaßen charakterisieren könnten. Es könnte z. B. jede Klasse eine Instanzvariable haben, die alle von der Klasse instanziierten Objekte enthält, sowie eine weitere, die diese Objekte zählt. Eine typische Methode jeder Klasse wäre z. B. "new", die eine neue Instanz dieser Klasse zurückgibt. Was aber, wenn man weitere Eigenschaften (Instanzvariablen oder Methoden) für eine Klasse haben möchte, die diese nicht mit allen anderen teilt? Was, wenn man eine Methode wie z. B. "new" für eine Klasse anders definieren will als für andere? Im Fall von "new" z. B. ist es denkbar, dass man sie für bestimmte Klassen so umschreiben möchte, dass die Instanzvariablen der neu erzeugten Instanzen bestimmte Startwerte zugewiesen bekommen (so wie es beim Beispiel mit "Stack" oben der Fall wäre).


Frage: Wozu können Instanzvariablen und Methoden in einer Klasse dienen?
Antwort: Instanzvariablen und Methoden in einer Klasse können dazu dienen, alle von der Klasse instanziierten Objekte zu enthalten, diese Objekte zu zählen, eine neue Instanz der Klasse zurückzugeben, bestimmte Startwerte zu Instanzvariablen neuer Instanzen zuzuweisen oder weitere Eigenschaften zu definieren, die die Klasse nicht mit allen anderen teilt.

Frage: Was könnte man tun, wenn man weitere Eigenschaften für eine Klasse haben möchte, die diese nicht mit allen anderen teilt?
Antwort: In diesem Fall kann man eine Unterklasse erstellen, die die gewünschten Eigenschaften besitzt.

Frage: Was könnte man tun, wenn man eine Methode wie z.B. "new" für eine Klasse anders definieren will als für andere?
Antwort: In diesem Fall kann man eine Unterklasse erstellen und die Methode "new" in der Unterklasse anders definieren.

Frage: Warum kann es sinnvoll sein, eine Methode wie "new" für bestimmte Klassen anders zu definieren?
Antwort: Es kann sinnvoll sein, eine Methode wie "new" für bestimmte Klassen anders zu definieren, um die Instanzvariablen der neu erzeugten Instanzen bestimmte Startwerte zuzuweisen oder um das Verhalten der Methode an die Anforderungen der Klasse anzupassen.


Tatsächlich hat die Programmierpraxis gezeigt, dass es günstig ist, wenn jede Klasse (als Instanz) ihre eigenen Instanzvariablen und Methoden besitzt und wenn die Programmiererin diese jeweils frei bestimmen kann, ohne dabei gleichzeitig an andere Klassen denken zu müssen. Um dies zu ermöglichen, muss aber jede Klasse Instanz einer eigenen Klasse sein, in der diese Variablen und Methoden nur für sie angelegt werden können. Und genau das ist in SMALLTALK der Fall.


Frage: Was ist der Zweck von Klassen in SMALLTALK?
Antwort: In SMALLTALK hat jede Klasse Instanz ihre eigenen Instanzvariablen und Methoden, die nur für sie angelegt werden können. Dies ermöglicht eine Programmierpraxis, bei der jede Klasse ihre eigenen Instanzvariablen und Methoden besitzt und die Programmiererin diese frei bestimmen kann, ohne dabei an andere Klassen denken zu müssen.

Frage: Was ermöglicht es in Smalltalk, dass jede Klasse ihre eigenen Instanzvariablen und Methoden besitzt?
Antwort: In Smalltalk kann jede Klasse Instanz einer eigenen Klasse sein, in der diese Variablen und Methoden nur für sie angelegt werden können, da jede Klasse Instanz einer eigenen Klasse ist.

Frage: Warum ist es günstig, wenn jede Klasse ihre eigenen Instanzvariablen und Methoden besitzt?
Antwort: Es ist günstig, wenn jede Klasse ihre eigenen Instanzvariablen und Methoden besitzt, weil es die Programmiererin ermöglicht, diese frei zu bestimmen, ohne dabei an andere Klassen denken zu müssen. Dies führt zu einer besseren Kapselung und Modularität des Codes.


Zu jeder Klasse des SMALLTALK-Systems gehört nämlich genau eine Klasse, von der erstere (und nur diese) eine Instanz ist. Diese zweite Klasse wird Metaklasse der ersten genannt. Da eine 1-zu-1-Beziehung zwischen Klassen und ihren Metaklassen besteht, ist es nicht sinnvoll, ihre Benennung den Programmiererinnen zu überlassen; sie wird in SMALLTALK stets durch den Ausdruck "<Klassenname> class", also beispielsweise "Stack class", bezeichnet. Daraus folgt bereits, dass die Programmiererin die Metaklasse nicht selbst anlegen muss (denn dabei müsste sie ja auch einen Namen vergeben) — sie wird vielmehr automatisch mit angelegt, wenn die Programmiererin eine neue Klasse definiert.


Frage: Was ist eine Metaklasse in SMALLTALK?
Antwort: In SMALLTALK ist eine Metaklasse eine Klasse, die genau einer Klasse zugeordnet ist und von der diese Instanz ist. Die Benennung der Metaklasse erfolgt automatisch durch den Ausdruck "<Klassenname> class". Die Programmiererin muss die Metaklasse nicht selbst anlegen, sie wird automatisch mit angelegt, wenn eine neue Klasse definiert wird.


Im Prinzip ist die Definition einer Metaklasse genauso aufgebaut wie die einer normalen Klasse: Sie besteht aus der Angabe einer Menge von benannten Instanzvariablen und einer Menge von Instanzmethodendefinitionen. Lediglich indizierte Instanzvariablen sind nicht vorgesehen, und der Klassenname kann wie gesagt nicht frei angegeben werden.


Frage: Wie ist die Definition einer Metaklasse aufgebaut?
Antwort: Die Definition einer Metaklasse ist ähnlich wie die einer normalen Klasse aufgebaut, bestehend aus benannten Instanzvariablen und Instanzmethodendefinitionen. Der Klassenname kann jedoch nicht frei angegeben werden. Indizierte Instanzvariablen sind nicht vorgesehen.

Frage: Was ist der Unterschied zwischen einer Metaklasse und einer normalen Klasse?
Antwort: Der Unterschied zwischen einer Metaklasse und einer normalen Klasse besteht darin, dass Metaklassen keine indizierten Instanzvariablen enthalten dürfen und der Klassenname nicht frei angegeben werden kann.

Frage: Was ist eine Instanz?
Antwort: Eine Instanz ist ein konkretes Exemplar einer Klasse.

Frage: Was ist eine explizite Zuweisung?
Antwort: Eine explizite Zuweisung ist eine Zuweisung, die durch den Zuweisungsoperator vorgenommen wird.

Frage: Was ist eine implizite Zuweisung?
Antwort: Eine implizite Zuweisung ist eine Zuweisung, die bei Methodenaufrufen vorgenommen wird.


Für die Implementierung der Methode "new" fehlt uns noch etwas; sie wird im nächsten Abschnitt nachgeliefert. Hier ist wichtig, dass Sie verstehen, dass "new" eine Instanzmethode der Metaklasse "Stack class" ist und damit das Verhalten der Klasse "Stack" bestimmt und nicht ihrer Objekte.


Frage: Was ist die Methode "new"?
Antwort: Die Methode "new" ist eine Instanzmethode der Metaklasse "Stack class" und bestimmt das Verhalten der Klasse "Stack" und nicht ihrer Objekte. Die Implementierung der Methode "new" fehlt noch und wird im nächsten Abschnitt nachgeliefert.


Aufgrund der bestehenden 1-zu-1-Beziehung zwischen Klassen und Metaklassen werden diese in SMALLTALK nicht getrennt voneinander definiert, sondern in einem gemeinsamen Schema. Jede Klassendefinition verfügt demnach neben den Abschnitten zur Deklaration der Instanzvariablen und zur Definition der Methoden auch noch über zwei Abschnitte für die entsprechenden Angaben zur ihrer Metaklasse, die Angabe der sogenannten Klassenvariablen und -methoden: Es sind dies die Variablen bzw. Methoden, die den Klassen als Instanzen ihrer Metaklassen zugeordnet sind.


Frage: Wie ist das Verhältnis von Klassen und Metaklassen in SMALLTALK?
Antwort: Aufgrund der bestehenden 1-zu-1-Beziehung zwischen Klassen und Metaklassen werden diese in SMALLTALK nicht getrennt voneinander definiert, sondern in einem gemeinsamen Schema. Jede Klassendefinition verfügt demnach neben den Abschnitten zur Deklaration der Instanzvariablen und zur Definition der Methoden auch noch über zwei Abschnitte für die entsprechenden Angaben zur ihrer Metaklasse, die Angabe der sogenannten Klassenvariablen und -methoden.

Frage: Was ist die Beziehung zwischen Klassen und Metaklassen in Smalltalk?
Antwort: In Smalltalk besteht eine 1-zu-1-Beziehung zwischen Klassen und Metaklassen, die nicht getrennt voneinander definiert werden, sondern in einem gemeinsamen Schema. Jede Klassendefinition verfügt über Abschnitte für die Deklaration der Instanzvariablen, Definition der Methoden, Angabe der Klassenvariablen und -methoden.

Frage: Was sind Klassenvariablen und Klassenmethoden in Smalltalk?
Antwort: Klassenvariablen und Klassenmethoden sind Variablen und Methoden, die den Klassen als Instanzen ihrer Metaklassen zugeordnet sind. Sie werden in den Abschnitten für die entsprechenden Angaben zur Metaklasse in einer Klassendefinition definiert.


Klassenvariablen sind übrigens relativ zu den Instanzen der Klassen global; sie beginnen deswegen mit einem Großbuchstaben. Klassenmethoden schreibt man jedoch wie Instanzmethoden klein. Beachten Sie, dass Klassenvariablen nur einmal pro Klasse angelegt werden — sie sind also für alle Instanzen einer Klasse dieselben.


Frage: Was sind Klassenvariablen und wie werden sie geschrieben?
Antwort: Klassenvariablen sind Variablen, die relativ zu den Instanzen der Klassen global sind und deshalb mit einem Großbuchstaben beginnen. Im Gegensatz dazu werden Klassenmethoden wie Instanzmethoden klein geschrieben. Klassenvariablen werden nur einmal pro Klasse angelegt und sind deshalb für alle Instanzen einer Klasse dieselben.

Frage: Was sind Klassenvariablen und wie werden Klassenmethoden geschrieben?
Antwort: Klassenvariablen sind Variablen, die für alle Instanzen einer Klasse dieselben sind und mit einem Großbuchstaben beginnen. Klassenmethoden hingegen werden wie Instanzmethoden klein geschrieben.


Ein Beispiel für eine Klassenvariable ist "Dependents Fields" in der Klasse "Object" (zu ihrer Verwendung s. Abschnitt 14.3), eins für eine Klassenmethode ist "pi" in der Klasse "Float":


Frage: Was sind Klassenvariablen und Klassenmethoden?
Antwort: Klassenvariablen und Klassenmethoden sind Variablen und Methoden, die allen Instanzen einer Klasse gemeinsam sind. Klassenvariablen werden mit einem Doppelpunkt und dem Klassennamen deklariert, Klassenmethoden mit einem Pluszeichen und dem Klassennamen. Sie können von allen Instanzen der Klasse aus aufgerufen werden. Ein Beispiel für eine Klassenvariable ist "Dependents Fields" in der Klasse "Object", eins für eine Klassenmethode ist "pi" in der Klasse "Float".


Sie retourniert (den Inhalt der) Klassenvariable "Pi" und ist, da sie eine Klassenmethode ist, allen Instanzen der Klasse "Float" zugeordnet. Dazu, wie der Wert in "Pi" hineinkommt, s. Abschnitt 8.2.

Frage: Was ist eine Klassenvariable?
Antwort: Eine Klassenvariable ist eine Variable, die einer Klasse gehört und allen Instanzen dieser Klasse gemeinsam ist. In diesem Fall gehört die Klassenvariable "Pi" der Klasse "Float" und ist allen Instanzen dieser Klasse zugeordnet.

Frage: Was ist eine Klassenvariable und wie wird ihr Wert zugeordnet?
Antwort: Eine Klassenvariable ist eine Variable, die einer Klasse gehört und nicht den Instanzen der Klasse. Ihr Wert wird zugeordnet, indem er in den Abschnitt 8.2 geschrieben wird. Die Klassenvariable "Pi" wird in der Klassenmethode "pi" zurückgegeben.

Frage: Was macht die Instanzmethode "printOn:"?
Antwort: Die Instanzmethode "printOn:" ist eine Methode, die jedem Objekt zugeordnet ist und aufgerufen wird, wenn ein Objekt ausgegeben werden soll, z.B. im Rahmen einer Fehlermeldung.

Frage: Was macht die Klassenmethode "new"?
Antwort: Die Klassenmethode "new" ist eine Methode, die jedem Objekt zugeordnet ist und aufgerufen wird, wenn ein neues Objekt erzeugt werden soll.

Frage: Was macht die Instanzmethode "+", wenn sie aufgerufen wird?
Antwort: Die Instanzmethode "+" ist eine Methode, die jedem Objekt zugeordnet ist und aufgerufen wird, wenn zwei Objekte addiert werden sollen.


Wir sehen also, dass die Bezeichnungen Klassenvariable bzw. -methode und Instanzvariable bzw. -methode eigentlich nur relative Bedeutung haben, da es sich in beiden Fällen um Variablen und Methoden handelt, die Objekten zugeordnet sind. Da man von Instanzen einer Klasse aus aber auch häufiger auf die Variablen und Methoden ihrer Klassen zugreift, ist es guter Brauch (und vermeidet umständliche Formulierungen), stets die längeren Bezeichnungen zu führen. Zudem gibt es neben Instanz- und Klassenvariablen ja auch noch andere Variabletypen (formale Parameter und temporäre Variablen), so dass die Verwendung von „Variable“ allein meist mehrdeutig wäre. Lediglich bei Methoden hat es sich eingebürgert, anstelle von Instanzmethoden nur von Methoden zu sprechen. Wenn der Kontext nichts anderes nahelegt, können Sie dann immer davon ausgehen, dass Instanzmethoden gemeint sind.


Frage: Was ist der Unterschied zwischen Instanzvariablen und Klassenvariablen?
Antwort: Der Unterschied zwischen Instanzvariablen und Klassenvariablen liegt darin, dass Instanzvariablen jeweils zu einer Instanz gehören, während Klassenvariablen zu einer Klasse gehören. Das bedeutet, dass jede Instanz einer Klasse ihre eigenen Werte für die Instanzvariablen hat, während alle Instanzen einer Klasse die gleichen Werte für die Klassenvariablen teilen.

1.3 Änderbarkeit von Objekten

Während atomare Objekte grundsätzlich nicht veränderbar sind (welchen Sinn hätte es beispielsweise, aus einer "1" eine "2" zu machen oder aus einem "a" ein "b"?), gilt das zunächst nicht für zusammengesetzte Objekte. Es ist leicht vorstellbar (und auch grundsätzlich sinnvoll), in einem Array-Objekt eine Komponente durch eine andere zu ersetzen. Die Frage ist jedoch, ob dies auch für Array-Objekte gilt, die aus Literalen erzeugt wurden. Soll es erlaubt sein, dass das zusammengesetzte Objekt, das aus dem Array-Literal #(1 2 3) hervorgegangen ist, durch ein Programm so verändert wird, dass es nicht mehr seiner (ursprünglichen) literalen Repräsentation im Programm entspricht? Dies ist Ansichtssache und wird zumindest für String- und Array-Literale von verschiedenen SMALLTALK-Dialekten unterschiedlich gehandhabt. Objekte, die aus Symbolliteralen hervorgegangen sind, sollten dagegen nie veränderbar sein.
Grundsätzlich sind zusammengesetzte Objekte in SMALLTALK jedoch veränderbar. Dies ist eine Voraussetzung dafür, dass Objekte einen Zustand haben können (siehe Kapitel 3), was wiederum die objektorientierte Programmierung zu einer Form der imperativen Programmierung macht. Aufgrund zunehmender funktionaler Einflüsse auf die objektorientierte Programmierung findet man jedoch auch immer mehr Sprachen, die unveränderliche Objekte anbieten, wie beispielsweise SCALA.

Frage: Warum sind atomare Objekte grundsätzlich nicht veränderbar?
Antwort: Atomare Objekte sind grundsätzlich nicht veränderbar, da es keinen Sinn ergibt, sie zu verändern. Zum Beispiel macht es keinen Sinn, aus einer "1" eine "2" zu machen.

Frage: Warum könnten zusammengesetzte Objekte wie Arrays veränderbar sein?
Antwort: Zusammengesetzte Objekte wie Arrays könnten veränderbar sein, da es sinnvoll sein kann, in einem Array-Objekt eine Komponente durch eine andere zu ersetzen.

Frage: Gilt die Veränderbarkeit von Array-Objekten auch für solche, die aus Literalen erzeugt wurden?
Antwort: Die Frage, ob Array-Objekte, die aus Literalen erzeugt wurden, veränderbar sein sollen, ist ansichtssache und wird von verschiedenen SMALLTALK-Dialekten unterschiedlich gehandhabt.

Frage: Warum sollten Objekte, die aus Symbolliteralen hervorgegangen sind, nie veränderbar sein?
Antwort: Objekte, die aus Symbolliteralen hervorgegangen sind, sollten nie veränderbar sein, um sicherzustellen, dass syntaktisch identische Zeichenketten stets dasselbe Objekt bezeichnen.

Frage: Warum sind zusammengesetzte Objekte in SMALLTALK grundsätzlich veränderbar?
Antwort: Zusammengesetzte Objekte sind in SMALLTALK grundsätzlich veränderbar, da dies eine Voraussetzung dafür ist, dass Objekte einen Zustand haben können, was wiederum die objektorientierte Programmierung zu einer Form der imperativen Programmierung macht.

Frage: Welche Einflüsse führen dazu, dass immer mehr Sprachen unveränderliche Objekte anbieten?
Antwort: Immer mehr Sprachen bieten unveränderliche Objekte an aufgrund zunehmender funktionaler Einflüsse auf die objektorientierte Programmierung, wie beispielsweise SCALA.
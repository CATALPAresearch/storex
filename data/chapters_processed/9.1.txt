9.1 Generalisierung

Wie bereits zu Beginn erwähnt (in Abschnitt 7.1), entspricht die Klassifikation sprachlich der "Ist-ein-Abstraktionsbeziehung" zwischen Individuen und ihren Klassen: "Peter ist ein Mensch," "SMALLTALK ist eine Programmiersprache," usw. sind alles Beispiele für eine Art der Abstraktion, bei der man von einem Individuum zu seinem Allgemeinbegriff übergeht. Es gibt jedoch eine zweite Form der Ist-ein-Abstraktion, die sich von der ersten grundlegend unterscheidet, aber ebenfalls eine charakteristische Rolle in der objektorientierten Programmierung spielt: die Generalisierung. Sprachlich zeigt sich diese Form in Sätzen wie "Ein Mensch ist ein Säugetier," "Ein Säugetier ist ein Lebewesen" oder "Eine Programmiersprache ist ein Werkzeug." Der Unterschied zur ersten Form der Abstraktion liegt offensichtlich darin, dass hier zwei Allgemeinbegriffe miteinander in Beziehung gesetzt werden, anstelle eines Individuums und eines Allgemeinbegriffs. Ein weiterer, etwas subtilerer, aber sehr wesentlicher Unterschied besteht darin, dass die Klassifikation nicht transitiv ist, während die Generalisierung es ist. So ergibt sich aus "Ein Mensch ist ein Säugetier" und "Ein Säugetier ist ein Lebewesen" logischerweise "Ein Mensch ist ein Lebewesen," aber aus "Peter ist ein Mensch" und "Mensch ist eine Art" ergibt sich nicht "Peter ist eine Art."


Frage: Was ist die Unterscheidung zwischen Klassifikation und Generalisierung in der objektorientierten Programmierung?
Antwort: Klassifikation ist eine Form der Ist-ein-Abstraktion, bei der man von einem Individuum zu seinem Allgemeinbegriff übergeht, während Generalisierung zwei Allgemeinbegriffe miteinander in Beziehung setzt. Ein weiterer Unterschied besteht darin, dass die Klassifikation nicht transitiv ist, während die Generalisierung es ist.


Im Prozess der Generalisierung werden mehrere Klassen, deren Definitionen inhaltlich verwandt sind, zusammengefasst. Das Ergebnis dieser Generalisierung, auch als Generalisierungsklasse bezeichnet, enthält nur diejenigen Elemente der Definitionen der generalisierten Klassen, die allen gemeinsam sind. So lässt sich beispielsweise aus den beiden ähnlichen, aber nicht identischen Klassen Mensch und Vogel per Generalisierung die Klasse Zweibeiner herausarbeiten. Diese Klasse Zweibeiner enthält die gemeinsamen Eigenschaften (Instanzvariablen und Methoden) der Klassen Mensch und Vogel.


Frage: Was ist Generalisierung in der objektorientierten Programmierung?
Antwort: Generalisierung ist ein Prozess in der objektorientierten Programmierung, bei dem mehrere Klassen, deren Definitionen inhaltlich verwandt sind, zusammengefasst werden. Das Ergebnis dieser Generalisierung, auch als Generalisierungsklasse bezeichnet, enthält nur diejenigen Elemente der Definitionen der generalisierten Klassen, die allen gemeinsam sind.


Da die Eigenschaften, die einer Generalisierung als Klasse zugeordnet sind, per Definition automatisch auch für alle Klassen gelten, von denen die Generalisierung abstrahiert (denn das war ja die Bedingung für die Konstruktion der Generalisierung), müssen diese Klassen die Eigenschaften nicht wiederholen, sondern nur auf ihre Generalisierung verweisen. Diese Klassen müssen dann nur noch die Unterschiede definieren, die sie von der Klasse Zweibeiner sowie voneinander unterscheiden.


Frage: Was ist die Funktion von Generalisierungen in der objektorientierten Programmierung?
Antwort: Die Funktion von Generalisierungen in der objektorientierten Programmierung ist es, Eigenschaften zu definieren, die automatisch auch für alle Klassen gelten, von denen die Generalisierung abstrahiert. Diese Klassen müssen dann nur noch die Unterschiede definieren, die sie von der Generalisierung und voneinander unterscheiden.

Frage: Was ist die Aufgabe der Klassen, die von einer Generalisierung abstrahiert?
Antwort: Die Aufgabe der Klassen, die von einer Generalisierung abstrahiert, ist es, nur noch die Unterschiede zu definieren, die sie von der Generalisierung und voneinander unterscheiden. Sie müssen nicht die Eigenschaften wiederholen, die der Generalisierung zugeordnet sind, da diese per Definition automatisch auch für sie gelten.


Diese zweite Form der Abstraktion, die Generalisierung, ist also genau wie die Klassifikation Bestandteil der klassenbasierten objektorientierten Programmierung. Anders als bei der Klassifikation ist bei der Generalisierung jedoch die Höhe der Abstraktionshierarchie nicht durch praktische Überlegungen beschränkt, sondern kann von der Programmiererin nach Belieben festgelegt werden. Sprachphilosophisch betrachtet sind Generalisierungen ebenfalls Allgemeinbegriffe, nur noch allgemeiner. Generalisierungen können selbst wiederum Generalisierungen haben, und so weiter. Wie es für eine Abstraktionshierarchie typisch ist, werden die Definitionen, die Intensionen, dabei immer präziser. Gleichzeitig wächst jedoch die Extension (das bereits in Abschnitt 7.1 erwähnte Prinzip vom inversen Zusammenhang der beiden).


Frage: Was ist Generalisierung in der objektorientierten Programmierung?
Antwort: Generalisierung ist eine Form der Abstraktion in der objektorientierten Programmierung, die Bestandteil der klassenbasierten objektorientierten Programmierung ist. Im Gegensatz zur Klassifikation ist bei der Generalisierung die Höhe der Abstraktionshierarchie nicht beschränkt und kann von der Programmiererin festgelegt werden. Generalisierungen können selbst wiederum Generalisierungen haben, wodurch eine Abstraktionshierarchie entsteht.

Frage: Was ist der Unterschied zwischen Generalisierung und Klassifikation in der objektorientierten Programmierung?
Antwort: Im Gegensatz zur Klassifikation, die durch praktische Überlegungen beschränkt ist, kann die Höhe der Abstraktionshierarchie bei der Generalisierung von der Programmiererin nach Belieben festgelegt werden. Sprachphilosophisch betrachtet sind Generalisierungen ebenfalls Allgemeinbegriffe, nur noch allgemeiner. Generalisierungen können selbst wiederum Generalisierungen haben, und so weiter. Wie es für eine Abstraktionshierarchie typisch ist, werden die Definitionen, die Intensionen, dabei immer präziser. Gleichzeitig wächst jedoch die Extension (das bereits in Abschnitt 7.1 erwähnte Prinzip vom inversen Zusammenhang der beiden).


Übrigens stammt das Prinzip der Generalisierung von Aristoteles' Prinzip von Genus et differentia ab, das gemeinsame Abstammung und Unterschiede betrifft. Das Genus ist die nächst allgemeinere Kategorie, unter die die Objekte der zu generalisierenden Klassen (der Spezies) fallen, und die Differentia sind die Kriterien, anhand derer sich die Objekte aufgrund ihrer Natur unterscheiden, wie sie in den verschiedenen Klassendefinitionen festgelegt sind (und nicht etwa durch spezielle Werte von Instanzvariablen). So haben die Klassen Mensch und Vogel beispielsweise das gemeinsame Genus Zweibeiner als (biologisch nicht ganz korrekte) Generalisierung, in der festgelegt ist, dass alle Exemplare von Zweibeinern (und damit auch von Menschen und Vögeln) ein linkes und ein rechtes Bein sowie einen Aufenthaltsort haben. Die Unterschiede (Differentia) sind dann in den jeweiligen Klassen ausgearbeitet. Beachten Sie, dass Genera keine eigenen Individuen haben, das heißt, es gibt keine Zweibeiner, die nicht entweder Mensch oder Vogel sind.


Frage: Was ist das Prinzip der Generalisierung?
Antwort: Das Prinzip der Generalisierung ist ein Konzept, das auf Aristoteles' Prinzip von Genus et differentia zurückgeht. Dabei werden gemeinsame Abstammungen und Unterschiede betrachtet. Das Genus ist die nächst allgemeinere Kategorie, unter die die Objekte der zu generalisierenden Klassen (der Spezies) fallen. Die Differentia sind die Kriterien, anhand derer sich die Objekte aufgrund ihrer Natur unterscheiden, wie sie in den verschiedenen Klassendefinitionen festgelegt sind. Genera haben keine eigenen Individuen, das heißt, es gibt keine Zweibeiner, die nicht entweder Mensch oder Vogel sind.


Wie die Klassifikation hat auch das Ordnungsprinzip der Generalisierung eine einfache mengentheoretische Interpretation. Demnach enthält die Menge der Instanzen einer Generalisierung alle Instanzen der Klassen, von denen sie eine Generalisierung ist. Wenn also Mensch und Vogel Ausgangsklassen einer Generalisierung namens Zweibeiner sind, dann ist die Menge der Instanzen, die Zweibeiner repräsentiert (für die Zweibeiner den Allgemeinbegriff bereitstellen), eine Obermenge der Vereinigung der Menge der Instanzen von Mensch und Vogel. Die Menge der Instanzen von Zweibeiner ist eine echte Obermenge, wenn Zweibeiner auch eigene Instanzen haben (also Instanzen, die nicht Instanzen von Mensch und Vogel sind; im Kontext der Instanziierung spricht man von direkten Instanzen; siehe Abschnitt 7.3). Andernfalls ist sie nur eine unechte Obermenge (genau gleich der Vereinigung). Die folgende Grafik zeigt diese Beziehung (wobei schwarze Punkte die Instanzen und Ellipsen die Klassen darstellen sollen).


Frage: Wie wird das Ordnungsprinzip der Generalisierung in der Mengenlehre interpretiert?
Antwort: Das Ordnungsprinzip der Generalisierung wird in der Mengenlehre interpretiert, indem die Menge der Instanzen einer Generalisierung alle Instanzen der Klassen enthält, von denen sie eine Generalisierung ist. Wenn also Mensch und Vogel Ausgangsklassen einer Generalisierung namens Zweibeiner sind, dann ist die Menge der Instanzen, die Zweibeiner repräsentiert, eine Obermenge der Vereinigung der Menge der Instanzen von Mensch und Vogel.

Frage: Was ist Generalisierung in der objektorientierten Programmierung?
Antwort: In der objektorientierten Programmierung ist Generalisierung ein Ordnungsprinzip, bei dem eine Klasse eine Obermenge von Instanzen enthält, die auch Instanzen von anderen Klassen sind. Zum Beispiel ist die Klasse Zweibeiner eine Obermenge von Instanzen, die auch Instanzen von Mensch und Vogel sind.


In der Praxis ist es gute Praxis (wie bereits angedeutet), wenn Generalisierungen keine eigenen, direkten Instanzen haben, sondern Genera im oben beschriebenen Sinne sind. Dies ist jedoch in der objektorientierten Praxis (leider) nicht immer selbstverständlich.


Frage: Was ist der Unterschied zwischen Generalisierungen und Genera in der objektorientierten Praxis?
Antwort: Generalisierungen sollten idealerweise keine eigenen, direkten Instanzen haben, sondern Genera sein, die keine direkten Instanzen haben. In der Praxis ist es jedoch nicht immer selbstverständlich, diese Empfehlung einzuhalten.

Frage: Was sind Genera in der objektorientierten Praxis?
Antwort: Genera sind in der objektorientierten Praxis Generalisierungen, die keine eigenen, direkten Instanzen haben, sondern als abstrakte Objekte fungieren, die von konkreteren Klassen geerbt werden.


Die mengentheoretische Interpretation der Generalisierung als Obermengenbildung legt nahe, dass Instanzen von Mensch und Vogel (als Elemente der entsprechenden Extensionen) auch Instanzen von Zweibeiner sind. Wenn man das so betrachten möchte, sollte man jedoch zur notwendigen Unterscheidung von indirekten Instanzen (anstelle von direkten Instanzen; siehe Abschnitt 7.3) sprechen.


Frage: Was ist die mengentheoretische Interpretation der Generalisierung?
Antwort: Die mengentheoretische Interpretation der Generalisierung als Obermengenbildung legt nahe, dass Instanzen von Mensch und Vogel (als Elemente der entsprechenden Extensionen) auch Instanzen von Zweibeiner sind.

Frage: Was ist der Unterschied zwischen direkten und indirekten Instanzen?
Antwort: Direkte Instanzen sind Elemente der Extension einer Klasse, während indirekte Instanzen Elemente der Extension einer Unterklasse sind, die nicht direkt der Oberklasse zugeordnet ist.

Frage: Was ist die Konsequenz der mengentheoretischen Interpretation der Generalisierung?
Antwort: Die Konsequenz der mengentheoretischen Interpretation der Generalisierung ist, dass Instanzen von Mensch und Vogel (als Elemente der entsprechenden Extensionen) auch Instanzen von Zweibeiner sind.


Bei der Generalisierung können also Eigenschaften, die verschiedene, aber ähnliche Klassen unterscheiden, weggelassen (oder "abstrahiert") werden. Das Weglassen ist jedoch nicht die einzige Form der Generalisierung. Es können auch Eigenschaften generalisiert werden, wobei dann der Begriff der Generalisierung rekursiv angewendet wird. Unter der Generalisierung von Attributen (oder allgemeiner von Instanzvariablen; siehe Abschnitt 2.4) versteht man, dass ihr Wertebereich von einem spezielleren (kleineren) zu einem allgemeineren (größeren) erweitert wird. Zum Beispiel würde das Attribut "Aufenthaltsort," das mit (Instanzen der) Klasse Mensch assoziiert ist, bei der Generalisierung zu Zweibeiner von Punkten auf der Erdoberfläche zu Punkten einschließlich des Luftraums darüber generalisiert, um auch den Wertebereich für Vögel abzudecken. In SMALLTALK gibt es jedoch keine Möglichkeit, Attributen durch Deklaration Wertebereiche zuzuweisen. Wie Sie später sehen werden, erlauben die meisten Programmiersprachen, die die Möglichkeit der Wertebeschränkung von Variablen bieten, aus guten Gründen nicht, Attributwertebereiche bei der Generalisierung ebenfalls zu generalisieren (die sogenannte kovariante Redefinition).


Frage: Was ist Generalisierung in der objektorientierten Programmierung?
Antwort: In der Objektorientierten Programmierung ist Generalisierung ein Prozess, bei dem Eigenschaften, die verschiedene, aber ähnliche Klassen unterscheiden, weggelassen oder abstrahiert werden. Dies kann auch rekursiv angewendet werden, indem der Begriff der Generalisierung auf Attribute oder Instanzvariablen angewendet wird, wodurch ihr Wertebereich von einem spezielleren auf ein allgemeineres erweitert wird. In SMALLTALK gibt es jedoch keine Möglichkeit, Attributen durch Deklaration Wertebereiche zuzuweisen.

Frage: Was ist Generalisierung bei Attributen?
Antwort: Bei der Generalisierung von Attributen wird ihr Wertebereich von einem spezielleren (kleineren) zu einem allgemeineren (größeren) erweitert. Zum Beispiel würde das Attribut "Aufenthaltsort" bei der Generalisierung von Mensch zu Zweibeiner von Punkten auf der Erdoberfläche zu Punkten einschließlich des Luftraums darüber generalisiert. In SMALLTALK gibt es jedoch keine Möglichkeit, Attributen durch Deklaration Wertebereiche zuzuweisen.


Obwohl bisher so getan wurde, als ob die Generalisierung eine inhärente Eigenschaft des betrachteten Objekts sei, gibt es in der Praxis oft verschiedene Perspektiven, nach denen Generalisierungen durchgeführt werden können. Die Generalisierung von Vogel und Mensch zu Zweibeiner ist also nicht die einzige (und sicherlich nicht die einzige sinnvolle) Möglichkeit. Es könnte durchaus mehrere unabhängige Generalisierungshierarchien geben, in denen dieselben Klassen auftreten. In der Praxis führt dies jedoch dazu, dass die strenge Hierarchieform der Generalisierung verloren geht (da sich mehrere Hierarchien überlappen), es sei denn, es wird erlaubt, verschiedene Arten der Generalisierung voneinander zu unterscheiden. Beide Ansätze bringen jedoch Komplikationen mit sich, daher werden wir hier nicht auf "mehrfache Generalisierungen" eingehen.


Frage: Was ist eine Generalisierungshierarchie?
Antwort: Eine Generalisierungshierarchie ist eine hierarchische Struktur, in der Klassen nach ihrer Allgemeinheit geordnet sind. Dabei gilt, dass eine allgemeinere Klasse eine speziellere Klasse als Unterklasse enthält. Die Generalisierungshierarchie ist eine wichtige Konzept in der objektorientierten Programmierung, da sie die Beziehung zwischen Klassen und Objekten definiert.

Frage: Warum gibt es in der Praxis oft verschiedene Perspektiven, nach denen Generalisierungen durchgeführt werden können?
Antwort: In der Praxis gibt es oft verschiedene Perspektiven, nach denen Generalisierungen durchgeführt werden können, da die Generalisierung nicht immer eindeutig ist und es verschiedene Möglichkeiten gibt, Klassen zu gruppieren und zu organisieren. Zum Beispiel kann man Vogel und Mensch als Zweibeiner gruppieren, aber man könnte sie auch als Flugtiere und Landtiere gruppieren. Beide Gruppierungen sind gültig und können je nach Kontext sinnvoll sein.

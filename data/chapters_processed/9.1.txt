9.1 Generalisierung

Wie bereits zu Beginn erwähnt (in Abschnitt 7.1), entspricht die Klassifikation sprachlich der "Ist-ein-Abstraktionsbeziehung" zwischen Individuen und ihren Klassen: "Peter ist ein Mensch," "SMALLTALK ist eine Programmiersprache," usw. sind alles Beispiele für eine Art der Abstraktion, bei der man von einem Individuum zu seinem Allgemeinbegriff übergeht. Es gibt jedoch eine zweite Form der Ist-ein-Abstraktion, die sich von der ersten grundlegend unterscheidet, aber ebenfalls eine charakteristische Rolle in der objektorientierten Programmierung spielt: die Generalisierung. Sprachlich zeigt sich diese Form in Sätzen wie "Ein Mensch ist ein Säugetier," "Ein Säugetier ist ein Lebewesen" oder "Eine Programmiersprache ist ein Werkzeug." Der Unterschied zur ersten Form der Abstraktion liegt offensichtlich darin, dass hier zwei Allgemeinbegriffe miteinander in Beziehung gesetzt werden, anstelle eines Individuums und eines Allgemeinbegriffs. Ein weiterer, etwas subtilerer, aber sehr wesentlicher Unterschied besteht darin, dass die Klassifikation nicht transitiv ist, während die Generalisierung es ist. So ergibt sich aus "Ein Mensch ist ein Säugetier" und "Ein Säugetier ist ein Lebewesen" logischerweise "Ein Mensch ist ein Lebewesen," aber aus "Peter ist ein Mensch" und "Mensch ist eine Art" ergibt sich nicht "Peter ist eine Art."
Im Prozess der Generalisierung werden mehrere Klassen, deren Definitionen inhaltlich verwandt sind, zusammengefasst. Das Ergebnis dieser Generalisierung, auch als Generalisierungsklasse bezeichnet, enthält nur diejenigen Elemente der Definitionen der generalisierten Klassen, die allen gemeinsam sind. So lässt sich beispielsweise aus den beiden ähnlichen, aber nicht identischen Klassen Mensch und Vogel per Generalisierung die Klasse Zweibeiner herausarbeiten. Diese Klasse Zweibeiner enthält die gemeinsamen Eigenschaften (Instanzvariablen und Methoden) der Klassen Mensch und Vogel.
Da die Eigenschaften, die einer Generalisierung als Klasse zugeordnet sind, per Definition automatisch auch für alle Klassen gelten, von denen die Generalisierung abstrahiert (denn das war ja die Bedingung für die Konstruktion der Generalisierung), müssen diese Klassen die Eigenschaften nicht wiederholen, sondern nur auf ihre Generalisierung verweisen. Diese Klassen müssen dann nur noch die Unterschiede definieren, die sie von der Klasse Zweibeiner sowie voneinander unterscheiden.
Diese zweite Form der Abstraktion, die Generalisierung, ist also genau wie die Klassifikation Bestandteil der klassenbasierten objektorientierten Programmierung. Anders als bei der Klassifikation ist bei der Generalisierung jedoch die Höhe der Abstraktionshierarchie nicht durch praktische Überlegungen beschränkt, sondern kann von der Programmiererin nach Belieben festgelegt werden. Sprachphilosophisch betrachtet sind Generalisierungen ebenfalls Allgemeinbegriffe, nur noch allgemeiner. Generalisierungen können selbst wiederum Generalisierungen haben, und so weiter. Wie es für eine Abstraktionshierarchie typisch ist, werden die Definitionen, die Intensionen, dabei immer präziser. Gleichzeitig wächst jedoch die Extension (das bereits in Abschnitt 7.1 erwähnte Prinzip vom inversen Zusammenhang der beiden).
Übrigens stammt das Prinzip der Generalisierung von Aristoteles' Prinzip von Genus et differentia ab, das gemeinsame Abstammung und Unterschiede betrifft. Das Genus ist die nächst allgemeinere Kategorie, unter die die Objekte der zu generalisierenden Klassen (der Spezies) fallen, und die Differentia sind die Kriterien, anhand derer sich die Objekte aufgrund ihrer Natur unterscheiden, wie sie in den verschiedenen Klassendefinitionen festgelegt sind (und nicht etwa durch spezielle Werte von Instanzvariablen). So haben die Klassen Mensch und Vogel beispielsweise das gemeinsame Genus Zweibeiner als (biologisch nicht ganz korrekte) Generalisierung, in der festgelegt ist, dass alle Exemplare von Zweibeinern (und damit auch von Menschen und Vögeln) ein linkes und ein rechtes Bein sowie einen Aufenthaltsort haben. Die Unterschiede (Differentia) sind dann in den jeweiligen Klassen ausgearbeitet. Beachten Sie, dass Genera keine eigenen Individuen haben, das heißt, es gibt keine Zweibeiner, die nicht entweder Mensch oder Vogel sind.
Wie die Klassifikation hat auch das Ordnungsprinzip der Generalisierung eine einfache mengentheoretische Interpretation. Demnach enthält die Menge der Instanzen einer Generalisierung alle Instanzen der Klassen, von denen sie eine Generalisierung ist. Wenn also Mensch und Vogel Ausgangsklassen einer Generalisierung namens Zweibeiner sind, dann ist die Menge der Instanzen, die Zweibeiner repräsentiert (für die Zweibeiner den Allgemeinbegriff bereitstellen), eine Obermenge der Vereinigung der Menge der Instanzen von Mensch und Vogel. Die Menge der Instanzen von Zweibeiner ist eine echte Obermenge, wenn Zweibeiner auch eigene Instanzen haben (also Instanzen, die nicht Instanzen von Mensch und Vogel sind; im Kontext der Instanziierung spricht man von direkten Instanzen; siehe Abschnitt 7.3). Andernfalls ist sie nur eine unechte Obermenge (genau gleich der Vereinigung). Die folgende Grafik zeigt diese Beziehung (wobei schwarze Punkte die Instanzen und Ellipsen die Klassen darstellen sollen).
In der Praxis ist es gute Praxis (wie bereits angedeutet), wenn Generalisierungen keine eigenen, direkten Instanzen haben, sondern Genera im oben beschriebenen Sinne sind. Dies ist jedoch in der objektorientierten Praxis (leider) nicht immer selbstverständlich, wie sich im nächsten Kapitel noch zeigen wird (siehe auch Kapitel 69 in Kurseinheit 7).
Die mengentheoretische Interpretation der Generalisierung als Obermengenbildung legt nahe, dass Instanzen von Mensch und Vogel (als Elemente der entsprechenden Extensionen) auch Instanzen von Zweibeiner sind. Wenn man das so betrachten möchte, sollte man jedoch zur notwendigen Unterscheidung von indirekten Instanzen (anstelle von direkten Instanzen; siehe Abschnitt 7.3) sprechen.
Bei der Generalisierung können also Eigenschaften, die verschiedene, aber ähnliche Klassen unterscheiden, weggelassen (oder "abstrahiert") werden. Das Weglassen ist jedoch nicht die einzige Form der Generalisierung. Es können auch Eigenschaften generalisiert werden, wobei dann der Begriff der Generalisierung rekursiv angewendet wird. Unter der Generalisierung von Attributen (oder allgemeiner von Instanzvariablen; siehe Abschnitt 2.4) versteht man, dass ihr Wertebereich von einem spezielleren (kleineren) zu einem allgemeineren (größeren) erweitert wird. Zum Beispiel würde das Attribut "Aufenthaltsort," das mit (Instanzen der) Klasse Mensch assoziiert ist, bei der Generalisierung zu Zweibeiner von Punkten auf der Erdoberfläche zu Punkten einschließlich des Luftraums darüber generalisiert, um auch den Wertebereich für Vögel abzudecken. In SMALLTALK gibt es jedoch keine Möglichkeit, Attributen durch Deklaration Wertebereiche zuzuweisen. Wie Sie später sehen werden, erlauben die meisten Programmiersprachen, die die Möglichkeit der Wertebeschränkung von Variablen bieten, aus guten Gründen nicht, Attributwertebereiche bei der Generalisierung ebenfalls zu generalisieren (die sogenannte kovariante Redefinition; siehe dazu auch die Kapitel 25 und Abschnitt 26.3 in Kurseinheit 3).
Obwohl bisher so getan wurde, als ob die Generalisierung eine inhärente Eigenschaft des betrachteten Objekts sei, gibt es in der Praxis oft verschiedene Perspektiven, nach denen Generalisierungen durchgeführt werden können. Die Generalisierung von Vogel und Mensch zu Zweibeiner ist also nicht die einzige (und sicherlich nicht die einzige sinnvolle) Möglichkeit. Es könnte durchaus mehrere unabhängige Generalisierungshierarchien geben, in denen dieselben Klassen auftreten. In der Praxis führt dies jedoch dazu, dass die strenge Hierarchieform der Generalisierung verloren geht (da sich mehrere Hierarchien überlappen), es sei denn, es wird erlaubt, verschiedene Arten der Generalisierung voneinander zu unterscheiden. Beide Ansätze bringen jedoch Komplikationen mit sich, daher werden wir hier nicht auf "mehrfache Generalisierungen" eingehen.

Frage: Was ist der Unterschied zwischen Klassifikation und Generalisierung in der objektorientierten Programmierung?
Antwort: In der objektorientierten Programmierung entspricht die Klassifikation der "Ist-ein-Abstraktionsbeziehung" zwischen Individuen und ihren Klassen, während die Generalisierung eine Form der Abstraktion ist, bei der Allgemeinbegriffe miteinander in Beziehung gesetzt werden. Klassifikation bezieht sich auf die Zuordnung eines Individuums zu einer Klasse, während Generalisierung die Beziehung zwischen verschiedenen Klassen beschreibt, bei der eine Klasse eine Verallgemeinerung (Generalisierung) einer anderen ist.

Frage: Welche Bedeutung hat die Generalisierung in der objektorientierten Programmierung?
Antwort: Die Generalisierung ermöglicht es, mehrere Klassen, deren Definitionen inhaltlich verwandt sind, zu abstrahieren und zusammenzufassen. Dies führt zur Bildung einer Generalisierungsklasse, die die gemeinsamen Eigenschaften (Instanzvariablen und Methoden) der generalisierten Klassen enthält. Die Generalisierung erlaubt es, Gemeinsamkeiten zwischen Klassen auf höherer Abstraktionsebene darzustellen und die Wiederverwendung von Code zu fördern.

Frage: Ist die Generalisierung in der objektorientierten Programmierung transitiv?
Antwort: Ja, die Generalisierung ist in der objektorientierten Programmierung transitiv. Wenn eine Klasse A eine Generalisierung einer Klasse B ist und Klasse B wiederum eine Generalisierung einer Klasse C ist, ergibt sich logischerweise, dass Klasse A eine Generalisierung von Klasse C ist.

Frage: Was ist die mengentheoretische Interpretation der Generalisierung?
Antwort: In der mengentheoretischen Interpretation der Generalisierung ist die Menge der Instanzen einer Generalisierung eine Obermenge der Vereinigung der Mengen der Instanzen von generalisierten Klassen. Dies bedeutet, dass Instanzen von generalisierten Klassen auch Instanzen der Generalisierung sind.
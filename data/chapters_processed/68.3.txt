68.3 Ein Beispiel

Verkettung ist ein Verstoß gegen das Gesetz Demeters.
Der erste Verstoß ergibt sich aus der Umsetzung der 1-zu-n-Beziehung zwischen "Klausel" und "Literalen" über Zwischenobjekte. Eine "Klausel" kennt genaugenommen nicht ihre Literale direkt, sondern das Zwischenobjekt, in diesem Fall eine Instanz der Klasse "Set". So stellt bereits der Aufruf von "atom" bzw. "auswerten" auf der Variable "l" eine Verletzung des Law of Demeter dar. Etwas deutlicher sieht man das, wenn man anstelle einer Menge und des Iterators "detect:" ein Array und eine Zählschleife verwendet. Bei der Verwendung von Collections als Zwischenobjekte muss man also immer eine Ausnahme von Demeters Gesetz machen.
Der zweite Verstoß findet sich in Zeile 1672: "atom wert not" ist ein verketteter Ausdruck derselben Qualität wie "l atom wert" (selbe Zeile). Die Lösung wäre hier, der Klasse "Atom" eine Methode "not" zu spendieren, die den negierten Wert zurückliefert, aber warum das besserer Stil sein soll, ist kaum noch zu begründen. Auch wenn dieses Problem in JAVA und Co. nicht existiert (da hier die logische Negation keine Nachricht/Methode, sondern ein primitiver Operator eines primitiven Datentyps ist), so zeigt es doch die Grenzen des Law of Demeter auf. So ist das Gesetz auch nicht allgemein anerkannt, sondern umstritten; dennoch sollte man es verinnerlichen und sich bei Kettenausdrücken stets fragen, ob nicht eine Verlagerung einer hinteren Methode in eines der Objekte auf der Strecke sinnvoll wäre.

Frage: Warum muss man bei der Verwendung von Collections als Zwischenobjekte immer eine Ausnahme von Demeters Gesetz machen?
Antwort: Bei der Verwendung von Collections als Zwischenobjekte muss man eine Ausnahme von Demeters Gesetz machen, weil die Verwendung von Iteratoren und Methoden wie "detect:" eine Verkettung von Nachrichten erzeugt, die in direktem Widerspruch zum Gesetz Demeters steht. Dies liegt daran, dass die Klausel "detect:" auf einer Kollektion nicht dem Prinzip des Gesetzes Demeters entspricht, bei dem Nachrichten nur an Objekte gesendet werden dürfen, die der Sender selbst kennt oder erzeugt.

Frage: Warum ist das Gesetz Demeters umstritten und nicht allgemein anerkannt?
Antwort: Das Gesetz Demeters ist umstritten und nicht allgemein anerkannt, weil es in einigen Fällen schwer umsetzbar sein kann und zu unpraktischem Code führen kann. Es erfordert, dass Verkettungen von Nachrichten vermieden werden, was in einigen Fällen zu einer unnötigen Fragmentierung des Codes führen kann. Einige Entwickler sehen das Gesetz Demeters als zu restriktiv an und argumentieren, dass es in bestimmten Situationen vernünftiger ist, Verkettungen von Nachrichten zu verwenden, um den Code lesbarer und effizienter zu gestalten. Dennoch ist es wichtig, das Gesetz Demeters zu verstehen und in Betracht zu ziehen, da es in vielen Fällen dazu beitragen kann, die Kopplung zwischen Klassen zu verringern und den Code wartbarer zu machen.
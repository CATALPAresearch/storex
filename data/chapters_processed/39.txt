39 Module

Ein Modul ist eine Einheit von Programmelementen, die (bzw. deren Funktion) von außen (also z. B. von anderen Modulen) nur über die Schnittstelle des Moduls zugänglich sind. Damit behält ein Modul einen Teil seiner Implementierung für sich — es hütet quasi ein Implementationsgeheimnis. Der Teil, den es (über seine Schnittstelle) nach außen trägt, gilt gemeinhin als öffentlich. Die „Öffentlichkeit“ kann dabei durchaus beschränkt sein.


Frage: Was ist ein Modul in der Programmierung?
Antwort: Ein Modul ist eine Einheit von Programmelementen, die nur über die Schnittstelle des Moduls von außen zugänglich sind. Damit behält ein Modul einen Teil seiner Implementierung für sich und hütet ein Implementationsgeheimnis. Der Teil, den es nach außen trägt, gilt als öffentlich.


Ein wesentlicher Grund, zwischen öffentlichen und nicht öffentlichen — privaten — Teilen eines Moduls zu unterscheiden, ist, dass die Programmierer eines Moduls die Hoheit darüber behalten wollen, wie sie das Modul programmieren. Indem sie sich auf eine Schnittstelle festlegen und alles andere hinter der Schnittstelle verbergen, ist es ihnen möglich, jederzeit die verborgenen Teile zu ändern, ohne dass irgendjemand davon in Kenntnis gesetzt werden muss — weil die privaten Teile von außen unsichtbar sind, hängt auch niemand davon ab, und insofern ist auch niemand davon betroffen, wenn an einem Modul eine Änderung durchgeführt wird, die die Schnittstellen unberührt lässt.


Frage: Warum ist es wichtig, zwischen öffentlichen und privaten Teilen eines Moduls zu unterscheiden?
Antwort: Die Unterscheidung zwischen öffentlichen und privaten Teilen eines Moduls ermöglicht es den Programmierern, die Hoheit über die Implementierung des Moduls zu behalten. Durch die Verwendung einer Schnittstelle und das Verbergen der internen Details können sie jederzeit die internen Teile ändern, ohne dass dies Auswirkungen auf andere Teile des Programms hat, solange die Schnittstelle unverändert bleibt.


In Java wurden bis Version 8 Module durch Klassen und Pakete (engl. packages) mehr oder weniger gut simuliert. Mit Java 9 wurde schließlich — nach langer Vorbereitungszeit — ein Modulbegriff eingeführt, der diesen Namen auch verdient.


Frage: Was simulierten Klassen und Pakete in Java bis Version 8?
Antwort: In Java wurden bis Version 8 Module durch Klassen und Pakete simuliert.

29.2 Collections als Standardanwendungsfall für parametrischen Polymorphismus

Eine wichtige Gruppe von Klassen, die Sie in den letzten beiden Kurseinheiten kennengelernt haben, sind die sog. Collection-Klassen. Auch diese bilden jeweils einen Typ, so dass Variablen, die auf eine Collection verweisen, mit diesem Typ deklariert werden können.


Frage: Was sind Collection-Klassen?
Antwort: Collection-Klassen sind eine wichtige Gruppe von Klassen, die Sie in den letzten beiden Kurseinheiten kennengelernt haben. Sie bilden jeweils einen Typ, so dass Variablen, die auf eine Collection verweisen, mit diesem Typ deklariert werden können.

Frage: Was ist die Zuweisung in der objektorientierten Programmierung?
Antwort: Die Zuweisung ist ein elementares Konstrukt der objektorientierten Programmierung, das eine Variable mit einem Wert oder einem Verweis auf ein Objekt verbindet. Sie kann explizit durch den Zuweisungsoperator oder implizit bei Methodenaufrufen erfolgen.


Nun dienen Collections ja u. a. dem Zweck, n-Beziehungen zwischen einem Objekt und mehreren anderen zu ermöglichen, indem sie dafür Zwischenobjekte zur Verfügung stellen (s. Kurseinheit 2, Kapitel 13). Und so bilden die mit den Collection-Klassen assoziierten Typen auch nur die Typen für die Zwischenobjekte. Was man jedoch eigentlich bei der Deklaration von n-wertigen Attributen angeben (deklarieren) möchte, ist der Typ der in Beziehung stehenden Objekte.


Frage: Wie kann man den Typ der in Beziehung stehenden Objekte bei der Deklaration von n-wertigen Attributen angeben?
Antwort: Man kann den Typ der in Beziehung stehenden Objekte bei der Deklaration von n-wertigen Attributen angeben, indem man die Collection-Klassen als Typen für die Zwischenobjekte verwendet.

Frage: Wozu dienen Collections in der objektorientierten Programmierung?
Antwort: Collections dienen dazu, n-Beziehungen zwischen einem Objekt und mehreren anderen Objekten zu ermöglichen, indem sie dafür Zwischenobjekte bereitstellen. Die mit den Collection-Klassen assoziierten Typen sind die Typen für die Zwischenobjekte.

Frage: Was sind die Zwischenobjekte in Bezug auf n-Beziehungen zwischen Objekten?
Antwort: Die Zwischenobjekte in Bezug auf n-Beziehungen zwischen Objekten sind die Objekte, die mit den Collection-Klassen assoziiert sind und die Beziehung zwischen einem Objekt und mehreren anderen Objekten ermöglichen.


Wenn das Attribut beispielsweise Kinder heißt und man damit eine Person mit einer Menge anderer Objekte vom Typ Person, den Kindern, in Beziehung setzen möchte, dann nutzt es nichts, wenn man Kinder vom Typ Person deklariert — es könnte dann höchstens eine Person enthalten und nicht mehrere. Was man vielmehr gern hätte, wäre etwas, das dem Array-Typkonstruktor array [<Bereich>] of <Elementtyp> (spitze Klammern hier wieder als Begrenzer von metasyntaktischen Variablen) von PASCAL gleicht: Im gegebenen Beispiel würde man gern deklarieren, dass Kinder den Typ Collection of Person haben soll.


Frage: Wie kann man in Smalltalk eine Menge von Objekten vom Typ Person deklarieren?
Antwort: Man kann eine Menge von Objekten vom Typ Person in Smalltalk mit dem Typ Collection of Person deklarieren, der dem Array-Typkonstruktor array [<Bereich>] of <Elementtyp> von PASCAL ähnelt.

Frage: Was ist der Unterschied zwischen dem Attribut Kinder als Typ Person und Collection of Person?
Antwort: Wenn das Attribut Kinder als Typ Person deklariert wird, kann es nur ein Objekt vom Typ Person enthalten, während es als Collection of Person deklariert, eine Menge von Objekten vom Typ Person enthalten kann.


Ein anderes Beispiel für eine parametrische Definition einer Collection ist Dictionary: Hier sollte nicht nur der Element-, sondern auch der Schlüsseltyp variabel gehalten werden.


Frage: Was ist eine parametrische Definition einer Collection?
Antwort: Eine parametrische Definition einer Collection ist eine Definition, bei der sowohl der Element- als auch der Schlüsseltyp variabel gehalten wird, wie zum Beispiel bei Dictionary.

Frage: Was ist ein Dictionary in der Programmierung?
Antwort: Ein Dictionary ist eine parametrische Definition einer Collection, bei der sowohl der Element- als auch der Schlüsseltyp variabel gehalten wird. Es ist eine Datenstruktur, die Werte mit Schlüsseln verbindet, um eine schnelle Suche und Zugriff auf die Werte zu ermöglichen. In einigen Programmiersprachen wird Dictionary auch als Map oder Hashtable bezeichnet.


Dabei ist der parametrische Typ Dictionary ein Subtyp des ebenfalls parametrischen Typs Collection. Man beachte, dass der Typparameter E hier bereits in der Supertypdeklaration verwendet wird. Ein Dictionary, in dem Integer auf beliebige Objekte abgebildet werden, erhält man dann durch die Instanziierung Dictionary[Integer, Object]. Es ist mit einer Variable vom Typ Collection[Object] zuweisungskompatibel. Auf die Einzelheiten des Subtypings bei parametrischen Typen wird in Kapitel 30 eingegangen.


Frage: Was ist ein parametrischer Typ in der Programmierung?
Antwort: Ein parametrischer Typ ist ein Konstrukt in der Programmierung, bei dem ein oder mehrere Typen als Parameter verwendet werden. Dies ermöglicht die Erstellung von generischen Datentypen und Funktionen, die für verschiedene Datentypen verwendet werden können. Im gegebenen Kontext wird der parametrische Typ Dictionary verwendet, um Integer auf beliebige Objekte abzubilden.

Frage: Was ist der parametrische Typ Dictionary?
Antwort: Der parametrische Typ Dictionary ist ein Subtyp des ebenfalls parametrischen Typs Collection, bei dem der Typparameter E bereits in der Supertypdeklaration verwendet wird. Ein Dictionary, in dem Integer auf beliebige Objekte abgebildet werden, erhält man durch die Instanziierung Dictionary[Integer, Object]. Es ist mit einer Variablen vom Typ Collection[Object] zuweisungskompatibel.

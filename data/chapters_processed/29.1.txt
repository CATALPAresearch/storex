29.1 Einfacher parametrischer Polymorphismus

Bei der Parametrisierung steht anstelle eines Typen in der Typdefinition eine Typvariable. Für Typvariablen verwendet man traditionell einzelne Großbuchstaben; dies hat den nützlichen Nebeneffekt, dass man durch eine Typvariable keinen tatsächlichen Typen verdeckt, wie es sonst versehentlich passieren könnte: Man könnte die Typvariable nämlich auch beispielsweise „Integer“ nennen, aber sie wäre deswegen immer schreibend vorausgesetzt, zu einer parametrischen Klassendefinition beliebig viele Typen. Wenn man nun den Typ verwenden möchte, also z. B. eine temporäre Variable von diesem Typ deklarieren möchte, muss man sich festlegen, welchen Wert die Typvariable in der Typdefinition haben sollen. Diese Typdefinition wird jedoch nirgends hingeschrieben — sie ergibt sich immer neu aus der Instanziierung der parametrischen Typdefinition mit einem konkreten Typen. Ein und dieselbe parametrische Typdefinition kann in einem Programm beliebig oft verwendet werden.

Frage: Was ist eine Typvariable in der Typdefinition?
Antwort: In der Typdefinition ist eine Typvariable ein Platzhalter für einen tatsächlichen Typ, der bei der Instantiierung der Klasse eingesetzt wird. Traditionell werden einzelne Großbuchstaben für Typvariablen verwendet, um versehentliches Verdecken eines tatsächlichen Typs zu vermeiden.

Frage: Was ist der Zweck von Typvariablen in der Typdefinition?
Antwort: Der Zweck von Typvariablen in der Typdefinition ist, dass sie anstelle des Parameters und des Rückgabetyps T nennen, wobei T eine Typvariable ist. Typvariablen werden verwendet, um keinen tatsächlichen Typen zu verdecken, wie es sonst versehentlich passieren könnte. Typvariablen können auch zu einer parametrischen Klassendefinition beliebig viele Typen haben.

Frage: Was ist der Zweck der Typisierung in der Programmierung?
Antwort: Der Zweck der Typisierung in der Programmierung ist es, die möglichen Werte einer Variablen oder Funktion einzuschränken und so die Fehleranfälligkeit zu verringern. Durch die Angabe eines Typs wird sichergestellt, dass nur Werte dieses Typs an die Variable oder Funktion übergeben werden können, was die Korrektheit des Programms erhöht.

Frage: Wie wird der Typ einer parametrischen Typdefinition konkretisiert?
Antwort: Die Typdefinition wird durch Instanziierung der parametrischen Typdefinition mit einem konkreten Typen konkretisiert. Dieser Vorgang ergibt sich automatisch und muss nicht explizit hingeschrieben werden.

Frage: Wann ergibt sich die Typdefinition einer parametrischen Typdefinition?
Antwort: Die Typdefinition einer parametrischen Typdefinition ergibt sich immer neu aus der Instanziierung der parametrischen Typdefinition mit einem konkreten Typen.

Frage: Was ergibt sich aus der Instanziierung der parametrischen Typdefinition mit einem konkreten Typen?
Antwort: Die Typdefinition ergibt sich aus der Instanziierung der parametrischen Typdefinition mit einem konkreten Typen.

Frage: Was versteht man unter parametrisierter Typdefinition?
Antwort: Eine parametrisierte Typdefinition ist eine Möglichkeit, einen Typ in der Programmierung zu definieren, der einen oder mehrere Typparameter enthält. Diese Typparameter können bei der Instanziierung des Typs durch konkrete Typen ersetzt werden, um einen konkreten Typ zu erzeugen. Durch die Verwendung parametrisierter Typdefinitionen kann Code wiederverwendet werden, und die Typsicherheit wird erhalten.

Frage: Wie oft kann eine parametrische Typdefinition in einem Programm verwendet werden?
Antwort: Eine parametrische Typdefinition kann in einem Programm beliebig oft verwendet werden.

Frage: Was ist die Bedeutung von Typparametern in einer parametrisierten Typdefinition?
Antwort: Typparameter in einer parametrisierten Typdefinition sind Platzhalter für konkrete Typen, die bei der Instanziierung des Typs eingesetzt werden können. Sie ermöglichen es, den gleichen Code für verschiedene Typen wiederzuverwenden und die Typsicherheit zu erhalten.

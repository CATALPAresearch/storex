3.2 Kapselung

Die Unterscheidung zwischen lokalen und globalen Variablen aus Abschnitt 1.5.2 dient unter anderem dazu, Geheimnisse zu verbergen, was auch als Geheimnisprinzip oder Information Hiding bezeichnet wird. Genauer gesagt geht es dabei um das Verbergen von Implementationsdetails. Es ist fast immer sinnvoll, die Struktur zusammengesetzter Objekte vor den Objekten zu verbergen, die sie verwenden, damit Änderungen an dieser Struktur vorgenommen werden können, ohne dass die verwendenden (abhängigen) Objekte davon betroffen sind. Solche Änderungsabhängigkeiten werden vermieden, indem die Variablen von außen nicht zugänglich sind, was automatisch für lokale Variablen gilt, da sie von außen unsichtbar sind.
Von dieser Idee des Geheimnisprinzips zu unterscheiden ist der Begriff der Kapselung, der eng mit der objektorientierten Programmierung verknüpft ist. Hierbei geht es darum, dass ein Objekt seinen Zustand so kapselt, dass dieser nur von ihm selbst geändert werden kann. Im Gegensatz zum Information Hiding handelt es sich bei der Kapselung nicht um die Veränderung der Struktur von Objekten, sondern um die Veränderung ihres Zustands. Leider lässt sich die Kapselung nicht mit denselben Mitteln wie das Geheimnisprinzip umsetzen. Aufgrund von Aliasing kann ein Objekt, dessen Name (beispielsweise aufgrund des Geheimnisprinzips) unsichtbar ist, über einen anderen Namen zugänglich sein, ohne dass der erste Name dagegen etwas unternehmen könnte. Über lokale Instanzvariablen kann ein Objekt also verbergen, welche Objekte es kennt, aber es kann nicht verhindern, dass andere Objekte diese Objekte auch kennen und ohne sein Wissen manipulieren. Aufgrund der möglichen Existenz von Aliasen ist es daher nicht möglich, dass ein Objekt seinen inneren Aufbau vor der Außenwelt vollständig abschottet, es sei denn, es trifft spezielle Vorkehrungen. Diese Vorkehrungen sind derzeit noch nicht in gängige objektorientierte Programmiersprachen integriert und müssen explizit programmiert werden. Aus diesem Grund werden wir uns in dieser Kurseinheit nicht weiter damit befassen. Eine vertiefte Betrachtung erfolgt in Kapitel 58 von Kurseinheit 6.

Frage: Was versteht man unter dem Geheimnisprinzip oder Information Hiding in der objektorientierten Programmierung?
Antwort: Das Geheimnisprinzip oder Information Hiding bezieht sich auf das Verbergen von Implementationsdetails eines Objekts, insbesondere der Struktur zusammengesetzter Objekte, vor den Objekten, die sie verwenden. Dadurch können Änderungen an der Struktur vorgenommen werden, ohne dass abhängige Objekte davon betroffen sind.

Frage: Was ist der Unterschied zwischen dem Geheimnisprinzip und der Kapselung in der objektorientierten Programmierung?
Antwort: Der Unterschied besteht darin, dass das Geheimnisprinzip sich auf das Verbergen von Implementationsdetails und Struktur bezieht, während die Kapselung sich auf das Verbergen und die Kontrolle des Zustands eines Objekts bezieht. Die Kapselung ermöglicht es einem Objekt, seinen Zustand so zu kapseln, dass dieser nur von ihm selbst geändert werden kann.

Frage: Warum kann die Kapselung nicht mit denselben Mitteln wie das Geheimnisprinzip umgesetzt werden?
Antwort: Die Kapselung kann nicht mit denselben Mitteln wie das Geheimnisprinzip umgesetzt werden, weil aufgrund von Aliasing ein Objekt, dessen Name unsichtbar ist, über einen anderen Namen zugänglich sein kann, ohne dass das erste Objekt dagegen etwas unternehmen könnte. Die Kapselung betrifft die Kontrolle des Zustands eines Objekts, während das Geheimnisprinzip sich auf die Struktur bezieht.

Frage: Warum kann ein Objekt seinen inneren Aufbau vor der Außenwelt nicht vollständig abschotten?
Antwort: Ein Objekt kann seinen inneren Aufbau nicht vollständig vor der Außenwelt abschotten, da aufgrund der möglichen Existenz von Aliasen andere Objekte diese Objekte kennen und ohne sein Wissen manipulieren können. Die Abschottung erfordert spezielle Vorkehrungen, die derzeit nicht in gängige objektorientierte Programmiersprachen integriert sind und explizit programmiert werden müssen.
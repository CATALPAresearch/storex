28.1 Subklassen und Subtypen

Man könnte nun versucht sein, den Zusammenhang von Klassen und Typen auch unter Vererbung bzw. Subtyping beizubehalten und damit zu erwarten, dass eine Instanz einer Subklasse einer Klasse dem Wertebereich des zur Superklasse gehörenden Typs angehört. Das ist jedoch dann nicht der Fall, wenn in der Subklasse Änderungen vorgenommen werden, die eine Typkonformität vom zur Subklasse gehörenden zum zur Superklasse gehörenden Typ aufheben, also z. B. Methoden gelöscht oder inkompatibel redefiniert werden. Die meisten objektorientierten Programmiersprachen verbieten das jedoch, so dass sich die Subklassenbeziehung tatsächlich auf eine parallele Subtypenbeziehung übertragen lässt.


Frage: Was ist der Unterschied zwischen Klassen und Typen in objektorientierten Programmiersprachen?
Antwort: In objektorientierten Programmiersprachen repräsentieren Klassen eine Art Bauplan für Objekte, während Typen die Eigenschaften von Objekten beschreiben. Eine Instanz einer Subklasse gehört nicht automatisch dem Wertebereich des zur Superklasse gehörenden Typs an, wenn in der Subklasse Änderungen vorgenommen werden, die eine Typkonformität aufheben. Die meisten objektorientierten Programmiersprachen verbieten das, so dass sich die Subklassenbeziehung tatsächlich auf eine parallele Subtypenbeziehung übertragen lässt.

Frage: Was passiert mit der Typkonformität zwischen Super- und Subklasse, wenn Methoden gelöscht oder inkompatibel redefiniert werden?
Antwort: Wenn in der Subklasse Änderungen vorgenommen werden, die eine Typkonformität vom zur Subklasse gehörenden zum zur Superklasse gehörenden Typ aufheben, also z. B. Methoden gelöscht oder inkompatibel redefiniert werden, dann ist eine Instanz einer Subklasse nicht mehr dem Wertebereich des zur Superklasse gehörenden Typs zugehörig.

Frage: Was ist der Unterschied zwischen Typen und Klassen?
Antwort: Klassen sind eine Art Bauplan für Objekte, während Typen eine Menge von Werten sind, die eine bestimmte Eigenschaft erfüllen. In einigen objektorientierten Programmiersprachen, wie z.B. Java, sind Klassen und Typen eng miteinander verbunden, aber in anderen Sprachen, wie z.B. Smalltalk, können Klassen und Typen unabhängig voneinander sein.

Frage: Was passiert, wenn in einer Subklasse Änderungen vorgenommen werden, die eine Typkonformität vom zur Subklasse gehörenden zum zur Superklasse gehörenden Typ aufheben?
Antwort: Wenn in einer Subklasse Änderungen vorgenommen werden, die eine Typkonformität vom zur Subklasse gehörenden zum zur Superklasse gehörenden Typ aufheben, dann ist eine Instanz der Subklasse nicht mehr mit dem Typ der Superklasse kompatibel. Das ist in den meisten objektorientierten Programmiersprachen nicht erlaubt.

Frage: Was bedeutet die Subklassenbeziehung in objektorientierten Programmiersprachen?
Antwort: In den meisten objektorientierten Programmiersprachen bedeutet die Subklassenbeziehung, dass eine Subklasse eine spezielle Art von Superklasse ist und dass eine Instanz der Subklasse auch als Instanz der Superklasse betrachtet werden kann. Wenn die Subklasse jedoch Änderungen vornimmt, die eine Typkonformität aufheben, dann ist diese Beziehung nicht mehr gegeben.

50.4.1 Die Typhierarchie von C-Sharp

In C-Sharp sind, genau wie in Java, alle Variablen typisiert. Anders als in Java wird jedoch zunächst nicht zwischen Wert- (primitiven) und Referenztypen unterschieden: Alle Typen, auch die primitiven, gelten als von Object (genauer: System.Object) abgeleitet. Da lohnt es sich, auf die Typhierarchie etwas genauer einzugehen. Die wichtigsten primitiven Typen sind: int (integer), float, bool (boolean), char (character), double, long, ushort, short, byte. Die wichtigsten Referenztypen sind: string, array, delegate, interface, object. Die primitiven Typen sind in C-Sharp als Werttypen implementiert. Das bedeutet, dass sie auf dem Stack abgelegt werden und bei der Übergabe an eine Methode kopiert werden. Referenztypen werden dagegen auf dem Heap abgelegt und bei der Übergabe an eine Methode nur der Verweis kopiert.

Frage: Was ist der Unterschied zwischen Wert- und Referenztypen in C-Sharp?
Antwort: In C-Sharp werden primitiven Typen als Werttypen implementiert, die auf dem Stack abgelegt und bei der Übergabe an eine Methode kopiert werden. Referenztypen werden dagegen auf dem Heap abgelegt und bei der Übergabe an eine Methode nur der Verweis kopiert.

Frage: Wie ist die Typenhierarchie in C-Sharp aufgebaut?
Antwort: In C-Sharp sind alle Variablen typisiert. Anders als in Java wird zunächst nicht zwischen Wert- (primitiven) und Referenztypen unterschieden: Alle Typen, auch die primitiven, gelten als von Object (genauer: System.Object) abgeleitet.

Frage: Was ist eine Typhierarchie in C-Sharp?
Antwort: In C-Sharp ist eine Typhierarchie eine Vererbungshierarchie, die die Beziehungen zwischen den verschiedenen Datentypen definiert. Alle Typen, einschließlich primitiver Typen, gelten als von Object (genauer: System.Object) abgeleitet. Diese Hierarchie ermöglicht es, Objekte verschiedener Typen zu behandeln, als ob sie vom gleichen Typ wären, was Polymorphie ermöglicht.


Genaugenommen ist die Typhierarchie von C-Sharp gar nicht die Typhierarchie von C-Sharp, sondern die von .NET: Sie ist nämlich für alle .NET-Sprachen dieselbe. Das liegt daran, dass .NET für alle seine Sprachen ein gemeinsames Typsystem vorsieht, nämlich das Common Type System (CTS). Das CTS sorgt dafür, dass Typen, die in einer Sprache definiert wurden, auch in einer anderen Sprache verwendet werden können, und zwar ganz so, als wären sie in der anderen Sprache selbst definiert worden. Wie man sich leicht vorstellen kann, sind dafür einige Konventionen notwendig.


Frage: Wie ist die Typhierarchie von C-Sharp definiert?
Antwort: Die Typhierarchie von C-Sharp ist Teil des Common Type Systems (CTS) von .NET und ist für alle .NET-Sprachen dieselbe. Sie ermöglicht es, Typen, die in einer Sprache definiert wurden, in einer anderen Sprache zu verwenden, als wären sie in der anderen Sprache selbst definiert worden.

Frage: Was ist das Common Type System (CTS) in .NET?
Antwort: Das Common Type System (CTS) ist ein gemeinsames Typsystem in .NET, das sicherstellt, dass Typen, die in einer .NET-Sprache definiert wurden, auch in einer anderen Sprache verwendet werden können, als wären sie in der anderen Sprache selbst definiert worden. Es ermöglicht die Interoperabilität zwischen verschiedenen .NET-Sprachen.


Das erste Merkmal des CTS ist, dass alle Typen in einer Hierarchie untergebracht sind. Anders als in Java gibt es also keine Ausgrenzung der primitiven Typen. Tatsächlich sind die primitiven Typen als eine von mehreren Arten von Werttypen in der Hierarchie angesiedelt. Eine weitere wichtige Form von Werttypen sind die Aufzählungstypen, die aus PASCAL bekannt sind und inzwischen auch in Java verwendet werden, allerdings dort als Referenztypen. Bei den Werttypen handelt es sich um Typen, die von der Programmiererin selbst angegeben werden können (im Gegensatz zu den primitiven Typen, deren Werte mit der Sprachdefinition vorgegeben sind). Werttypen können, genau wie in PASCAL oder C, mittels des Typkonstruktors "struct" (das C-Äquivalent von PASCALs "record") erzeugt werden. Diese Typen können sogar Methoden und Konstruktoren haben, sind jedoch keine Klassen und erlauben keine Typerweiterung oder Vererbung.


Frage: Was ist das erste Merkmal des CTS?
Antwort: Das erste Merkmal des CTS ist, dass alle Typen in einer Hierarchie untergebracht sind. Anders als in Java gibt es also keine Ausgrenzung der primitiven Typen.

Frage: Was sind Werttypen in CTS?
Antwort: Werttypen in CTS sind Typen, die von der Programmiererin selbst angegeben werden können und die aus primitiven Typen und Aufzählungstypen bestehen. Im Gegensatz zu Referenztypen, erlauben Werttypen keine Typerweiterung oder Vererbung.


Eine weitere Unterscheidung ergibt sich bei den Referenztypen. Neben Klassen, Interfaces und Arrays gibt es auch Delegates, die im Wesentlichen Zeiger auf an ein Objekt gebundene einzelne Methoden sind. Delegates ersetzen die aus anderen Sprachen bekannten Funktionspointer. In Java bis zur Version 8 wurden sie recht umständlich über Interfaces und anonyme innere Klassen emuliert, wobei heute Lambda-Ausdrücke in Java anstelle davon verwendet werden können. Delegates sind für verschiedene Problemstellungen, wie z. B. Listener-Mechanismen, sehr nützlich.


Frage: Was sind Delegates in der Programmierung?
Antwort: Delegates sind Referenztypen, die im Wesentlichen Zeiger auf an ein Objekt gebundene einzelne Methoden sind. Sie werden oft für verschiedene Problemstellungen, wie z. B. Listener-Mechanismen, verwendet. In Java bis zur Version 8 wurden Delegates recht umständlich über Interfaces und anonyme innere Klassen emuliert, während heute Lambda-Ausdrücke in Java anstelle von Delegates verwendet werden können.


Zuletzt gibt es in C-Sharp auch noch Attribut-Typen (Attributes), die im Wesentlichen den Annotationen entsprechen, die es seit Version 5 auch in Java gibt. Annotationen haben jedoch nichts unmittelbar mit objektorientierter Programmierung zu tun und sind daher nicht Gegenstand dieses Kurses.


Frage: Was sind Attribute in C-Sharp?
Antwort: Attribute in C-Sharp sind eine Möglichkeit, zusätzliche Informationen zu einem Programmelement hinzuzufügen. Sie sind ähnlich wie Annotationen in Java und haben nichts unmittelbar mit objektorientierter Programmierung zu tun.

Frage: Was sind Attribute in C-Sharp und wie unterscheiden sie sich von Annotationen in Java?
Antwort: Attribute in C-Sharp sind ähnlich wie Annotationen in Java, die es seit Version 5 gibt. Sie werden beide verwendet, um zusätzliche Metadaten zu einem Programmelement hinzuzufügen. Der Hauptunterschied besteht darin, dass Attribute in C-Sharp direkt in der Sprache definiert und verwendet werden, während Annotationen in Java eine Erweiterung der Sprache sind und eine zusätzliche Bibliothek erfordern.


Es ergibt sich die folgende grobe Einteilung der Typen in C-Sharp: Werttypen, and Referenztypen: Klassen, Interfaces, Arrays, Delegates, Attribut-Typen


Frage: Wie können Typen in C-Sharp eingeteilt werden?
Antwort: In C-Sharp gibt es eine grobe Einteilung der Typen in Werttypen und Referenztypen, wobei zu den Referenztypen Klassen, Interfaces, Arrays, Delegates und Attribut-Typen gehören.

Frage: Was ist der Unterschied zwischen Werttypen und Referenztypen in C-Sharp?
Antwort: Werttypen werden direkt auf dem Stack gespeichert und enthalten einen Wert, während Referenztypen auf dem Heap gespeichert werden und eine Referenz auf ein Objekt enthalten. Werttypen werden beim Zuweisen oder Übergeben an eine Methode kopiert, während Referenztypen nur eine Kopie der Referenz erstellen.


Wohlgemerkt, dies ist keine Klassenhierarchie, sondern lediglich eine Einteilung der verschiedenen Arten von Typen in C-Sharp. Die Klassenhierarchie ist wesentlich komplexer und vereinheitlicht das Typsystem von C-Sharp, indem alle Typen von System.Object abgeleitet sind. Ein Ausschnitt aus der Klassenhierarchie im Namespace System sieht etwa so aus:


Frage: Was ist eine Klassenhierarchie in C-Sharp?
Antwort: Eine Klassenhierarchie in C-Sharp ist eine Vererbungshierarchie, die die verschiedenen Arten von Typen in C-Sharp einteilt. Sie ist wesentlich komplexer und vereinheitlicht das Typsystem von C-Sharp, indem alle Typen von System.Object abgeleitet sind.

Frage: Was ist der Unterschied zwischen einer Klassenhierarchie und der Einteilung der verschiedenen Arten von Typen in C-Sharp?
Antwort: Die Klassenhierarchie ist eine Vererbungshierarchie, die alle Typen von System.Object ableitet und das Typsystem von C-Sharp vereinheitlicht. Die Einteilung der verschiedenen Arten von Typen in C-Sharp ist eine Einteilung, die die verschiedenen Arten von Typen in C-Sharp in ValueType, Delegate und class einteilt.

Frage: Was ist eine Einteilung der verschiedenen Arten von Typen in C-Sharp?
Antwort: Die Einteilung der verschiedenen Arten von Typen in C-Sharp ist eine Einteilung, die die verschiedenen Arten von Typen in C-Sharp in ValueType, Delegate und class einteilt.

Frage: Was ist der Unterschied zwischen ValueType, Delegate und class in C-Sharp?
Antwort: ValueType ist ein Wertetyp, der von System.ValueType abgeleitet ist und auf dem Stack gespeichert wird. Delegate ist ein Verweistyp, der von System.Delegate abgeleitet ist und Delegate-Objekte repräsentiert. class ist ein Verweistyp, der von System.Object abgeleitet ist und Klassenobjekte repräsentiert.

Frage: Was ist ein Wertetyp in C-Sharp?
Antwort: Ein Wertetyp ist ein Typ, der von System.ValueType abgeleitet


Wie Ihnen sicher aufgefallen ist, sind einige der Arten von Typen aus der obigen Liste jeweils durch eine spezielle Klasse (Array, Delegate, Attribute) vertreten. Man kann dies als Hinweis darauf verstehen, dass tatsächlich alle Arten von Typen integriert sind und es keine grundsätzlichen Barrieren zwischen ihnen gibt. In C-Sharp haben alle Klassen außer System.Object, genau wie in Java, genau eine Superklasse. Sie können jedoch beliebig viele Interfaces implementieren. Die Tatsache, dass Werttypen als Subtypen eines Referenztypen (nämlich Object) deklariert sind, verrät außerdem, dass C-Sharp über Auto-Boxing und Unboxing verfügt.


Frage: Was ist Auto-Boxing und Unboxing in C-Sharp?
Antwort: Auto-Boxing ist eine automatische Konvertierung eines Werttyps in einen Referenztyp, während Unboxing die umgekehrte Konvertierung ist. Diese Funktionen ermöglichen es, Werttypen als Subtypen eines Referenztyps (nämlich Object) zu deklarieren.

Frage: Wie sind alle Arten von Typen in C-Sharp integriert?
Antwort: Alle Arten von Typen sind in C-Sharp integriert, was daran zu erkennen ist, dass einige Arten von Typen durch spezielle Klassen (Array, Delegate, Attribute) vertreten sind. Klassen, außer System.Object, haben genau eine Superklasse und können beliebig viele Interfaces implementieren. Die Tatsache, dass Werttypen als Subtypen eines Referenztyps (nämlich Object) deklariert sind, verrät außerdem, dass C-Sharp über Auto-Boxing und Unboxing verfügt.

10.1 Vererbung

Unter Vererbung versteht man in der objektorientierten Programmierung die Übertragung der Definition von Eigenschaften und Verhalten (Intension) von einer Klasse auf eine andere. Vererbung dient vor allem der Wiederverwendung von Code und damit der Ökonomie in der Softwareentwicklung.


Frage: Was ist Vererbung in der objektorientierten Programmierung?
Antwort: Vererbung ist die Übertragung der Definition von Eigenschaften und Verhalten (Intension) von einer Klasse auf eine andere. Sie dient vor allem der Wiederverwendung von Code und damit der Ökonomie in der Softwareentwicklung.


Wenn man das Prinzip von Generalisierung und Spezialisierung vor Augen hat, dann ist die Vererbung eigentlich nur noch ein Mechanismus, der Definitionen von einer Klasse auf eine andere überträgt. So wird jede benannte Instanzvariable, die in einer Generalisierung deklariert ist, nicht nur für Instanzen dieser Generalisierung (so sie denn welche hat) angelegt, sondern auch für die Instanzen all ihrer Spezialisierungen. Analog stehen Methoden, die in einer Generalisierung definiert werden, auch ihren Spezialisierungen zur Verfügung, und zwar beinahe so, als wären sie in den Spezialisierungen definiert.


Frage: Was ist Vererbung in der objektorientierten Programmierung?
Antwort: Vererbung ist ein Mechanismus in der objektorientierten Programmierung, der Definitionen von einer Generalisierungsklasse auf eine Spezialisierungsklasse überträgt. So werden benannte Instanzvariablen und Methoden, die in einer Generalisierungsklasse deklariert sind, auch für die Instanzen all ihrer Spezialisierungen verfügbar gemacht.


Spezialisierung und Vererbung scheinen also Hand in Hand zu gehen. Doch ist dies nur solange der Fall, wie man von der Spezialisierung ausgeht und die Vererbung als ökonomisches Abfallprodukt erhält. In der Praxis lässt man sich jedoch leider häufig von oberflächlichen Gewinnerwartungen leiten und folgt der (vermeintlichen) Ökonomie der Vererbung, ohne dabei auf die Prinzipien von Generalisierung und Spezialisierung einzugehen. Obiges Beispiel von Pinguinen und Vögeln hatte bereits gezeigt, zu welchen Komplikationen eine unbedachte Spezialisierung führen kann; im Folgenden soll gezeigt werden, zu welchen Problemen eine Fixierung auf die Nutzung der Vererbung führt.


Frage: Was ist der Unterschied zwischen Spezialisierung und Vererbung?
Antwort: Spezialisierung und Vererbung scheinen Hand in Hand zu gehen, aber in der Praxis kann eine unbedachte Spezialisierung zu Komplikationen führen und eine Fixierung auf die Nutzung der Vererbung zu Problemen. Spezialisierung bezieht sich auf das Erstellen einer Unterklasse, die eine Oberklasse erweitert, während Vererbung ein Mechanismus ist, bei dem eine Unterklasse die Eigenschaften und Methoden einer Oberklasse erbt.


Nun möchte man eine zweite Klasse Rechteck definieren und dabei ausnutzen, dass man bereits eine ähnliche Klasse, nämlich Quadrat, hat. Aus Quadrat könnte man nämlich die Instanzvariable laenge übernehmen. (Das Beispiel wurde absichtlich einfach gewählt, auch wenn es dadurch wenig überzeugend wirkt; das Problem sollte aber trotzdem klar werden.)


Frage: Wie kann man eine Instanzvariable von einer Klasse in eine andere Klasse übernehmen?
Antwort: Man kann eine Instanzvariable von einer Klasse in eine andere Klasse übernehmen, indem man den Code der Variablen in die neue Klasse kopiert. In diesem Fall kann man die Instanzvariable laenge aus der Klasse Quadrat in die Klasse Rechteck übernehmen, indem man den Code für laenge in die Klasse Rechteck kopiert.


Was die Instanzvariablen angeht, so muss Rechteck die Instanzvariable laenge nicht neu definieren, sondern lediglich breite hinzufügen. Allerdings können die Methoden zur Berechnung von Fläche und Umfang nicht mitgeerbt werden, obwohl Quadrate und Rechtecke die Eigenschaft teilen, über solche Merkmale zu verfügen. Die entsprechenden Methoden müssen also in Rechteck neu definiert werden. Man nennt das Überschreiben, weil die neuen Methoden dasselbe tun wie die alten. Die Möglichkeit des Überschreibens ist häufig Voraussetzung dafür, Vererbung überhaupt sinnvoll einzusetzen.


Frage: Was ist Überschreiben in Bezug auf Vererbung?
Antwort: Überschreiben bedeutet, dass eine abgeleitete Klasse dieselben Methoden wie die Basisklasse besitzt, aber die Methoden anders implementiert. Das ist häufig Voraussetzung dafür, Vererbung sinnvoll einzusetzen.

Frage: Was ist Überschreiben in der objektorientierten Programmierung?
Antwort: Überschreiben bedeutet, dass eine Unterklasse dieselben Methoden wie ihre Superklasse besitzt, aber die Unterklasse die Methoden anders implementiert. Das ist häufig Voraussetzung dafür, Vererbung überhaupt sinnvoll einzusetzen.


Wenn man nun glaubt, man hätte gleichzeitig mit der Vererbung auch eine Spezialisierungs- bzw. Generalisierungsbeziehung geschaffen, irrt man sich: Die Menge der Quadrate enthält nicht die Menge der Rechtecke, was eine charakteristische Begleiterscheinung der Generalisierung gewesen wäre. Dass die Intension von Rechteck umfangreicher ist als die von Quadrat (sie enthält eine Instanzvariable mehr), ist eine Täuschung: Ein Quadrat hat, genau wie ein Rechteck, vier Seiten, nur ist die Bedingung für diese vier Seiten in Quadraten die, dass sie alle gleich lang sind, so dass man sich drei Instanzvariablen sparen kann; für Rechtecke sind nur jeweils zwei Seiten gleich lang, so dass man sich nur zwei Instanzvariablen spart. Die Intension für Quadrate ist aber trotzdem restriktiver als die für Rechtecke (sie enthält eine zusätzliche Bedingung), so dass der inverse Zusammenhang von Intension und Extension auch für Quadrate und Rechtecke gilt: je größer die Intension, desto kleiner die Extension (und umgekehrt).


Frage: Wie hängt die Intension und Extension zusammen?
Antwort: Je größer die Intension (die Menge der Eigenschaften) ist, desto kleiner ist die Extension (die Menge der Objekte, die diese Eigenschaften erfüllen).

Frage: Was ist der Unterschied zwischen Vererbung und Generalisierung?
Antwort: Vererbung und Generalisierung sind zwei verschiedene Konzepte. Wenn man denkt, man hätte mit der Vererbung auch eine Generalisierungsbeziehung geschaffen, ist man auf dem Holzweg. Ein Beispiel: Die Menge der Quadrate enthält nicht die Menge der Rechtecke, was eine charakteristische Begleiterscheinung der Generalisierung gewesen wäre. Der Unterschied liegt in der Intension und Extension: Die Intension von Rechteck ist umfangreicher als die von Quadrat, da sie eine Instanzvariable mehr enthält. Die Intension von Quadrat ist aber trotzdem restriktiver als die von Rechteck, da sie eine zusätzliche Bedingung enthält.


Das Problem mit der Vererbung ist nun, dass sie auf die oberflächliche Wiederverwendung von Elementen einer Klassendefinition ausgerichtet ist. Sie lässt dabei insbesondere den Zusammenhang der Extensionen der beteiligten Klassen, der für Generalisierung/Spezialisierung wesentlich ist, außer Acht. Diese Ignoranz hat jedoch weitreichende Konsequenzen, die wir in Kapitel 26 von Kurseinheit 3 noch kennenlernen werden.


Frage: Was ist das Problem mit der Vererbung?
Antwort: Das Problem mit der Vererbung ist, dass sie auf die oberflächliche Wiederverwendung von Elementen einer Klassendefinition ausgerichtet ist und dabei den Zusammenhang der Extensionen der beteiligten Klassen außer Acht lässt, was für Generalisierung/Spezialisierung wesentlich ist. Diese Ignoranz hat weitreichende Konsequenzen.


Man hätte nun auch umgekehrt vorgehen können und dabei das Prinzip von Generalisierung und Spezialisierung hochhalten können, indem man Quadrat von Rechteck erben lässt (sofern man akzeptiert, dass die Generalisierung Rechteck eigene Instanzen hat). Der Nachteil dieses Ansatzes wäre jedoch, dass Quadrat dann ebenfalls zwei Instanzvariablen für Seitenlängen hätte, obwohl eine ausgereicht hätte. Auf der anderen Seite hätte man die Methoden für Fläche und Umfang nicht überschreiben müssen, denn wenn laenge und breite gleich sind, unterscheiden sich die beiden obigen Implementierungen von flaeche und umfang im Ergebnis nicht. Man muss nur sicherstellen, dass in Instanzen von Quadrat laenge und breite tatsächlich immer gleiche Werte haben.


Frage: Was ist Generalisierung und Spezialisierung in Bezug auf objektorientierte Programmierung?
Antwort: Generalisierung und Spezialisierung sind Prinzipien in der objektorientierten Programmierung. Dabei wird eine allgemeine Klasse (Generalisation) erstellt, die dann durch eine spezifischere Klasse (Spezialisation) erweitert wird. In diesem Fall wird die Klasse Rechteck als allgemeine Klasse angesehen und Quadrat als spezifischere Klasse, die von Rechteck erbt.


Nun kann man aber auch auf die Idee kommen, die zu viel geerbte Instanzvariable breite einfach wieder zu löschen. Tatsächlich ist dies vom Standpunkt der Vererbung aus kein Problem: Genauso, wie man Teile der Definition überschreiben kann, kann man sie auch löschen. Im konkreten Fall der Klasse Quadrat, die von Rechteck erbt, müsste man mit dem Löschen von breite aber auch die Methoden flaeche und umfang überschreiben. (Das Löschen von Methoden wäre auch möglich, wird hier aber nicht gebraucht.)


Frage: Kann man eine Instanzvariable löschen, die von einer übergeordneten Klasse geerbt wurde?
Antwort: Ja, man kann eine Instanzvariable löschen, die von einer übergeordneten Klasse geerbt wurde. Allerdings muss man dann auch die Methoden, die diese Instanzvariable verwenden, überschreiben.

Frage: Was passiert, wenn man eine Instanzvariable löscht, die von einer übergeordneten Klasse geerbt wurde?
Antwort: Wenn man eine Instanzvariable löscht, die von einer übergeordneten Klasse geerbt wurde, muss man auch die Methoden, die diese Instanzvariable verwenden, überschreiben.


Was bleibt, ist ein Eindruck von Beliebigkeit bei der Vererbungsrichtung, die für Generalisierung/Spezialisierung nicht existiert. In gewisser Weise spiegeln Generalisierung/Spezialisierung und Vererbung auch zwei verschiedene Weltansichten wider: Generalisierung/Spezialisierung steht für die Ordnung eines Systems von Klassen mit Blick von außen und für das Ganze (die sog. Client-Schnittstelle), Vererbung für die Pragmatik des Programmierens mit Blick von innen und einem Fokus auf Wiederverwendung (die Vererbungsschnittstelle). Vererbung stellt eine Art genetischen Zusammenhang zwischen Klassen dar, der deren Entstehung aus Vorhandenem widerspiegelt, Generalisierung/Spezialisierung eher eine abstrakte Ordnung. Vererbung bringt Komplexität in ein System, Generalisierung/Spezialisierung versucht, sie durch Strukturierung zu reduzieren. Wie Sie gesehen haben, führen beide Sichten nicht automatisch zum selben Ergebnis; sie zu vereinen ist die hohe Kunst des objektorientierten Entwurfs.


Frage: Was ist der Unterschied zwischen Generalisierung/Spezialisierung und Vererbung in der objektorientierten Programmierung?
Antwort: Generalisierung/Spezialisierung und Vererbung sind zwei verschiedene Konzepte in der objektorientierten Programmierung. Generalisierung/Spezialisierung steht für die Ordnung eines Systems von Klassen mit Blick von außen und für das Ganze, während Vererbung für die Pragmatik des Programmierens mit Blick von innen und einem Fokus auf Wiederverwendung steht. Vererbung stellt eine Art genetischen Zusammenhang zwischen Klassen dar, während Generalisierung/Spezialisierung eher eine abstrakte Ordnung ist. Vererbung bringt Komplexität in ein System, während Generalisierung/Spezialisierung versucht, sie durch Strukturierung zu reduzieren.

43.3 Beschränkter parametrischer Polymorphismus in Java

Wie bereits erwähnt, erwirbt man mit einfachem parametrischem Polymorphismus außerhalb der Typdefinition Typsicherheit auf Kosten der fehlenden Typsicherheit innerhalb. Solange man keine Aussagen über den konkreten Typ machen kann, der für einen Typparameter eingesetzt wird, kann man bei der Implementierung einer Klasse, die den parametrischen Typ definiert, auch keine Eigenschaften der Objekte voraussetzen, die von dem (unbekannten) Typ sein sollen. Was man stattdessen benötigt, ist beschränkter parametrischer Polymorphismus. Natürlich gibt es diesen auch in Java.


Frage: Was ist beschränkter parametrischer Polymorphismus?
Antwort: Beschränkter parametrischer Polymorphismus ist eine Erweiterung des einfachen parametrischen Polymorphismus, bei dem man zusätzliche Bedingungen an den Typparameter stellen kann. Dadurch kann man bei der Implementierung einer Klasse, die den parametrischen Typ definiert, Eigenschaften der Objekte voraussetzen, die von dem (bekannten) Typ sein sollen.

Frage: Was ist der Unterschied zwischen parametrischen Polymorphismus und beschränktem parametrischen Polymorphismus in Java?
Antwort: Parametrischer Polymorphismus in Java erlaubt es, eine Klasse oder Methode mit einem Typparameter zu definieren, der bei der Instanziierung mit einem konkreten Typ ersetzt wird. Beschränkter parametrischer Polymorphismus hingegen erlaubt es, zusätzlich zu dem Typparameter, bestimmte Eigenschaften des konkreten Typs vorauszusetzen, der für den Typparameter eingesetzt wird. Dadurch kann man in der Implementierung der Klasse oder Methode, die den Typparameter definiert, davon ausgehen, dass diese Eigenschaften beim konkreten Typ vorhanden sind, und diese nutzen.


Die möglichen Werte der Typvariable "E" werden dadurch auf Typen eingeschränkt, die "Comparable" (direkt oder indirekt) erweitern. Die Implementierung der Methode zum Einfügen und Entfernen von Elementen in sortierten Listen kann also davon ausgehen, dass alle Objekte, die in einer solchen Liste gespeichert sind, die Methode "compareTo(.)" verstehen, die vom Interface "Comparable" vorgeschrieben wird. Beachten Sie, dass dadurch keine neue Subtypenrelation zwischen irgendwelchen Typen hergestellt wird. Es werden lediglich die Möglichkeiten eingeschränkt, konkrete Typen (z. B. in Variablendeklarationen) zu bilden. Wobei "String" ein Subtyp von "Comparable" ist, ist also möglich. Dennoch ist "SortedList<String>" kein Subtyp von "SortedList<Comparable>".

Frage: Was bedeutet es, wenn eine Typvariable auf einen generischen Typ eingeschränkt wird?
Antwort: Wenn eine Typvariable auf einen generischen Typ eingeschränkt wird, werden die möglichen Werte der Typvariable auf Typen eingeschränkt, die den eingeschränkten Typ direkt oder indirekt erweitern. Dadurch werden die Möglichkeiten konkreter Typen (z.B. in Variablendeklarationen) zu bilden eingeschränkt. Es wird jedoch keine neue Subtypenrelation zwischen irgendwelchen Typen hergestellt.

Weitere Fragen zu KE7

Frage: Welches Mittel wird empfohlen, um unnötigen Aufwand und Konflikte in Bezug auf Formatierung zu vermeiden?
Antwort: Es wird empfohlen, automatische Codeformatierer zu verwenden, die auf Knopfdruck bestimmte Formatierungskonventionen anwenden. Selbst wenn man alleine arbeitet, sollte man solche Tools nutzen, um sich an allgemein übliche Formatierungsstandards zu halten und die Entwicklung eines persönlichen Programmierstils nicht zu weit von der Norm entfernen zu lassen. Individualität in der Programmierung ist nicht geeignet, um effizienten und wartbaren Code zu produzieren.

Frage: Welche Vorteile haben Namenskonventionen in der Programmierung?
Antwort: Namenskonventionen in der Programmierung haben mehrere Vorteile. Sie erleichtern die Bezeichnerwahl, begrenzen die schöpferische Freiheit der Programmiererin, was als Entlastung empfunden werden kann, und machen das Lesen von Code einfacher, da Entwicklerinnen, die die Konventionen kennen, die Bedeutung der Bezeichner schneller entschlüsseln können und sich somit schneller zurechtfinden.

Frage: Welche Wortarten einer natürlichen Sprache sollten für verschiedene Arten von Programmelementen verwendet werden?
Antwort: Es ist angemessen, die verschiedenen Wortarten einer natürlichen Sprache für verschiedene Arten von Programmelementen zu verwenden. Zum Beispiel werden in der objektorientierten Programmierung Substantive oft für Klassennamen verwendet.

Frage: Welche Art von Methoden wird oft mit Verben benannt, und welche Formen von Verben können verwendet werden?
Antwort: Methoden, die eine Aktion implementieren (Befehle), werden oft mit Verben benannt. Bei der Wahl der Verben ist es eine Stilfrage, ob man die Infinitiv- oder die Imperativform bevorzugt. Beispielsweise kann man "hinzufügen" (Infinitivform) oder "entfernen" (Imperativform) verwenden.

Frage: Welche Namenskonvention wird für Methoden, die Abfragen darstellen (Queries), vorgeschlagen?
Antwort: Für Methoden, die Abfragen darstellen (Queries), werden oft Adjektive oder Kopula plus Prädikatsnomen verwendet. Beispiele hierfür sind "istLeer" oder "hatInhalt."

Frage: Welche Wortarten werden für Instanzvariablen verwendet, abhängig davon, ob sie Attribute oder Beziehungen repräsentieren?
Antwort: Für Instanzvariablen, die Attribute repräsentieren, wie Größe oder Farbe, verwendet man oft den Namen der Qualität als Substantiv. Wenn es sich um zweiwertige (Boolesche) Attribute handelt, nimmt man das entsprechende Adjektiv oder ein Gerundivum. Für Instanzvariablen, die Beziehungen repräsentieren, verwendet man oft den Namen der Gegenrolle, wie "mutter" in einer Kind-Mutter-Beziehung.

Frage: Was ist eine interessante Option für Programmiererinnen, deren Muttersprache nicht Englisch ist, in Bezug auf die Wahl der Bezeichner?
Antwort: Programmiererinnen, deren Muttersprache nicht Englisch ist, haben die Möglichkeit, zwischen zwei Sprachen bei der Wahl der Bezeichner zu wählen und damit eine zusätzliche Form der Differenzierung einzusetzen. Man kann deutsche Bezeichner für Begrifflichkeiten aus der Anwendungsdomäne und englische Bezeichner für technische Umsetzungselemente verwenden, oder alle selbst beigesteuerten Programmelemente auf Deutsch benennen, um sie von denen aus Bibliotheken und Frameworks zu unterscheiden.

Frage: Welche Faustregel wird genannt, um einen guten Namen für ein Programmelement auszuwählen?
Antwort: Als Faustregel wird genannt, dass ein Name dann gut gewählt ist, wenn man alle Ausdrücke, in denen er vorkommt, schnell und klar verstehen kann. Ein gut gewählter Name sollte keine falschen Assoziationen oder Vermutungen hervorrufen und sollte somit leicht verständlich sein. Es ist ratsam, sich Zeit für die Auswahl eines passenden Namens zu nehmen, da dies eine sorgfältige Überlegung erfordert und die Lesbarkeit des Codes erheblich verbessern kann.

Frage: Welche Vorteile ergeben sich aus kurzen Methoden in der objektorientierten Programmierung?
Antwort: Kurze Methoden in der objektorientierten Programmierung fördern die Lesbarkeit und den objektorientierten Stil. Sie erlauben es, Teile einer Methode in separate, klar benannte Methoden auszulagern, was die Lesbarkeit und Wartbarkeit des Codes verbessert. Dieser Stil fördert auch die Verwendung von aussagekräftigen Bezeichnern und trägt zur besseren Dokumentation des Codes bei.

Frage: Welches Refactoring-Verfahren wird häufig angewendet, um Teile einer Methode in separate Methoden auszulagern?
Antwort: Das "Extract-method"-Refactoring-Verfahren wird häufig angewendet, um Teile einer Methode in separate Methoden auszulagern. Dieses Verfahren ermöglicht es, Teile des Codes in neue Methoden auszulagern, selbst wenn diese Teile vorerst nur von ihrer ursprünglichen Position aus aufgerufen werden, um die Lesbarkeit zu verbessern. Es handelt sich um eine gängige Praxis in der objektorientierten Programmierung.

Frage: Was ist ein wichtiges Merkmal der objektorientierten Programmierung in Bezug auf die Größe von Klassen?
Antwort: Ein wichtiges Merkmal der objektorientierten Programmierung ist, dass Klassen nicht ins Uferlose wachsen sollten. Wenn der Methodenumfang einer Klasse zu groß wird, deutet dies darauf hin, dass die Klasse möglicherweise mehrere Abstraktionen repräsentiert oder auf einem höheren Abstraktionsniveau steht als die aktuelle Implementierung.

Frage: Welche Gründe können dazu führen, dass eine Klasse in der objektorientierten Programmierung zu groß wird?
Antwort: Es gibt zwei mögliche Gründe, warum eine Klasse in der objektorientierten Programmierung zu groß werden kann: Die Klasse repräsentiert nicht nur eine Abstraktion der Anwendungsdomäne, sondern mehrere. In diesem Fall sollte die Klasse in mehrere Teilklassen aufgeteilt werden, wobei jede Teilklassen eine Abstraktion darstellt, und die Daten und Methoden entsprechend zugeordnet werden. Die Klasse repräsentiert eine Abstraktion der Anwendungsdomäne auf einem höheren Abstraktionsniveau als die aktuelle Implementierung. Dies kann entweder bedeuten, dass die Klasse eine Generalisierung darstellt und alle Spezialisierungen in einer Klasse zusammengefasst sind oder dass die Klasse eine Aggregation oder Komposition darstellt und Teile als logische Einheiten identifiziert werden müssen.

Frage: Welche Schritte sollten unternommen werden, wenn eine Klasse zu groß wird?
Antwort: Wenn eine Klasse zu groß wird, sollten die folgenden Schritte unternommen werden, abhängig von der Ursache der Größe: Wenn die Klasse mehrere Abstraktionen repräsentiert, sollte die Klasse in mehrere Teilklassen aufgeteilt werden, wobei jede Teilklassen eine Abstraktion darstellt, und die Daten und Methoden entsprechend zugeordnet werden. Wenn die Klasse eine Generalisierung darstellt, sollten die unterschiedlichen Spezialisierungen identifiziert und die jeweils darauf bezogenen Daten und Funktionen in neu zu schaffende Subklassen verlagert werden. Das gemeinsame Protokoll sollte idealerweise in der neuen Superklasse verbleiben. Wenn die Klasse eine Aggregation oder Komposition darstellt, sollten die Teile als logische Einheiten identifiziert und neue Klassen formuliert werden. Falls diese neuen Klassen außerhalb der Abstraktion keine Bedeutung haben, kann in Erwägung gezogen werden, sie als innere Klassen zu deklarieren, um den Namensraum nicht unnötig zu überfrachten und die Anzahl der wahrgenommenen Klassen nicht unnötig zu erhöhen.

Frage: Was ist eine gängige Namenskonvention in Bezug auf Interfacetypen?
Antwort: Eine gängige Namenskonvention ist, Namen von Interfacetypen mit einem großen "I" beginnen zu lassen. Zum Beispiel könnte ein Interface "Auto" als "IAuto" benannt werden.

Frage: Was ist die ungarische Notation in Bezug auf Namenskonventionen?
Antwort: Die ungarische Notation ist eine Namenskonvention, bei der Bezeichner, die für ein Objekt oder einen Wert stehen (wie Variablen und Funktionsnamen), den Typ dieses Objekts oder Werts widerspiegeln. Es gibt verschiedene Auslegungen der ungarischen Notation.

Frage: Was sind die möglichen Auslegungen der ungarischen Notation?
Antwort: Eine mögliche Auslegung der ungarischen Notation verlangt, dass Variablen, die Strings bezeichnen, mit "str" beginnen. Diese Auslegung kann jedoch als weniger sinnvoll angesehen werden, da Compiler und IDE bereits Informationen über den Typ der Variablen bereitstellen und diese Information den Namen der Variablen nicht zusätzlich belasten sollte. Eine sinnvollere Auslegung der ungarischen Notation schlägt vor, Variablen um die Verwendung ihres Inhalts zu ergänzen. Das bedeutet, die Funktion des durch die Variable bezeichneten Objekts oder Werts innerhalb des Kontextes anzugeben, in dem die Variable gültig ist. Dies ermöglicht es, die Funktion kontextbezogen auszudrücken, ohne den Namen der Variable mit redundanten Informationen zu belasten. In der objektorientierten Programmierung kann diese kontextbezogene Funktion oft auch durch die Verwendung eines Interfaces anstelle einer Klasse als Typ bei der Deklaration der Variable ausgedrückt werden, was vom Compiler überprüft werden kann.

Frage: Welche Rolle spielen Bibliotheken in der objektorientierten Programmierung?
Antwort: Bibliotheken spielen eine entscheidende Rolle in der objektorientierten Programmierung. Sie sind ein wesentlicher Bestandteil des objektorientierten Programmierstils und tragen maßgeblich zum Erfolg dieses Ansatzes bei.

Frage: Welche Techniken und Praktiken kennzeichnen den deklarativen Programmierstil in der objektorientierten Programmierung?
Antwort: Der deklarative Programmierstil in der objektorientierten Programmierung zeichnet sich durch folgende Techniken und Praktiken aus: Verwendung von aussagekräftigen Bezeichnern, die beschreiben, was eine Methode tut. Aufteilung von komplexen Funktionen in separate Methoden mit klaren Namen. Betonung des "Was" anstelle des "Wie" bei der Formulierung des Codes. Verwendung von Zusicherungen (Vor- und Nachbedingungen, Invarianten) anstelle von Kommentaren, um die Absichten und Bedingungen des Codes deutlicher zu machen. Zurückhaltung bei der Verwendung von Optimierungen, die die funktionale Äquivalenz gefährden könnten, bis ihre Auswirkungen vollständig verstanden sind.

Frage: Was ist der Sinn und Zweck des Gesetzes Demeters in der objektorientierten Programmierung?
Antwort: Der Sinn und Zweck des Gesetzes Demeters ist es, die Kopplung und die Entwurfsabhängigkeiten zwischen Klassen zu verringern. Wenn das Gesetz Demeters verletzt wird, kann eine Änderung des Protokolls einer Klasse dazu führen, dass auch Klassen angepasst werden müssen, die selbst in keiner unmittelbaren Beziehung zur Klasse stehen, was vermieden werden sollte.

Frage: Welche Art von Zugriffsregel führt Demeters Gesetz faktisch ein?
Antwort: Demeters Gesetz führt faktisch eine neue, kontextabhängige Zugriffsregel ein: Eigenschaften von Objekten, die ein Objekt nicht selbst kennt, sind für das Objekt gleichgestellt mit denen von Objekten, die es zwar selbst kennt, auf die es aber nicht zugreifen darf. Dies führt zu einer klaren Trennung zwischen direkten und indirekten Beziehungen zwischen Objekten.

Frage: Wie kann die Einhaltung von Namenskonventionen die Kreativität der Entwicklerinnen fördern?
Antwort: Die Einhaltung von Namenskonventionen kann die Kreativität der Entwicklerinnen fördern, indem sie die schöpferische Energie auf die relevanten Aspekte lenkt. Durch die Festlegung bestimmter Regeln wird die Entwicklerin in ihrer kreativen Gestaltung eingeschränkt, was jedoch dazu führen kann, dass die Kreativität gezielter eingesetzt wird und besser zur Geltung kommt.

Frage: Wie kann die Analysephase eines Projekts zur Identifizierung der Klassen eines Systems beitragen?
Antwort: In der Analysephase eines Projekts können alle Substantive aus der Spezifikation extrahiert werden, um auf der Basis dieser Liste die Menge der Klassen eines Systems zu identifizieren. Dies ist eine vielzitierte objektorientierte Technik.

Frage: Wann sollte der lange Name einer Variable bevorzugt werden?
Antwort: Der lange Name einer Variable sollte bevorzugt werden, sobald dies nicht mehr der Fall ist, wenn die Sichtbarkeit der Variable über die unmittelbare Umgebung der Deklaration hinausgeht, wie es typischerweise bei der Deklaration von Instanzvariablen der Fall ist. Dies gilt auch, wenn der Typ der Variable aus dem Kontext abgeleitet werden kann (Typinferenz).

Frage: Wie kann man die Einhaltung des Gesetzes Demeters sicherstellen und dennoch die Funktionalität von Ausdrücken beibehalten?
Antwort: Um sowohl die Funktionalität von Ausdrücken beizubehalten als auch das Gesetz Demeters einzuhalten, kann man das Protokoll der Klasse des ersten Nachrichtenempfängers erweitern. Dies bedeutet, dass die Klasse des von "a" benannten Objekts um die Methode "doY" erweitert wird, wenn "a" das Ergebnis von "doX" ist. Dadurch wird sicherer gestellt, dass "a" auch die Methode "doY" aufruft und das Ergebnis zurückgibt.

Frage: Wann wird das Gesetz Demeters typischerweise verletzt, und wie äußert sich diese Verletzung?
Antwort: Das Gesetz Demeters wird typischerweise verletzt, wenn Nachrichten an Objekte gesendet werden, die selbst nur als Ergebnis eines Nachrichtenausdrucks vorliegen. Dies tritt oft bei Kettenaufrufen auf oder kann durch eine zwischenzeitliche Zuweisung zu einer temporären Variable erfolgen. Eine Verletzung des Gesetzes Demeters äußert sich darin, dass Nachrichten an Objekte gesendet werden, die nicht vom Sender direkt gekannt oder erzeugt wurden.

Frage: Wie wird das Gesetz Demeters oft in einer kurzen Phrase zusammengefasst?
Antwort: Das Gesetz Demeters wird oft in folgender Phrase zusammengefasst: "Sprich nicht mit Fremden." In Bezug auf SMALLTALK bedeutet dies, dass Methodenaufrufe zwar geschachtelt, aber nicht verkettet erfolgen dürfen.

Frage: Warum ist die Vererbung ein Aushängeschild und gleichzeitig ein Problem in der objektorientierten Programmierung?
Antwort: Die Vererbung ist ein Aushängeschild und gleichzeitig ein Problem in der objektorientierten Programmierung, weil sie einerseits ein mächtiges Konzept zur Wiederverwendung von Code und zur Erstellung von Klassenhierarchien darstellt, andererseits aber auch dazu führen kann, dass Änderungen an einer Klasse sich auf alle davon abgeleiteten Klassen auswirken. Dies kann die Wartbarkeit und Erweiterbarkeit des Codes beeinträchtigen und zu unerwartetem Verhalten führen.

Frage: Was besagt die gewichtigste Regel im Zusammenhang mit Vererbung?
Antwort: Die gewichtigste Regel im Zusammenhang mit Vererbung besagt: "Deklariere jede Klasse entweder als abstrakt oder als final." Das bedeutet, dass Klassen entweder als abstrakt (nicht instanziierbar) oder als final (nicht ableitbar) deklariert werden sollten.

Frage: Warum sollten nur die Blätter der Klassenhierarchie instanziierbar sein?
Antwort: Die Blätter der Klassenhierarchie sollten instanziierbar sein, weil dies sicherstellt, dass Änderungen an einer Klasse nur Auswirkungen auf diese Klasse selbst haben und nicht auf alle davon abgeleiteten Klassen. Wenn eine Klasse in der Hierarchie geändert werden muss, können diese Änderungen in der Klasse selbst oder in ihren Subklassen vorgenommen werden, ohne die anderen Klassen in der Hierarchie zu beeinflussen.

Frage: Warum ist es wichtig, Klassen als abstrakt oder final zu deklarieren, um Änderungen an der Funktionalität der Klasse zu ermöglichen?
Antwort: Das Deklarieren von Klassen als abstrakt oder final ermöglicht es, Änderungen an der Funktionalität der Klasse auf sichere Weise durchzuführen. Wenn eine Klasse als abstrakt deklariert ist, können Änderungen in den abgeleiteten Subklassen vorgenommen werden, ohne die anderen Klassen in der Hierarchie zu beeinflussen. Wenn eine Klasse als final deklariert ist, kann sie nicht abgeleitet werden, was bedeutet, dass ihre Funktionalität nicht geändert werden kann. Dies ermöglicht es, den Vertrag zwischen der Klasse und ihren Klienten zu schützen und unerwartete Verhaltensänderungen zu verhindern.

Frage: Warum ist die Verwendung von abstrakten Klassen in Bibliotheken eine Möglichkeit, die Beschränkungen von finalen Klassen zu umgehen?
Antwort: Die Verwendung von abstrakten Klassen in Bibliotheken ermöglicht es, die Beschränkungen von finalen Klassen zu umgehen, indem sie eine Schicht der Abstraktion hinzufügen. Anstatt eine Klasse als final zu deklarieren, wird sie als abstrakt deklariert und per Vererbung eine Subklasse davon abgeleitet, die konkret (instanziierbar) und final ist. Auf diese Weise können Klienten der Bibliothek von der abgeleiteten, finalen Klasse erben und diese verwenden, ohne die ursprüngliche Klasse ändern zu müssen. Wenn Änderungen erforderlich sind, können sie in der finalen Klasse vorgenommen werden, und nur wenn sie für alle Klienten geeignet sind, werden sie in der abstrakten Superklasse durchgeführt. Dies ermöglicht eine gewisse Flexibilität bei der Aktualisierung von Bibliotheken, ohne den Vertrag mit den Klienten zu brechen.

Frage: Warum sind Formatierungskonventionen in der Programmierung wichtig?
Antwort: Formatierungskonventionen in der Programmierung sind wichtig, da sie die Lesbarkeit des Codes verbessern. Sie regeln Dinge wie Einrückungen, Zeilenumbrüche, Leerzeichen und Leerzeilen, um den Code übersichtlicher zu gestalten.

Frage: Warum sind Formatierungskonventionen besonders in Teamprojekten wichtig?
Antwort: In Teamprojekten sind Formatierungskonventionen besonders wichtig, um zu verhindern, dass jede Entwicklerin im Team ihre eigenen Formatierungsvorlieben pflegt. Ohne einheitliche Konventionen kann es passieren, dass Entwicklerinnen den Code anderer Teammitglieder nach ihren eigenen Vorlieben formatieren, was zu Konflikten und ineffizienter Arbeit führen kann.

Frage: Warum ist es wichtig, dass Namenskonventionen genau festgeschrieben sind und von allen akzeptiert werden?
Antwort: Es ist wichtig, dass Namenskonventionen genau festgeschrieben sind und von allen akzeptiert werden, da andernfalls individuelle Auslegungen der Regeln Verwirrung stiften können. Wenn jede Person ihre eigene Auslegung hat, verliert die Namenskonvention ihren Nutzen und kann sogar zu mehr Verwirrung führen.

Frage: Warum werden Interfaces oft mit Substantiven oder Adjektiven bezeichnet?
Antwort: Interfaces sind wie Klassen Typen, aber sie bezeichnen keine Allgemeinbegriffe, sondern eher Rollen, die die Objekte spielen können. Diese Rollen werden häufig durch Substantive oder Adjektive bezeichnet. Zum Beispiel enden viele Interfacenamen im Englischen auf „able“ oder „ible“, wie "Serializable."

Frage: Warum könnte die Verwendung langer, sprechender Bezeichner in der Programmierung problematisch sein?
Antwort: Die Verwendung langer, sprechender Bezeichner kann in der Programmierung problematisch sein, da der Programmtext dadurch übermäßig lang wird. Anweisungen, die normalerweise in eine Zeile passen würden, müssen möglicherweise mehrfach umgebrochen werden, was die Lesbarkeit beeinträchtigen kann. Außerdem hört man gelegentlich das Argument, dass lange Namen zusätzliche Schreibarbeit für die Entwicklerin bedeuten. Dieses Argument wird jedoch in der Regel nicht akzeptiert, da die meisten Entwicklungsumgebungen über automatische Vervollständigungsfunktionen verfügen, die das Tippen erleichtern.

Frage: Warum sind die Methoden in objektorientierten Programmen im Durchschnitt ziemlich kurz?
Antwort: Die Methoden in objektorientierten Programmen sind im Durchschnitt ziemlich kurz, weil in der objektorientierten Programmierung die Funktionalität auf Basis der Daten, von denen sie abhängt, aufgebrochen und aufgeteilt wird. Wenn eine Funktion verschiedene Arten von Daten manipuliert, wird die Funktionalität wahrscheinlich nicht vollständig in einer Methode implementiert.

Frage: Warum ist die Verwendung von Bibliotheken in der objektorientierten Programmierung wichtig?
Antwort: Die Verwendung von Bibliotheken in der objektorientierten Programmierung bietet mehrere Vorteile: Sie ermöglicht es, Lösungen für Probleme aus vorhandenen, bewährten und weit verbreiteten Bibliotheken zusammenzustellen, was Zeit und Aufwand spart. Bibliotheken enthalten in der Regel korrekte Implementierungen von Funktionen und berücksichtigen Probleme sowie Sonderfälle, die ein einzelner Entwickler möglicherweise übersehen würde. Die Wartung und Anpassung von Bibliotheken wird oft von anderen Entwicklern übernommen, was die Entwickler entlastet. Die Verwendung weit verbreiteter Bibliotheken erleichtert die Kommunikation und Zusammenarbeit mit anderen Entwicklern, da diese bereits mit den Bibliotheken vertraut sind.

Frage: Warum sollten Entwickler in der objektorientierten Programmierung Bibliotheken nutzen?
Antwort: Entwickler sollten Bibliotheken in der objektorientierten Programmierung nutzen, um Zeit zu sparen, Fehler zu vermeiden, auf bewährte Lösungen zuzugreifen und den Entwicklungsprozess effizienter zu gestalten. Die Verwendung von Bibliotheken ermöglicht es Entwicklern, sich auf die spezifischen Anforderungen ihres Projekts zu konzentrieren, anstatt grundlegende Funktionen und Implementierungen selbst zu schreiben. Dies trägt zur Produktivität und Qualität der Software bei.

Frage: Was kennzeichnet den deklarativen Programmierstil in der objektorientierten Programmierung?
Antwort: Der deklarative Programmierstil in der objektorientierten Programmierung legt mehr Wert auf das "Was" als auf das "Wie". Er betont die Ausdrucksform und verschiebt mögliche Optimierungen auf den Compiler oder später in der Entwicklung. Das bedeutet, dass die Programmiererin sich auf das Beschreiben dessen konzentriert, was erreicht werden soll, anstatt detaillierte Anweisungen zur Durchführung zu geben.

Frage: Warum ist der deklarative Programmierstil in der objektorientierten Programmierung trotz ihres eher imperativen Charakters relevant?
Antwort: Der deklarative Programmierstil ist in der objektorientierten Programmierung relevant, da er die Lesbarkeit und Wartbarkeit des Codes verbessert. Obwohl die objektorientierte Programmierung tendenziell eher imperativ ist, kann der deklarative Stil durch den Einsatz von aussagekräftigen Bezeichnern und die Aufteilung von Funktionalität in separate Methoden erreicht werden. Dies führt dazu, dass der Code leichter zu verstehen ist und die Absicht der Programmiererin klarer hervortritt.

Frage: Warum sind Abkürzungen in der Programmierung nicht grundsätzlich zu vermeiden?
Antwort: Abkürzungen in der Programmierung sind nicht grundsätzlich zu vermeiden, besonders wenn sie etabliert sind und die Leserin des Programms wahrscheinlich weiß, was sie bedeuten. Dies kann dazu beitragen, zu lange Namen zu vermeiden und den Code lesbarer zu machen.

Frage: Warum sollte man auf selbst erstellte Abkürzungen verzichten?
Antwort: Auf selbst erstellte Abkürzungen sollte man verzichten, da ihre Bedeutung oft nur von der Person bekannt ist, die sie erstellt hat. Dies kann die Lesbarkeit des Codes für andere Programmiererinnen beeinträchtigen und zu Missverständnissen führen.

Frage: In welchen Fällen ist die Verwendung von Abkürzungen in Java und ähnlichen objektorientierten Programmiersprachen legitim?
Antwort: In Java und ähnlichen objektorientierten Programmiersprachen ist die Verwendung von Abkürzungen legitim, wenn Typen und Variablen denselben Namen haben und sich nur in der Groß- bzw. Kleinschreibung ihres Anfangsbuchstabens unterscheiden. Dies kann in Fällen auftreten, in denen es keinen besseren Namen für die Variable gibt und die Sichtbarkeit der Variable auf die unmittelbare Umgebung der Deklaration beschränkt ist.

Frage: Ist es möglich, die Einhaltung des Gesetzes Demeters automatisch zu überprüfen? Warum oder warum nicht?
Antwort: Die automatische Überprüfung des Gesetzes Demeters gestaltet sich schwierig, da das Gesetz in Bezug auf Objekte formuliert ist und die Auswertung von konkreten Zuweisungen und dynamischen Programmfluss erfordern würde, was mechanisch extrem aufwendig oder sogar unmöglich ist. Stattdessen überprüfen automatische Checker des Gesetzes Demeters in der Regel die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters haben.

Frage: Warum ist die automatische Überprüfung des Gesetzes Demeters in SMALLTALK nicht möglich?
Antwort: In SMALLTALK ist die automatische Überprüfung des Gesetzes Demeters nicht möglich, da Ausdrücke in SMALLTALK nicht typisiert sind. Daher können Checker nicht feststellen, ob die Art und Weise, wie auf Objekte zugegriffen wird, dem Gesetz Demeters entspricht.

Frage: Was besagt das Gesetz Demeters in Bezug auf die Nachrichtenübermittlung in der objektorientierten Programmierung?
Antwort: Das Gesetz Demeters besagt, dass Nachrichten nur an Objekte versendet werden dürfen, die der Sender selbst kennt oder erzeugt. Ein Objekt kennt ein anderes, wenn es in direkter Beziehung dazu steht, indem es auf eine Variable direkt zugreift, die das andere Objekt benennt. Die Dauer des Kennens kann variieren, wobei Instanzvariablen eine dauerhafte Bindung darstellen, während formale Parameter einer Methode temporär bekannt sind.

Frage: Warum muss man bei der Verwendung von Collections als Zwischenobjekte immer eine Ausnahme von Demeters Gesetz machen?
Antwort: Bei der Verwendung von Collections als Zwischenobjekte muss man eine Ausnahme von Demeters Gesetz machen, weil die Verwendung von Iteratoren und Methoden wie "detect:" eine Verkettung von Nachrichten erzeugt, die in direktem Widerspruch zum Gesetz Demeters steht. Dies liegt daran, dass die Klausel "detect:" auf einer Kollektion nicht dem Prinzip des Gesetzes Demeters entspricht, bei dem Nachrichten nur an Objekte gesendet werden dürfen, die der Sender selbst kennt oder erzeugt.

Frage: Warum ist das Gesetz Demeters umstritten und nicht allgemein anerkannt?
Antwort: Das Gesetz Demeters ist umstritten und nicht allgemein anerkannt, weil es in einigen Fällen schwer umsetzbar sein kann und zu unpraktischem Code führen kann. Es erfordert, dass Verkettungen von Nachrichten vermieden werden, was in einigen Fällen zu einer unnötigen Fragmentierung des Codes führen kann. Einige Entwickler sehen das Gesetz Demeters als zu restriktiv an und argumentieren, dass es in bestimmten Situationen vernünftiger ist, Verkettungen von Nachrichten zu verwenden, um den Code lesbarer und effizienter zu gestalten. Dennoch ist es wichtig, das Gesetz Demeters zu verstehen und in Betracht zu ziehen, da es in vielen Fällen dazu beitragen kann, die Kopplung zwischen Klassen zu verringern und den Code wartbarer zu machen.

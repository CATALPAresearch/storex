28 Der Zusammenhang von Typen und Klassen

Wenn in dieser Kurseinheit bislang ausschließlich von Typen die Rede war und Klassen dabei ignoriert wurden, so hat das gute Gründe: Während eine Klasse die Implementierung ihrer Objekte festlegt, ist eine Typdefinition vollkommen frei von Implementierungsaspekten. Zwar können auch abstrakte Klassen ausschließlich aus Methodendeklarationen bestehen, also ohne jeden Implementierungsanteil, aber auch ihr Zweck ist in der Regel, zumindest eine partielle Implementierung vorzugeben, die anderen Klassen, ihren Subklassen, gemeinsam ist, so dass sie diese erben können. Schließlich drückt die Klassenhierarchie ja eine „genetische“ Verwandtschaft aus (s. Abschnitt 10.1 und Kapitel 11). Eine Typprüfung soll aber ohne Ansehen der Implementierung stattfinden; sie baut daher auf abstrakte Spezifikationen, eben auf Typen.


Frage: Was ist der Unterschied zwischen Klassen und Typen?
Antwort: Klassen definieren die Implementierung ihrer Objekte, während Typen frei von Implementierungsaspekten sind. Typen sind abstrakte Spezifikationen, die auf eine Typprüfung ohne Ansehen der Implementierung abzielen. Klassen können zumindest eine partielle Implementierung vorgeben, die anderen Klassen, ihren Subklassen, gemeinsam ist, so dass sie diese erben können.


Es sind also Typen abstrakte Spezifikationen, die zum einen den Wertebereich von Variablen einschränken und zum anderen das Protokoll (den Funktionsumfang) von Objekten angeben. Im Gegensatz dazu sind Klassen Konstrukte, die Objekte als Instanzen bilden erlauben und mit Implementierung versehen. Da Objekte aber auch den Wertebereich von Typen ausmachen, stellt sich natürlich die Frage, welcher Art der Zusammenhang zwischen Typen und Klassen ist.


Frage: Was ist der Zusammenhang zwischen Typen und Klassen?
Antwort: Typen sind abstrakte Spezifikationen, die den Wertebereich von Variablen einschränken und das Protokoll von Objekten angeben. Klassen hingegen sind Konstrukte, die Objekte als Instanzen bilden erlauben und mit Implementierung versehen. Objekte können den Wertebereich von Typen ausmachen, weshalb es eine enge Beziehung zwischen Typen und Klassen gibt.

Frage: Was ist der Unterschied zwischen Typen und Klassen?
Antwort: Typen sind abstrakte Spezifikationen, die den Wertebereich von Variablen einschränken und das Protokoll von Objekten angeben. Klassen hingegen sind Konstrukte, die Objekte als Instanzen bilden erlauben und mit Implementierung versehen. Objekte können den Wertebereich von Typen ausmachen, aber Typen und Klassen sind nicht dasselbe.


Es fällt zunächst auf, dass bestimmte Elemente einer Klassendefinition auch in einer Typdefinition auftauchen. Im Einzelnen sind dies: ein (eindeutiger) Name, ein zweiter Name, von dessen dazugehöriger Definition abgeleitet wird sowie eine Menge von Methodennamen, jeweils mit einer Anzahl formaler Parameter.


Frage: Welche Gemeinsamkeiten gibt es zwischen einer Klassendefinition und einer Typdefinition?
Antwort: Sowohl in einer Klassendefinition als auch in einer Typdefinition gibt es einen eindeutigen Namen, einen zweiten Namen, von dessen dazugehöriger Definition abgeleitet wird, sowie eine Menge von Methodennamen mit einer Anzahl formaler Parameter.


Nun werden in SMALLTALKs Klassendefinitionen anders als bei den Typdefinitionen STRONGTALKs keine Typen verwendet — wie auch, denn in SMALLTALK gibt es ja schließlich keine Typen. Stattdessen findet man in SMALLTALK-Programmen manchmal Namen wie „aString“, „anInteger“ etc. für formale Parameter, die nahelegen, dass der Wert einer Variable Instanz einer bestimmten Klasse sein soll. Überprüft wird das jedoch nicht. In STRONGTALK hingegen ist die Ähnlichkeit von Klassendefinitionen mit Typdefinitionen noch größer: Hier sind auch die formalen Parameter der Methoden in den Klassendefinitionen typisiert (s. Kapitel 20). Man beachte, dass in STRONGTALK, anders als z. B. in Java oder C++, Instanzvariablen kein Bestandteil einer Typdefinition sein können (vgl. dazu Fußnote 50).


Frage: Wie werden Typen in SMALLTALK verwendet?
Antwort: In SMALLTALK werden keine Typen verwendet. Stattdessen findet man in SMALLTALK-Programmen manchmal Namen wie „aString“, „anInteger“ etc. für formale Parameter, die nahelegen, dass der Wert einer Variable Instanz einer bestimmten Klasse sein soll. Überprüft wird das jedoch nicht.

Frage: Wie ist die Ähnlichkeit von Klassendefinitionen mit Typdefinitionen in STRONGTALK?
Antwort: In STRONGTALK sind die formalen Parameter der Methoden in den Klassendefinitionen typisiert, was die Ähnlichkeit von Klassendefinitionen mit Typdefinitionen noch größer macht.

Frage: Können Instanzvariablen ein Bestandteil einer Typdefinition in STRONGTALK sein?
Antwort: Nein, anders als z. B. in Java oder C++, können Instanzvariablen kein Bestandteil einer Typdefinition in STRONGTALK sein.

Frage: Wie werden Typen in Smalltalk definiert?
Antwort: In Smalltalk werden keine Typen verwendet, stattdessen findet man in Smalltalk-Programmen manchmal Namen wie "aString", "anInteger" etc. für formale Parameter, die nahelegen, dass der Wert einer Variable Instanz einer bestimmten Klasse sein soll. Überprüft wird das jedoch nicht.

Frage: Was ist der Unterschied zwischen Klassendefinitionen in Smalltalk und Strongtalk?
Antwort: In Smalltalk werden in Klassendefinitionen keine Typen verwendet, während in Strongtalk die formalen Parameter der Methoden in den Klassendefinitionen typisiert sind. Zudem können in Strongtalk Instanzvariablen kein Bestandteil einer Typdefinition sein, im Gegensatz zu Java oder C++.


Nun dient ja ein Typsystem in der objektorientierten Programmierung vor allem der Sicherstellung des Umstands, dass alle von einem Objekt aufgrund des deklarierten Typs der Variablen, die es benennt, erwarteten Eigenschaften (Methoden) bei diesem Objekt auch vorhanden sind. Dies ist aber immer dann der Fall, wenn sich die Elemente der Typdefinition in der Klassendefinition des Objekts wiederfinden, die Klassendefinition also mit der Typdefinition gewissermaßen strukturell konform ist, so dass die Zuweisung einer Instanz der Klasse an eine Variable des Typs die Anforderungen der Zuweisungskompatibilität erfüllt. Um einen Compiler diese Zuweisungskompatibilität auf einfachere Weise als die Prüfung der Strukturkonformität, die ja eine rekursive Expansion der Typdefinitionen erfordert, feststellen zu lassen, gibt es zwei Möglichkeiten (bei beiden handelt es sich gewissermaßen um Varianten einer Namenskonformität): Jede Klasse sagt explizit, mit welchen Typen sie konform ist, oder: Jede Klasse spezifiziert implizit selbst einen Typ.


Frage: Wozu dient ein Typsystem in der objektorientierten Programmierung?
Antwort: Ein Typsystem in der objektorientierten Programmierung dient der Sicherstellung, dass alle von einem Objekt aufgrund des deklarierten Typs der Variablen, die es benennt, erwarteten Eigenschaften (Methoden) bei diesem Objekt auch vorhanden sind.


Im ersten Fall müsste der Compiler noch prüfen, ob eine Klasse tatsächlich auch über alle Eigenschaften der von ihr genannten Typen verfügt; im zweiten Fall ist das automatisch der Fall, da der Typ ja gewissermaßen aus der Klasse erzeugt wird. Diese zweite Art wird von den allermeisten typisierten, objektorientierten Programmiersprachen bevorzugt, doch auch die erste kommt in populären Sprachen vor: So kann beispielsweise in Java und C-Sharp jede Klasse angeben, mit Variablen welcher Interface-Typen ihre Instanzen zuweisungskompatibel sein sollen. Auch STRONGTALK stellt beide Möglichkeiten zur Verfügung.


Frage: Was ist der Unterschied zwischen den beiden Arten von Typisierung in STRONGTALK?
Antwort: STRONGTALK bietet zwei Arten von Typisierung: Die erste Art erfordert vom Compiler eine Prüfung, ob eine Klasse tatsächlich über alle Eigenschaften der von ihr genannten Typen verfügt. Bei der zweiten Art ist diese Prüfung automatisch der Fall, da der Typ gewissermaßen aus der Klasse erzeugt wird. Diese zweite Art wird von den meisten typisierten, objektorientierten Programmiersprachen bevorzugt, während die erste Art in Sprachen wie Java und C-Sharp vorkommt.

Frage: Was ist der Unterschied zwischen den zwei Arten von Typisierung in objektorientierten Programmiersprachen?
Antwort: Die zwei Arten von Typisierung in objektorientierten Programmiersprachen sind: die statische Typisierung und die dynamische Typisierung. Bei der statischen Typisierung muss der Compiler prüfen, ob eine Klasse tatsächlich über alle Eigenschaften der von ihr genannten Typen verfügt. Bei der dynamischen Typisierung ist das automatisch der Fall, da der Typ gewissermaßen aus der Klasse erzeugt wird.

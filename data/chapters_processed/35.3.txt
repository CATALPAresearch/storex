35.3 Variablen und Zuweisungen

Java ist eine stark typisierte Sprache: Alle Ausdrücke haben einen Typ. Das gilt auch für Variablen, deren Typ bei ihrer Deklaration angegeben werden muss. In Java gibt es Variablen mit Referenz- und Wertsemantik. Welche Semantik eine Variable hat, richtet sich nach ihrem Typ. Typen, die zu Variablen mit Wertsemantik führen, sind die oben genannten primitiven, nämlich byte, short, int, long, float, double, boolean und char. Variablen, die mit einem anderen Typ deklariert werden, haben Referenzsemantik.


Frage: Was ist der Unterschied zwischen Referenz- und Wertsemantik in Java?
Antwort: In Java haben Variablen mit Referenzsemantik einen Wert, der auf ein Objekt verweist, während Variablen mit Wertsemantik den Wert direkt enthalten. Der Unterschied liegt darin, dass Variablen mit Referenzsemantik den Wert des Objekts nicht direkt enthalten, sondern nur eine Referenz auf das Objekt halten.

Frage: Welche Semantik haben Variablen in Java?
Antwort: In Java haben Variablen entweder Referenz- oder Wertsemantik, je nachdem welchen Typ sie haben. Variablen mit primitiven Typen wie byte, short, int, long, float, double, boolean und char haben Wertsemantik, während Variablen mit anderen Typen Referenzsemantik haben.

Frage: Was ist der Unterschied zwischen Variablen mit Wert- und Referenzsemantik in Java?
Antwort: In Java haben Variablen mit Wertsemantik einen konkreten Wert, während Variablen mit Referenzsemantik einen Verweis auf ein Objekt speichern. Wenn man eine Variable mit Referenzsemantik ändert, wird nur der Verweis geändert, nicht das Objekt selbst. Bei Variablen mit Wertsemantik hingegen wird der Wert direkt geändert.


Variablen werden in Java genauso wie in SMALLTALK explizit per Zuweisungsoperator "=" und implizit per Methodenaufruf Werte zugewiesen. Der Inhalt von Variablen primitiver Typen ist ein entsprechender Wert, während Variablen anderer Typen immer eine Referenz auf ein Objekt halten.


Frage: Wie werden Variablen in Java Werte zugewiesen?
Antwort: In Java werden Variablen Werte explizit per Zuweisungsoperator "=" und implizit per Methodenaufruf zugewiesen. Der Inhalt von Variablen primitiver Typen ist ein entsprechender Wert, während Variablen anderer Typen immer eine Referenz auf ein Objekt halten.

Frage: Was ist der Unterschied zwischen Zuweisungen an Variablen primitiver Typen und solchen anderer Typen in Java?
Antwort: Bei Zuweisungen an Variablen primitiver Typen wird der Wert selbst kopiert, während bei Zuweisungen an Variablen anderer Typen eine Referenz auf das Objekt kopiert wird.


In Java ist es nicht möglich, Pointervariablen explizit zu deklarieren. Daher gibt es insbesondere beim Methodenaufruf (und den damit verbundenen impliziten Zuweisungen) kein "Call by reference" in Java, sondern nur ein "Call by value". Dies ändert sich auch nicht, wenn Variablen, die mit Referenztypen deklariert sind, Referenzsemantik haben. Bei den impliziten Zuweisungen eines Methodenaufrufs wird immer eine Kopie des Zeigers an die formalen Parameter übergeben.


Frage: Wie funktioniert die Parameterübergabe in Java?
Antwort: In Java gibt es nur "Call by value", d.h. bei Methodenaufrufen werden immer Kopien der Werte an die formalen Parameter übergeben. Selbst wenn Variablen, die mit Referenztypen deklariert sind, Referenzsemantik haben, werden bei Methodenaufrufen immer Kopien der Zeiger übergeben.

Frage: Wie werden Parameter in Java übergeben?
Antwort: In Java werden Parameter immer durch Wertübertragung übergeben, auch wenn Variablen, die mit Referenztypen deklariert sind, Referenzsemantik haben. Bei den impliziten Zuweisungen eines Methodenaufrufs wird immer eine Kopie des Zeigers an die formalen Parameter übergeben.

Frage: Gibt es in Java "Call by reference"?
Antwort: Nein, in Java gibt es kein "Call by reference", sondern nur "Call by value". Bei Methodenaufrufen mit impliziten Zuweisungen wird immer eine Kopie des Zeigers an die formalen Parameter übergeben, auch wenn Variablen, die mit Referenztypen deklariert sind, Referenzsemantik haben.


Seit Java 5 können Werte primitiven Typs direkt Variablen der entsprechenden Wrapper-Typen zugewiesen werden und umgekehrt. Dies nennt man "Auto boxing" bzw. "Auto unboxing". Dabei können jedoch, ähnlich wie bei der Handhabung bestimmter Werte als Objekte in SMALLTALK, unerwartete Phänomene auftreten: Zwei Objekte, die den gleichen Wert repräsentieren, sind zwar immer gleich, müssen aber nicht identisch sein. Daher ist es wichtig, in Java sorgfältig zu überlegen, ob man die equals-Methode oder den Test auf Identität (==) verwenden sollte. Andernfalls können schwer zu findende Programmierfehler auftreten.


Frage: Was ist der Unterschied zwischen der equals-Methode und dem Test auf Identität (==) in Java?
Antwort: Die equals-Methode testet, ob zwei Objekte den gleichen Wert repräsentieren, während der Test auf Identität (==) prüft, ob zwei Objekte identisch sind.

Frage: Was ist Auto boxing und Auto unboxing in Java?
Antwort: Seit Java 5 können Werte primitiver Typs direkt Variablen der entsprechenden Wrapper-Typen zugewiesen werden und umgekehrt. Dies nennt man "Auto boxing" bzw. "Auto unboxing". Dabei ist es wichtig, in Java sorgfältig zu überlegen, ob man die equals-Methode oder den Test auf Identität (==) verwenden sollte, um unerwartete Phänomene zu vermeiden.

28.2 Typen als Schnittstellenspezifikationen von Klassen

Eine Klasse liefert eine Implementierung. Nach gängigen Prinzipien der objektorientierten Programmierung sind Implementierungen jedoch hinter Schnittstellen (oder Interfaces) zu verbergen: Nur die Elemente einer Klassendefinition, die für Benutzer einer Klasse zur Verwendung gedacht sind, sollen durch die Schnittstelle nach außen getragen werden – der Rest soll verborgen bleiben (das sog. Geheimnisprinzip).


Frage: Was ist eine Schnittstelle in Bezug auf eine Klasse?
Antwort: Eine Schnittstelle in Bezug auf eine Klasse ist das Verbergen der Implementierung und das Nach-außen-Treten der Elemente einer Klassendefinition, die für Benutzer einer Klasse zur Verwendung gedacht sind. Dieses Prinzip wird auch als Geheimnisprinzip bezeichnet.

Frage: Was ist das Geheimnisprinzip in der objektorientierten Programmierung?
Antwort: Das Geheimnisprinzip in der objektorientierten Programmierung besagt, dass nur die Elemente einer Klassendefinition, die für Benutzer einer Klasse zur Verwendung gedacht sind, durch die Schnittstelle nach außen getragen werden sollen – der Rest soll verborgen bleiben.


In Programmiersprachen wie Java, C++, usw. gibt es spezielle Schlüsselwörter, die einem Element einer Klassendefinition (beispielsweise einer Methode) vorangestellt seine Zugreifbarkeit festlegen. Diese sogenannten Zugriffsmodifikatoren (engl. access modifier) legen gemeinsam mit der Klassendefinition, die ihre vollständige Implementierung beinhaltet, auch die Schnittstelle der Klasse fest. Je nach Sprache ist diese Schnittstelle für alle Benutzer der Klasse gleich oder unterscheidet sich nach Lokalität oder anderen Eigenschaften von benutzender und benutzter Klasse. Im ersten Fall könnte man von einer absoluten Schnittstelle sprechen; um sie zu spezifizieren, reicht es, zwischen sichtbar und unsichtbar zu unterscheiden. Im zweiten Fall ist die Schnittstelle relativ.


Frage: Was sind Zugriffsmodifikatoren in Programmiersprachen?
Antwort: Zugriffsmodifikatoren sind spezielle Schlüsselwörter in Programmiersprachen wie Java und C++, die einem Element einer Klassendefinition vorangestellt werden, um dessen Zugreifbarkeit festzulegen. Sie legen gemeinsam mit der Klassendefinition, die die vollständige Implementierung beinhaltet, auch die Schnittstelle der Klasse fest.


Eine absolut spezifizierte Schnittstelle einer Klasse kommt, wenn sie wirklich keinerlei Implementierungsgeheimnisse verrät, einem Typ gleich. Sie besteht nämlich nur aus Deklarationen von Methoden. Die gemachte Einschränkung ist notwendig, weil manche Sprachen, so z. B. Java und C++, die Instanzvariablen ihrer Objekte in die Schnittstelle der Klassen aufzunehmen erlauben. Mit den Instanzvariablen wird jedoch die Repräsentation der Objekte nach außen sichtbar, was dem Gedanken des Geheimnisprinzips widerspricht.


Frage: Was ist eine absolut spezifizierte Schnittstelle einer Klasse?
Antwort: Eine absolut spezifizierte Schnittstelle einer Klasse kommt, wenn sie wirklich keinerlei Implementierungsgeheimnisse verrät, einem Typ gleich. Sie besteht nur aus Deklarationen von Methoden und enthält keine Instanzvariablen.

Frage: Was ist der Unterschied zwischen einer Schnittstelle und einem Typ in Bezug auf Objekte?
Antwort: Eine absolut spezifizierte Schnittstelle einer Klasse kommt, wenn sie wirklich keinerlei Implementierungsgeheimnisse verrät, einem Typ gleich. Sie besteht nämlich nur aus Deklarationen von Methoden. Im Gegensatz dazu, werden bei einem Typ die Instanzvariablen der Objekte in die Schnittstelle der Klassen aufgenommen, was dem Gedanken des Geheimnisprinzips widerspricht.


Wenn man nun eine Variable mit einem solchen die Schnittstelle repräsentierenden Typ deklariert und eine Typprüfung erfolgreich durchgeführt hat, dann ist sichergestellt, dass über diese Variable nur auf die Elemente einer Klasse zugegriffen wird, die auch Bestandteil des Interfaces der Klasse sind. Wenn jede Instanz dieser Klasse ausschließlich über typisierte Variablen ansprechbar ist, ist damit die Wahrung des Geheimnisprinzips garantiert. Typen dienen damit einem weiteren Zweck, den man zunächst einmal nicht mit ihnen assoziieren würde, nämlich der Wahrung des Implementationsgeheimnisses und Einhaltung der Schnittstellen durch den Compiler. Dieser überaus nützliche Zusammenhang zwischen Klassen, ihren Schnittstellen und Typen wurde erst relativ spät, nämlich mit der Programmiersprache Java und ihrem Interface-als-Typ-Konzept, so weiterentwickelt, dass eine Klasse verschiedene Schnittstellen anbieten kann, die alle zugleich Typen der Klasse (außer: Supertypen des der Klasse entsprechenden Typs) sind. Die damit ermöglichte interfacebasierte Programmierung, die in Kurs 01853 ausführlich behandelt wird, betrachte ich persönlich als den wichtigsten Beitrag Javas zur Disziplin der objektorientierten Programmierung (s. a. Kurseinheit 4, Kapitel 45).


Frage: Was ist die Funktion von Typen in der objektorientierten Programmierung?
Antwort: Typen dienen in der objektorientierten Programmierung nicht nur dazu, Objekte zu klassifizieren, sondern auch dazu, das Implementationsgeheimnis der Klassen zu wahren und die Einhaltung der Schnittstellen durch den Compiler zu gewährleisten. Diese Funktion von Typen wurde mit der Programmiersprache Java und ihrem Interface-als-Typ-Konzept weiterentwickelt, was zur interfacebasierten Programmierung führte. Diese betrachte ich als den wichtigsten Beitrag Javas zur Disziplin der objektorientierten Programmierung.

Frage: Was ermöglichen Typen in der objektorientierten Programmierung?
Antwort: Typen dienen in der objektorientierten Programmierung nicht nur der Wahrung des Geheimnisprinzips und Einhaltung der Schnittstellen durch den Compiler, sondern ermöglichen auch die interfacebasierte Programmierung, die als wichtigster Beitrag Javas zur Disziplin der objektorientierten Programmierung gilt.

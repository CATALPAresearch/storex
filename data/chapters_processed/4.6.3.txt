4.6.3 Iteration

Wenn Sie If und While schon kennen, kennen Sie sicher auch For. Die klassische Form der For-Schleife verwendet eine Zählvariable, einen Anfangswert, ein Inkrement (das auch negativ, also ein Dekrement sein kann) sowie einen Endwert. Solche For-Schleifen gibt es in SMALLTALK auch. Zum Beispiel gibt der Transcript die Folge „531“ aus.
Wir schauen uns den Ausdruck aus Zeile 219 einmal genauer an. Dem Objekt 5 wird offenbar eine Nachricht to:by:do: gesendet, wobei 5 der Startwert ist, 1 der Parameter zu to:, -2 der Endwert zu by:, und ein Block für do: angegeben wird. Der Block stellt offenbar, ähnlich wie bei der Realisierung der While-Schleife in SMALLTALK, den Schleifenrumpf dar. Er hat einen Parameter i, der anscheinend als Zählvariable fungiert. Tatsächlich wird die Methode to:by:do: in SMALLTALK EXPRESS wie folgt implementiert:
Hier interessiert uns aber vor allem eine Form der Iteration, die nicht einer einfachen Zählschleife entspricht, sondern über eine Menge von beliebigen Objekten geht. Solche Mengen sind uns ja schon begegnet, wenn auch nur in Gestalt von literalen Arrays.
Anders als in vielen anderen Sprachen kann man in SMALLTALK über die Elemente eines Arrays direkt, also ohne die Verwendung einer Zählschleife, deren Laufvariable als Index in das Array dient, iterieren. So hat die Auswertung des Ausdrucks genau das gleiche Ergebnis wie die des Ausdrucks aus Zeile 219, nämlich die Ausgabe von „531“ auf dem Transcript. i ist aber diesmal keine Zählvariable, da hier nichts gezählt wird; es ist vielmehr eine Laufvariable, der der Reihe nach die Elemente des literalen Arrays #(5) zugewiesen werden. do: ersetzt also ganz offensichtlich das aus manchen anderen Sprachen (seit der Version 5.0 auch aus JAVA) bekannte For-each-Konstrukt.
Wie wir gleich sehen werden, ist die Iteration, also das Fortschalten der Elemente und die Überprüfung der Abbruchbedingung, in der Collection, über die iteriert wird, implementiert. Deshalb nennt man dieses Verfahren auch interne Iteration (im Gegensatz zur herkömmlichen externen Iteration, bei der die Laufvariable selbst gesetzt und abgefragt werden muss).
Die Implementierung der Kontrollstruktur erfolgt wiederum selbst in SMALLTALK und ist ziemlich einfach. Dabei ist to:do: für Ganzahlen analog zu dem bereits erwähnten to:by:do implementiert. Die Zählvariable index des Blocks in Zeile 238 läuft von 1 bis zur Anzahl der indizierten Instanzvariablen des Empfängers von do: (im obigen Beispiel ein Array). Diese Anzahl wird über den Aufruf von size auf dem Empfänger (repräsentiert durch self) abgefragt. Der Inhalt der indizierten Instanzvariable n des Empfängers wird dann der Reihe nach als Parameter mittels value: an den Block aBlock zur Auswertung geschickt.

Frage: Wie wird die Iteration in SMALLTALK implementiert, und was ist der Unterschied zwischen interner Iteration und traditioneller externer Iteration?
Antwort: Die Iteration in SMALLTALK erfolgt durch eine Form der internen Iteration, bei der die Steuerstruktur für das Fortschreiten durch Elemente und die Überprüfung der Abbruchbedingung innerhalb der Sammlung erfolgt, über die iteriert wird. Dies unterscheidet sich von der traditionellen externen Iteration, bei der Sie manuell eine Schleifenvariable als Index in die Sammlung verwalten müssen. In SMALLTALK können Sie direkt über die Elemente eines Arrays iterieren, und der Prozess des Fortschreitens durch die Elemente wird von der Sammlung selbst intern verwaltet.

Frage: Können Sie erklären, wie die Methode to:do: für Ganzzahlen in SMALLTALK funktioniert und wie sie sich zu traditionellen for-Schleifen in anderen Sprachen verhält?
Antwort: In SMALLTALK wird die Methode to:do: für Ganzzahlen verwendet, um eine Schleife zu erstellen, die über einen Bereich von Ganzzahlen iteriert. Sie nimmt zwei Argumente entgegen: einen Endwert und einen Block-Code, der während jeder Iteration ausgeführt werden soll. Die Schleifenvariable, die durch den Parameter i im Block repräsentiert wird, nimmt sequenziell Ganzzahlenwerte von 1 bis zum angegebenen Endwert an. Diese Methode simuliert eine Zählschleife, die den traditionellen for-Schleifen ähnelt, die in anderen Sprachen zu finden sind. Der wesentliche Unterschied besteht darin, dass in SMALLTALK die Steuerstruktur und der Schleifenmechanismus von der Methode to:do: selbst bereitgestellt werden, die die Iteration intern verwaltet. Im Gegensatz dazu müssen Sie in Sprachen mit traditionellen for-Schleifen in der Regel eine Schleifenvariable als Index in die Sammlung definieren und verwalten.

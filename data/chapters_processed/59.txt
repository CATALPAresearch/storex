59 Das Problem der mangelnden Skalierbarkeit

Zwar besteht jedes laufende objektorientierte Programm aus einer Menge von Objekten, jede Spezifikation eines solchen Programms besteht jedoch bei den heute gebräuchlichen klassenbasierten objektorientierten Programmiersprachen aus einer Menge von Klassen. Die strukturbildende Einheit der objektorientierten Programmierung auf Programmebene ist daher die Klasse. Größere Einheiten sind innerhalb der gängigsten objektorientierten Programmiersprachen nicht vorgesehen: Javas Packages und ähnliche Konstrukte sind allenfalls Namensräume und Einheiten der Auslieferung — der Status eines Sprachkonstrukts vergleichbar mit Klasse oder Methode kommt ihnen kaum zu.


Frage: Was ist die strukturbildende Einheit der objektorientierten Programmierung auf Programmebene?
Antwort: Die strukturbildende Einheit der objektorientierten Programmierung auf Programmebene ist die Klasse.


Nun sind Klassen relativ feingranulare Gebilde. Zwar hindert einen nichts daran, große Klassen (mit Hunderten von Attributen und Methoden) zu schreiben, aber dies gilt nicht nur als schlechter Stil, es spiegelt auch die Anwendungsdomäne in aller Regel nicht angemessen wider. Dort sind nämlich alle großen (komplexen) Dinge aus einfacheren zusammengesetzt, die, wenn sie selbst eine gewisse Komplexität haben, selbst wieder aus kleineren zusammengesetzt sind usw. Dasselbe gilt auch für die Artefakte anderer Ingenieursdisziplinen: Baupläne sind in Komponenten und Unterkomponenten bzw. Systeme und Untersysteme strukturiert. Da wünscht man sich natürlich analoge Möglichkeiten in der objektorientierten Programmierung.


Frage: Wozu dienen feingranulare Klassen in der objektorientierten Programmierung?
Antwort: Feingranulare Klassen in der objektorientierten Programmierung sind nützlich, um die Anwendungsdomäne angemessen abzubilden und die Komplexität der Klassen zu reduzieren. Sie ermöglichen eine bessere Strukturierung der Klassen und erleichtern die Wartung und Weiterentwicklung des Codes.

Frage: Warum sollten Klassen nicht zu groß sein?
Antwort: Klassen sollten nicht zu groß sein, da dies als schlechter Stil gilt und die Anwendungsdomäne nicht angemessen widerspiegelt. Stattdessen sollten große Dinge in einfachere zusammengesetzt werden, die, wenn sie selbst eine gewisse Komplexität haben, selbst wieder aus kleineren zusammengesetzt sind. Diese Art der Strukturierung findet man auch in anderen Ingenieursdisziplinen wie dem Bauwesen.

Frage: Warum sind Klassen in objektorientierter Programmierung relativ feingranular?
Antwort: Klassen sind in objektorientierter Programmierung relativ feingranular, weil große Klassen mit Hunderten von Attributen und Methoden als schlechter Stil gelten und die Anwendungsdomäne nicht angemessen widerspiegeln. Stattdessen sind alle großen (komplexen) Dinge aus einfacheren zusammengesetzt, die, wenn sie selbst eine gewisse Komplexität haben, selbst wieder aus kleineren zusammengesetzt sind usw. Diese Art der Strukturierung findet man auch in anderen Ingenieursdisziplinen wie dem Bauwesen, wo Baupläne in Komponenten und Unterkomponenten bzw. Systeme und Untersysteme strukturiert sind.


Nun ist es zwar möglich, Objekte mithilfe der Teil-Ganzes-Beziehung rekursiv aufzubauen (und im oben diskutierten Rahmen auch zu kapseln, also Teile vollständig hinter Ganzen zu verbergen), aber für Klassen gilt das nicht. Zwar ist es hier möglich, über sogenannte innere Klassen (in Java) Klassen zu strukturieren, aber allein schon die Tatsache, wie relativ wenig davon Gebrauch gemacht wird, zeigt, dass es sich dabei um keinen besonders nützlichen Mechanismus handelt.93 Tatsächlich ist es nämlich — wie schon angesprochen — so, dass Objekte einer Klasse nicht immer Teile von Objekten anderer Klassen sind (und schon gar nicht immer der gleichen Klasse), sondern vielmehr einzelne Exemplare (Instanzen) Teil sein und vielleicht sogar selbst Teile haben können. Man kann also die hierarchische Struktur objektorientierter Systeme genauso wenig auf Klassenebene vorschreiben, wie man den Aufbau einer Maschine anhand lediglich der Typen ihrer Teile (Schrauben etc.) beschreiben könnte (ohne festzulegen, wo jede einzelne Instanz genau hingehört). Was man vielmehr bräuchte, sind Komponenten als zusätzliches, von Klassen und Objekten verschiedenes Programmiersprachenkonstrukt.


Frage: Wie können Objekte in objektorientierten Systemen strukturiert werden?
Antwort: Objekte können in objektorientierten Systemen mithilfe der Teil-Ganzes-Beziehung rekursiv aufgebaut werden, wobei Teile hinter Ganzen verbergen können. Für Klassen gilt das nicht, da Objekte einer Klasse nicht immer Teile von Objekten anderer Klassen sind. Stattdessen können Objekte einzelne Exemplare (Instanzen) sein, die Teile haben können. Komponenten als zusätzliches Programmiersprachenkonstrukt können hierbei helfen, die Struktur von objektorientierten Systemen zu beschreiben.

Frage: Was ist der Unterschied zwischen Objekten und Klassen in Bezug auf die Teil-Ganzes-Beziehung?
Antwort: Objekte können mithilfe der Teil-Ganzes-Beziehung rekursiv aufgebaut werden, während Klassen nicht hierarchisch strukturiert werden können. Objekte sind einzelne Exemplare (Instanzen) und können Teile haben, während Klassen Typen von Objekten sind und nicht immer Teile von anderen Klassen sind.

Frage: Warum sind innere Klassen in Java nicht ein besonders nützlicher Mechanismus?
Antwort: Obwohl in Java innere Klassen genutzt werden können, um Klassen zu strukturieren, wird davon relativ wenig Gebrauch gemacht. Dies liegt daran, dass Objekte einer Klasse nicht immer Teile von Objekten anderer Klassen sind und vielmehr einzelne Exemplare (Instanzen) sein und vielleicht sogar selbst Teile haben können. Einzelne Instanzen können nicht durch innere Klassen beschrieben werden, weshalb sie als ein nicht besonders nützlicher Mechanismus angesehen werden.


Leider ist es mit der Einführung von Komponenten in objektorientierte Programmiersprachen bislang noch nicht besonders weit. Das merkt man schon daran, dass keine weit verbreitete objektorientierte Programmiersprache das Schlüsselwort "component" verwendet, ja nicht einmal reserviert. Stattdessen lässt man die Programmierer alles in Form von Klassen definieren und Komponenten immer zur Laufzeit, per Aggregation von Objekten, zusammenbauen. So schwache Konzepte wie Pakete (Java) oder Assemblies (C-Sharp) können dabei keineswegs einen Komponentenbegriff ersetzen, da sie lediglich Klassen gruppieren (und dabei auch noch ignorieren, dass dieselbe Klasse Instanzen für Komponenten verschiedener Typen liefern kann). Es ist meine persönliche Vermutung, dass an dieser Front in den nächsten Jahren noch der größte Fortschritt erzielt werden kann.


Frage: Wie werden Komponenten in objektorientierten Programmiersprachen bisher behandelt?
Antwort: Bislang ist es mit der Einführung von Komponenten in objektorientierten Programmiersprachen noch nicht besonders weit. Es gibt kein weit verbreitetes Schlüsselwort "component" und Komponenten werden immer zur Laufzeit, per Aggregation von Objekten, zusammengebaut. Pakete oder Assemblies können keinen Komponentenbegriff ersetzen, da sie lediglich Klassen gruppieren.

Frage: Was ist der Unterschied zwischen Komponenten und Klassen in objektorientierten Programmiersprachen?
Antwort: Im Gegensatz zu Klassen, die in objektorientierten Programmiersprachen verwendet werden, um Objekte zu definieren, werden Komponenten verwendet, um Objekte zur Laufzeit zusammenzubauen. Leider ist der Begriff "Komponente" in objektorientierten Programmiersprachen noch nicht weit verbreitet und wird oft durch andere Konzepte wie Pakete oder Assemblies ersetzt, die lediglich Klassen gruppieren.

Frage: Was sind Komponenten in objektorientierter Programmierung?
Antwort: In objektorientierter Programmierung werden Komponenten als wiederverwendbare, selbstbeschreibende und austauschbare Einheiten angesehen, die eine bestimmte Funktionalität bereitstellen. Sie werden in der Regel zur Laufzeit, per Aggregation von Objekten, zusammengebaut. Leider ist es mit der Einführung von Komponenten in objektorientierten Programmiersprachen noch nicht besonders weit, da keine weit verbreitete objektorientierte Programmiersprache das Schlüsselwort "component" verwendet oder reserviert. Stattdessen werden Programmierer dazu veranlasst, alles in Form von Klassen zu definieren. Konzepte wie Pakete (Java) oder Assemblies (C-Sharp) können einen Komponentenbegriff nicht ersetzen, da sie lediglich Klassen gruppieren und dabei ignorieren, dass dieselbe Klasse Instanzen für Komponenten verschiedener Typen liefern kann. Es wird vermutet, dass in den nächsten Jahren in diesem Bereich noch der größte Fortschritt erzielt werden kann.

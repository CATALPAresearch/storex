52.2 Klassen als Module

In EIFFEL sind Klassen hauptsächlich ein Mittel zur Datenkapselung ("Information hiding"). Alle Instanzvariablen oder Felder, in EIFFEL als Attribute bezeichnet, sind privat (deshalb werden keine Zugriffsmodifikatoren angegeben). Um dennoch von außen auf sie zugreifen zu können, sind Zugriffsmethoden in EIFFEL notwendig. Diese Zugriffsmethoden nehmen jedoch, ähnlich wie Properties in C#, syntaktisch die Form von Variablen an:
Eine Funktion (Setter) wird mit dem Parameter y aufgerufen. Eine Funktion (Getter) wird aufgerufen, um einen Wert zurückzugeben (kompatibel mit y-Zuweisungen).
Normalerweise dienen Zugriffsmethoden dazu, Instanzvariablen zu setzen oder zu lesen, können aber auch andere Aufgaben erfüllen (siehe Abschnitt 50.3.1). Dies ermöglicht insbesondere das Festlegen von Vor- und Nachbedingungen für den Zugriff auf Instanzvariablen (siehe Abschnitt 52.6). Es bietet auch die Freiheit, etwas, das wie eine Instanzvariable aussieht, nach außen hin anzubieten, ohne sich auf eine tatsächliche Instanzvariable festzulegen (sogenannte Repräsentationsunabhängigkeit), ähnlich wie bei C#. Beachten Sie, dass es in EIFFEL auch Indexer gibt.
Die Methoden einer Klasse in EIFFEL werden als Routinen bezeichnet und logisch in zwei Gruppen unterteilt: Abfragen (queries) und Befehle (commands). Abfragen liefern Informationen über den Zustand von Objekten, während Befehle diesen Zustand ändern. Es ist schlechter Stil in EIFFEL (obwohl es durch die Sprachdefinition nicht verhindert wird), dass eine Abfrage Seiteneffekte hat, die den Zustand des abgefragten Objekts (des Empfängers) oder eines anderen Objekts verändern.
In EIFFEL werden Attribute (Instanzvariablen) und Routinen (Methoden) zusammen als Features bezeichnet (analog zu den Members in von C++ abgeleiteten Sprachen). Sie sind die einzigen Elemente einer Klassendefinition in EIFFEL. Insbesondere gibt es keine Möglichkeit, Klassendefinitionen zu schachteln (es gibt keine inneren Klassen).
In EIFFEL gibt es keine Zugriffsmodifikatoren wie in JAVA/C#/C++. Wenn nichts weiter vermerkt wird, sind alle Features öffentlich zugänglich. Da Attribute jedoch nur über Zugriffsmethoden zugänglich sind, ist der Zustand eines Objekts automatisch gekapselt (im Sinne der Belegung von Instanzvariablen, siehe Kurseinheit 1, Kapitel 3). Zugriffsmethoden müssen in EIFFEL nicht spezifiziert werden, es sei denn, die entsprechenden Abfragen und Befehle sind Teil der Schnittstelle und kein Geheimnis.
Die Definition einer Schnittstelle (der Export von Features) in EIFFEL ist jedoch recht unspezifisch. Alle Klienten einer Klasse hätten das gleiche Bild von ihr, ähnlich wie in SMALLTALK. Dies ist für größere Projekte jedoch nicht sinnvoll. Statt Zugriff an Pakete zu binden (wie in JAVA und C#) oder an Freunde (Friends in C++), bietet EIFFEL die Möglichkeit, einzelne Features gezielt zu veröffentlichen (zu exportieren), indem die Klassen genannt werden, die darauf zugreifen können sollen. Dies schließt auch die Möglichkeit ein, dass keine andere Klasse diese Features sehen kann, was private in anderen Sprachen entspricht. Diese Klassen müssen die angebotenen Features nicht explizit importieren. Das Wissen über die Abhängigkeit ist also in EIFFEL genau umgekehrt zu dem in anderen Sprachen. Der dedizierte Export in EIFFEL entspricht in etwa dem qualifizierten Export in JAVA, wobei er in JAVA nur für Module und nicht für Klassen definiert ist.

Frage: Was sind Zugriffsmethoden in EIFFEL und wofür werden sie verwendet?
Antwort: Zugriffsmethoden in EIFFEL sind Methoden, die verwendet werden, um auf private Instanzvariablen (Attribute) zuzugreifen. Sie dienen dazu, den Zugriff auf diese Variablen zu kontrollieren und bieten die Möglichkeit, Vor- und Nachbedingungen festzulegen.

Frage: Wie werden Zugriffsmethoden in EIFFEL syntaktisch dargestellt?
Antwort: Zugriffsmethoden in EIFFEL sehen syntaktisch aus wie Variablen, können jedoch Funktionen (Setter) oder Funktionen (Getter) sein. Sie können verwendet werden, um Werte zu setzen oder zu lesen.

Frage: Welche Aufgaben können Zugriffsmethoden in EIFFEL erfüllen?
Antwort: Neben dem Lesen und Setzen von Instanzvariablen können Zugriffsmethoden in EIFFEL auch andere Aufgaben erfüllen, wie das Festlegen von Vor- und Nachbedingungen für den Zugriff auf Instanzvariablen.

Frage: Wie werden in EIFFEL Abfragen und Befehle logisch unterteilt?
Antwort: In EIFFEL werden Methoden einer Klasse als "Abfragen" (queries) und "Befehle" (commands) logisch unterteilt. Abfragen liefern Informationen über den Zustand von Objekten, während Befehle diesen Zustand ändern.

Frage: Was sind Features in EIFFEL und wie werden sie zusammengefasst?
Antwort: In EIFFEL werden Attribute (Instanzvariablen) und Routinen (Methoden) zusammen als "Features" bezeichnet. Sie sind die einzigen Elemente einer Klassendefinition in EIFFEL.

Frage: Gibt es in EIFFEL Zugriffsmodifikatoren wie in JAVA oder C++?
Antwort: Nein, es gibt in EIFFEL keine Zugriffsmodifikatoren wie in JAVA oder C++. Alle Features sind standardmäßig öffentlich zugänglich.

Frage: Wie wird der Zugriff auf Features in EIFFEL kontrolliert?
Antwort: In EIFFEL wird der Zugriff auf Features durch die gezielte Veröffentlichung (Export) von Features gesteuert. Klassen, die auf diese Features zugreifen sollen, werden explizit genannt.

Frage: Was ist das Besondere an der Definition einer Schnittstelle in EIFFEL?
Antwort: Die Definition einer Schnittstelle in EIFFEL ist recht unspezifisch. Alle Klienten einer Klasse haben standardmäßig das gleiche Bild von ihr. Statt den Zugriff an Pakete oder Freunde zu binden, bietet EIFFEL die Möglichkeit, einzelne Features gezielt zu veröffentlichen (exportieren).
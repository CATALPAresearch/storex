52.2 Klassen als Module

In EIFFEL sind Klassen hauptsächlich ein Mittel zur Datenkapselung ("Information hiding"). Alle Instanzvariablen oder Felder, in EIFFEL als Attribute bezeichnet, sind privat (deshalb werden keine Zugriffsmodifikatoren angegeben). Um dennoch von außen auf sie zugreifen zu können, sind Zugriffsmethoden in EIFFEL notwendig. Diese Zugriffsmethoden nehmen jedoch, ähnlich wie Properties in C-Sharp, syntaktisch die Form von Variablen an:


Frage: Wie werden auf Attribute in EIFFEL zugegriffen?
Antwort: In EIFFEL werden auf Attribute über Zugriffsmethoden zugegriffen, die syntaktisch wie Variablen aussehen. Um das Attribut a eines Objekts x zu ändern, wird ein Zuweisungsausdruck verwendet: x.a := b.

Frage: Wozu dienen Zugriffsmethoden in EIFFEL?
Antwort: Zugriffsmethoden in EIFFEL dienen dazu, auf die privaten Instanzvariablen oder Felder einer Klasse von außen zugreifen zu können. Sie nehmen syntaktisch die Form von Variablen an, sodass der Code, der auf die Instanzvariablen zugreift, lesbarer und einfacher zu verstehen ist. Diese Zugriffsmethoden werden vom System automatisch bereitgestellt.

Frage: Wie können in Eiffel auf Instanzvariablen zugegriffen werden?
Antwort: In Eiffel können auf Instanzvariablen, die als Attribute bezeichnet werden, nur über Zugriffsmethoden zugegriffen werden. Diese Zugriffsmethoden nehmen syntaktisch die Form von Variablen an, werden jedoch vom System automatisch bereitgestellt.

Frage: Was sind Zugriffsmethoden in Eiffel?
Antwort: Zugriffsmethoden in Eiffel sind Methoden, die vom System automatisch bereitgestellt werden, um auf Instanzvariablen zuzugreifen. Sie nehmen syntaktisch die Form von Variablen an, ermöglichen aber dennoch die Datenkapselung.

Frage: Warum werden in Eiffel Zugriffsmethoden verwendet?
Antwort: In Eiffel werden Zugriffsmethoden verwendet, um den Zugriff auf Instanzvariablen zu ermöglichen und gleichzeitig die Datenkapselung zu gewährleisten.


Eine Funktion (Setter) wird mit dem Parameter y aufgerufen. Eine Funktion (Getter) wird aufgerufen, um einen Wert zurückzugeben (kompatibel mit y-Zuweisungen).


Frage: Was ist eine Setter-Funktion?
Antwort: Eine Setter-Funktion ist eine Funktion, die mit einem Parameter aufgerufen wird und üblicherweise einen Wert setzt.

Frage: Was ist eine Getter-Funktion?
Antwort: Eine Getter-Funktion ist eine Funktion, die einen Wert zurückgibt und üblicherweise mit einer Zuweisung an eine Variable verwendet wird.

Frage: Was ist der Zweck eines Setters und Getters?
Antwort: Ein Setter ist eine Funktion, die mit einem Parameter aufgerufen wird und den Zustand eines Objekts ändert. Ein Getter ist eine Funktion, die aufgerufen wird, um einen Wert zurückzugeben, der mit einer y-Zuweisung kompatibel ist.

Frage: Was sind Setter und Getter?
Antwort: Setter und Getter sind Funktionen, die den Zustand eines Objekts ändern oder abfragen. Ein Setter wird mit einem Parameter aufgerufen, um den Zustand des Objekts zu ändern, während ein Getter aufgerufen wird, um einen Wert zurückzugeben, der mit dem Zustand des Objekts kompatibel ist.


Normalerweise dienen Zugriffsmethoden dazu, Instanzvariablen zu setzen oder zu lesen, können aber auch andere Aufgaben erfüllen (siehe Abschnitt 50.3.1). Dies ermöglicht insbesondere das Festlegen von Vor- und Nachbedingungen für den Zugriff auf Instanzvariablen (siehe Abschnitt 52.6). Es bietet auch die Freiheit, etwas, das wie eine Instanzvariable aussieht, nach außen hin anzubieten, ohne sich auf eine tatsächliche Instanzvariable festzulegen (sogenannte Repräsentationsunabhängigkeit), ähnlich wie bei C-Sharp. Beachten Sie, dass es in EIFFEL auch Indexer gibt.


Frage: Welche Aufgaben können Zugriffsmethoden in der Programmierung erfüllen?
Antwort: Zugriffsmethoden dienen normalerweise dazu, Instanzvariablen zu setzen oder zu lesen, können aber auch andere Aufgaben erfüllen, wie das Festlegen von Vor- und Nachbedingungen für den Zugriff auf Instanzvariablen oder das Anbieten etwas, das wie eine Instanzvariable aussieht, ohne sich auf eine tatsächliche Instanzvariable festzulegen.

Frage: Was ermöglichen Zugriffsmethoden?
Antwort: Zugriffsmethoden ermöglichen das Setzen oder Lesen von Instanzvariablen, das Festlegen von Vor- und Nachbedingungen für den Zugriff auf Instanzvariablen, die Repräsentationsunabhängigkeit und das Anbieten von etwas, das wie eine Instanzvariable aussieht, ohne sich auf eine tatsächliche Instanzvariable festzulegen. Zudem gibt es in EIFFEL auch Indexer.


Die Methoden einer Klasse in EIFFEL werden als Routinen bezeichnet und logisch in zwei Gruppen unterteilt: Abfragen (queries) und Befehle (commands). Abfragen liefern Informationen über den Zustand von Objekten, während Befehle diesen Zustand ändern. Es ist schlechter Stil in EIFFEL (obwohl es durch die Sprachdefinition nicht verhindert wird), dass eine Abfrage Seiteneffekte hat, die den Zustand des abgefragten Objekts (des Empfängers) oder eines anderen Objekts verändern.


Frage: Was ist der Unterschied zwischen Abfragen und Befehlen in EIFFEL?
Antwort: In EIFFEL werden Methoden als Routinen bezeichnet und logisch in zwei Gruppen unterteilt: Abfragen (queries) und Befehle (commands). Abfragen liefern Informationen über den Zustand von Objekten, während Befehle diesen Zustand ändern. Es ist schlechter Stil in EIFFEL (obwohl es durch die Sprachdefinition nicht verhindert wird), dass eine Abfrage Seiteneffekte hat, die den Zustand des abgefragten Objekts (des Empfängers) oder eines anderen Objekts verändern.


In EIFFEL werden Attribute (Instanzvariablen) und Routinen (Methoden) zusammen als Features bezeichnet (analog zu den Members in von C++ abgeleiteten Sprachen). Sie sind die einzigen Elemente einer Klassendefinition in EIFFEL. Insbesondere gibt es keine Möglichkeit, Klassendefinitionen zu schachteln (es gibt keine inneren Klassen).


Frage: Was sind Features in EIFFEL?
Antwort: In EIFFEL werden Attribute (Instanzvariablen) und Routinen (Methoden) zusammen als Features bezeichnet. Sie sind die einzigen Elemente einer Klassendefinition in EIFFEL.

Frage: Was sind die einzigen Elemente einer Klassendefinition in EIFFEL?
Antwort: In EIFFEL sind Attribute (Instanzvariablen) und Routinen (Methoden) zusammen als Features bezeichnet und die einzigen Elemente einer Klassendefinition.

Frage: Gibt es in EIFFEL die Möglichkeit Klassendefinitionen zu schachteln?
Antwort: Nein, in EIFFEL gibt es keine Möglichkeit, Klassendefinitionen zu schachteln (es gibt keine inneren Klassen).


In EIFFEL gibt es keine Zugriffsmodifikatoren wie in Java/C-Sharp/C++. Wenn nichts weiter vermerkt wird, sind alle Features öffentlich zugänglich. Da Attribute jedoch nur über Zugriffsmethoden zugänglich sind, ist der Zustand eines Objekts automatisch gekapselt (im Sinne der Belegung von Instanzvariablen, siehe Kurseinheit 1, Kapitel 3). Zugriffsmethoden müssen in EIFFEL nicht spezifiziert werden, es sei denn, die entsprechenden Abfragen und Befehle sind Teil der Schnittstelle und kein Geheimnis.


Frage: Wie ist die Zugriffsmodellierung in EIFFEL?
Antwort: In EIFFEL gibt es keine Zugriffsmodifikatoren wie in Java/C-Sharp/C++. Wenn nichts weiter vermerkt wird, sind alle Features öffentlich zugänglich. Da Attribute jedoch nur über Zugriffsmethoden zugänglich sind, ist der Zustand eines Objekts automatisch gekapselt. Zugriffsmethoden müssen in EIFFEL nicht spezifiziert werden, es sei denn, die entsprechenden Abfragen und Befehle sind Teil der Schnittstelle und kein Geheimnis.

Frage: Wie ist die Zugriffsebene von Features in EIFFEL festgelegt?
Antwort: In EIFFEL gibt es keine Zugriffsmodifikatoren wie in Java/C-Sharp/C++. Wenn nichts weiter vermerkt wird, sind alle Features öffentlich zugänglich. Da Attribute jedoch nur über Zugriffsmethoden zugänglich sind, ist der Zustand eines Objekts automatisch gekapselt. Zugriffsmethoden müssen in EIFFEL nicht spezifiziert werden, es sei denn, die entsprechenden Abfragen und Befehle sind Teil der Schnittstelle und kein Geheimnis.

Frage: Wie wird der Zustand eines Objekts in EIFFEL gekapselt?
Antwort: In EIFFEL wird der Zustand eines Objekts automatisch gekapselt, indem Attribute nur über Zugriffsmethoden zugänglich sind. Diese Zugriffsmethoden müssen nicht spezifiziert werden, es sei denn, die entsprechenden Abfragen und Befehle sind Teil der Schnittstelle und kein Geheimnis.


Die Definition einer Schnittstelle (der Export von Features) in EIFFEL ist jedoch recht unspezifisch. Alle Klienten einer Klasse hätten das gleiche Bild von ihr, ähnlich wie in SMALLTALK. Dies ist für größere Projekte jedoch nicht sinnvoll. Statt Zugriff an Pakete zu binden (wie in Java und C-Sharp) oder an Freunde (Friends in C++), bietet EIFFEL die Möglichkeit, einzelne Features gezielt zu veröffentlichen (zu exportieren), indem die Klassen genannt werden, die darauf zugreifen können sollen. Dies schließt auch die Möglichkeit ein, dass keine andere Klasse diese Features sehen kann, was private in anderen Sprachen entspricht. Diese Klassen müssen die angebotenen Features nicht explizit importieren. Das Wissen über die Abhängigkeit ist also in EIFFEL genau umgekehrt zu dem in anderen Sprachen. Der dedizierte Export in EIFFEL entspricht in etwa dem qualifizierten Export in Java, wobei er in Java nur für Module und nicht für Klassen definiert ist.


Frage: Wie wird die Sichtbarkeit von Features in EIFFEL geregelt?
Antwort: In EIFFEL wird die Sichtbarkeit von Features durch den dedizierten Export geregelt, bei dem die Klassen genannt werden, die auf die Features zugreifen können sollen. Dies schließt auch die Möglichkeit ein, dass keine andere Klasse diese Features sehen kann, was privat in anderen Sprachen entspricht.

Frage: Wie werden Features in EIFFEL exportiert?
Antwort: In EIFFEL können Features gezielt exportiert werden, indem die Klassen genannt werden, die darauf zugreifen können sollen. Dies schließt auch die Möglichkeit ein, dass keine andere Klasse diese Features sehen kann, was private in anderen Sprachen entspricht. Diese Klassen müssen die angebotenen Features nicht explizit importieren.

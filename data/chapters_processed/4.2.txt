4.2 Anweisungen

Anweisungen legen fest, wie ein Programm schrittweise ausgeführt wird. In SMALLTALK gelten alle Ausdrücke, die nicht Teil anderer Ausdrücke sind, als Anweisungen. Im Gegensatz zu Java und C-Sharp ist in SMALLTALK kein Semikolon erforderlich.
In SMALLTALK werden Anweisungsfolgen durch einen Punkt getrennt. Dieser Punkt ist ein Trennzeichen (ähnlich wie in PASCAL oder EIFFEL) und gehört nicht zur Anweisung selbst, im Gegensatz zu den von C abgeleiteten Sprachen wie Java oder C-Sharp. Der Punkt am Ende einer Anweisung kann also weggelassen werden, wenn keine weitere Anweisung folgt. Die Verwendung des Punktes entspricht dem Ziel von SMALLTALK, sich natürlicher Sprache anzunähern. Ähnlich ist die Wahl des Semikolons zur Kaskadierung von Nachrichtenausdrücken zu betrachten.
Die einzige andere Form der Anweisung in SMALLTALK ist die Return-Anweisung. In SMALLTALK besteht sie aus dem Sonderzeichen ^, gefolgt von einem Ausdruck. Die Return-Anweisung gibt das Objekt zurück, zu dem dieser Ausdruck ausgewertet wird. Da alle anderen Anweisungen in SMALLTALK Ausdrücke sind, die zu einem Objekt ausgewertet werden, benötigen Methoden und Blöcke in SMALLTALK keine Return-Anweisungen, um ein Objekt zurückzugeben. Sie geben automatisch das Objekt zurück, zu dem die letzte Anweisung ausgewertet wird.

Frage: Was sind Anweisungen?
Antwort: Anweisungen legen fest, wie ein Programm schrittweise ausgeführt wird.

Frage: Wie werden Anweisungen in SMALLTALK getrennt?
Antwort: In SMALLTALK werden Anweisungsfolgen durch einen Punkt getrennt.

Frage: Welche Funktion hat die Return-Anweisung in SMALLTALK?
Antwort: Die Return-Anweisung gibt das Objekt zurück, zu dem der nachfolgende Ausdruck ausgewertet wird. Sie wird in Methoden und Blöcken verwendet, um das Ergebnis der Ausführung zurückzugeben.
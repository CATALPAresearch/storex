21 Zuweisungskompatibilität

Die Typisierung von Variablen (und anderen Programmelementen – wenn im nachfolgenden nur von Variablen die Rede ist, dann sind letztere meistens mitgemeint) soll also bewirken, dass in einem Programm jede Variable nur die Werte haben kann, für die sie (die Variable) vorgesehen ist (die Einhaltung der Typinvariante). Voraussetzung dafür ist zum einen, dass jeder Variable ein Typ zugeordnet ist, zum anderen, dass auch jedes Objekt sowie jeder Ausdruck, der für einen Wert oder ein Objekt steht, einen Typ hat. Ersteres geschieht in sogenannten Variablendeklarationen, letzteres ergibt sich aus den zu einem Typsystem gehörenden Regeln zur Zuordnung eines Typs zu Ausdrücken, nämlich bei Literalen aus der Art des Literals, dessen Typ dem Compiler bekannt ist, bei der Instanziierung aus dem noch zu klärenden Zusammenhang von der instanziierten Klasse mit den Typen eines Programms sowie bei Nachrichtenausdrücken aus der Deklaration der dazugehörigen Methode, die ja (genau wie eine Variablendeklaration) angeben muss, welchen Typs die Objekte sind, die sie liefert.


Frage: Wozu dient die Typisierung von Variablen?
Antwort: Die Typisierung von Variablen soll bewirken, dass in einem Programm jede Variable nur die Werte haben kann, für die sie vorgesehen ist. Dafür muss jeder Variable ein Typ zugeordnet sein und jeder Ausdruck, der für einen Wert oder ein Objekt steht, einen Typ haben.

Frage: Was ist die Typisierung von Variablen und wie wird sie erreicht?
Antwort: Die Typisierung von Variablen ist ein Konzept, bei dem jede Variable nur die Werte haben kann, für die sie vorgesehen ist. Sie wird erreicht, indem jeder Variablen ein Typ zugeordnet wird, und indem auch jedes Objekt sowie jeder Ausdruck, der für einen Wert oder ein Objekt steht, einen Typ hat. Dies geschieht durch Variablendeklarationen, die Zuordnung von Typen zu Literalen, die Instanziierung von Klassen und die Deklaration von Methoden, die angeben muss, welchen Typs die Objekte sind, die sie liefert.


Es bleibt die Frage nach den ebenfalls zu einem Typsystem gehörenden Typregeln, die von Ausdrücken einzuhalten sind, nämlich wie die Typkorrektheit bzw. andernfalls die Verletzung einer Typinvariante genau festgestellt wird. Es ist ja bereits klar, dass es dazu ausreicht, die Wertzuweisungen in einem Programm zu überprüfen. Diese Überprüfung findet in der Regel in Form der Feststellung der sog. Zuweisungskompatibilität statt. Die Sprachregelung ist hier leider nicht ganz einheitlich, aber im folgenden gehen wir davon aus, dass alle typisierten Sprachen den Begriff der Zuweisungskompatibilität kennen und sich lediglich in ihren Definitionen der Regeln, die für das Bestehen einer Zuweisungskompatibilität eingehalten werden müssen, unterscheiden. Vor allem darum wird es in den nächsten Kapiteln gehen.


Frage: Was ist Zuweisungskompatibilität?
Antwort: Zuweisungskompatibilität ist ein Begriff, der in typisierten Sprachen verwendet wird, um die Typkorrektheit von Wertzuweisungen zu überprüfen. Die Regeln, die für das Bestehen einer Zuweisungskompatibilität eingehalten werden müssen, können sich in verschiedenen Sprachen unterscheiden.


Dann sind, unter der Annahme, dass 12 vom Typ Integer ist und true vom Typ Boolean, die Zuweisungen zulässig (da sie keine Typinvariante verletzen), hingegen nicht. Ist eine Zuweisung zulässig, dann spricht man auch von einer Zuweisungskompatibilität der beteiligten Typen. Die für das Programmieren relevante Implikation ist allerdings die umgekehrte: Wenn zwei Typen zuweisungskompatibel sind, dann gilt, dass eine entsprechende Zuweisung zulässig ist, also zu keiner Verletzung einer Typinvariante führt. Wie Sie noch sehen werden, verlangt Zuweisungskompatibilität keineswegs identische Typen; daraus ergibt sich aber eine sprachliche Uneindeutigkeit, die zunächst behoben werden muss.


Frage: Wann sind zwei Typen zuweisungskompatibel?
Antwort: Zwei Typen zuweisungskompatibel, wenn eine entsprechende Zuweisung zulässig ist, also zu keiner Verletzung einer Typinvariante führt.


Dem Satz „a ist zuweisungskompatibel mit b“ kann man nicht eindeutig entnehmen, ob nun a b zugewiesen werden kann oder b a. Dass beides geht, ist nur dann der Fall, wenn die beteiligten Typen äquivalent in einem noch zu bestimmenden Sinne sind, was aber, wie schon gesagt, nicht unbedingt der Fall sein muss. Im Folgenden soll daher die Richtung der erlaubten Zuweisung so gelesen werden, dass beim Satz „a ist zuweisungskompatibel mit b“ die Zuweisung b := a zulässig ist. Die umgekehrte Richtung, a := b, kann ebenfalls zulässig sein; dies wird durch den Satz jedoch nicht ausgesagt. Zuweisungskompatibilität ist übrigens (in der Regel) eine transitive Eigenschaft: Wenn a zuweisungskompatibel mit b ist und b zuweisungskompatibel mit c, dann ist auch a zuweisungskompatibel mit c.


Frage: Was bedeutet es, wenn eine Variable a zuweisungskompatibel mit einer Variablen b ist?
Antwort: Wenn eine Variable a zuweisungskompatibel mit einer Variablen b ist, dann bedeutet das, dass der Wert von b der Variablen a zugewiesen werden kann. Diese Zuweisungskompatibilität ist eine transitive Eigenschaft, d.h. wenn a zuweisungskompatibel mit b ist und b zuweisungskompatibel mit c, dann ist auch a zuweisungskompatibel mit c.


Auch bei impliziten Zuweisungen wie der Parameterübergabe von Methodenaufrufen (den dabei stattfindenden Zuweisungen der tatsächlichen an die formalen Parameter) impliziert Zuweisungskompatibilität Typkorrektheit. Außerdem kann eine Methode, wenn sie Werte zurückgibt, ja selbst in rechten Seiten von Zuweisungen auftreten; der Typ dieser Werte muss dann mit der Variable auf der linken Seite zuweisungskompatibel sein.


Frage: Was bedeutet Zuweisungskompatibilität?
Antwort: Zuweisungskompatibilität bedeutet, dass der Typ der Variablen auf der linken Seite einer Zuweisung mit dem Typ des Wertes auf der rechten Seite der Zuweisung kompatibel sein muss. Diese Kompatibilität impliziert Typkorrektheit, sowohl bei impliziten Zuweisungen wie der Parameterübergabe von Methodenaufrufen als auch bei expliziten Zuweisungen.

Frage: Was bedeutet Zuweisungskompatibilität bei Methodenaufrufen?
Antwort: Zuweisungskompatibilität bei Methodenaufrufen bedeutet, dass die tatsächlichen Parameter bei der Übergabe an die formalen Parameter zuweisungskompatibel sein müssen. Das heißt, der Typ des tatsächlichen Parameters muss mit dem Typ des formalen Parameters übereinstimmen oder der tatsächliche Parameter muss in den formalen Parameter zuweisungskompatibel sein.

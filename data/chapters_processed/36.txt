36 Klassen

Java ist (wie SMALLTALK und alle in der nächsten Kurseinheit behandelten Sprachen) klassenbasiert und nicht prototypenbasiert. Das bedeutet, dass man programmieren kann, indem man Klassendefinitionen angibt. Wie bereits in Kapitel 34 erwähnt, gibt es in Java keine Anweisungen außerhalb von Klassen (abgesehen von Import-Anweisungen).


Frage: Was bedeutet es, dass Java klassenbasiert und nicht prototypenbasiert ist?
Antwort: In Java werden Programme durch Angabe von Klassendefinitionen erstellt, im Gegensatz zu prototypenbasierten Sprachen, bei denen Objekte direkt erstellt und angepasst werden können.

Frage: Was ist der Unterschied zwischen klassenbasierten und prototypenbasierten Programmiersprachen?
Antwort: Klassenbasierte Programmiersprachen wie Java, SMALLTALK und andere Sprachen, die in der nächsten Kurseinheit behandelt werden, verwenden Klassendefinitionen, um das Programmieren zu ermöglichen. Prototypenbasierte Sprachen hingegen verwenden Prototypen, um Objekte zu erstellen und zu definieren. In prototypenbasierten Sprachen gibt es keine Klassendefinitionen, sondern Objekte werden direkt erstellt und können dann als Vorlage für andere Objekte dienen.


Wie ebenfalls bereits erwähnt wurde, besteht in Java ein relativ enger Zusammenhang zwischen Klassen und Dateien. Jede Datei enthält die Definition einer Klasse, die den Dateinamen (ohne Erweiterung) als Namen trägt. Eine Datei (oder Compilation Unit) kann auch mehrere Klassen enthalten, die dann natürlich verschiedene Namen haben müssen. Es darf jedoch keine dieser Klassen als "public" deklariert werden. Dies liegt zum Teil daran, dass die meisten integrierten Entwicklungsumgebungen für Java heute auf Dateibasis arbeiten und Dateien die Grundlage vieler Versionsverwaltungssysteme bilden. Daher ist es wenig üblich, mehrere Klassen in einer Datei zu definieren, es sei denn, es handelt sich um innere Klassen (siehe unten).


Frage: Wie ist der Zusammenhang zwischen Klassen und Dateien in Java?
Antwort: In Java besteht ein enger Zusammenhang zwischen Klassen und Dateien. Jede Datei enthält die Definition einer Klasse, die den Dateinamen (ohne Erweiterung) als Namen trägt. Eine Datei kann auch mehrere Klassen enthalten, die dann verschiedene Namen haben müssen. Es darf jedoch nur eine dieser Klassen als "public" deklariert werden.


Klassen und Typen sind zunächst zwei verschiedene Konzepte, aber eine Typdefinition aus einer Klassendefinition abgeleitet werden kann. Genau das trifft auf Java zu: Jede Klasse definiert ihren eigenen Typ. Genauer gesagt, spezifiziert jede Klasse einen Typ, der denselben Namen wie die Klasse trägt und Felddefinitionen sowie Methodendeklarationen der Klasse als Eigenschaften enthält.


Frage: Wie hängen Klassen und Typen in Java zusammen?
Antwort: In Java definiert jede Klasse ihren eigenen Typ, der denselben Namen wie die Klasse trägt und Felddefinitionen sowie Methodendeklarationen der Klasse als Eigenschaften enthält.

Frage: Was definiert eine Klasse in Java?
Antwort: In Java definiert jede Klasse ihren eigenen Typ, der denselben Namen wie die Klasse trägt und Felddefinitionen sowie Methodendeklarationen der Klasse als Eigenschaften enthält.

Frage: Wie wird in Java ein Typ definiert?
Antwort: In Java wird ein Typ durch eine Klassendefinition definiert, die Felddefinitionen und Methodendeklarationen enthält. Jede Klasse definiert somit ihren eigenen Typ, der denselben Namen wie die Klasse trägt.


Beachten Sie, dass im Gegensatz zu STRONGTALK in Java der Typ bei Deklarationen ohne spitze Klammern vorangestellt wird, in Anlehnung an die Tradition von C und C++. Die spitzen Klammern in Zeile 985 kennzeichnen lediglich metasyntaktische Variablen.


Frage: Was ist der Unterschied zwischen STRONGTALK und Java in Bezug auf Deklarationen?
Antwort: In STRONGTALK werden die Typen bei Deklarationen ohne spitze Klammern nachgestellt, während in Java der Typ bei Deklarationen ohne spitze Klammern vorangestellt wird, in Anlehnung an die Tradition von C und C++. Die spitzen Klammern in Zeile 985 kennzeichnen in diesem Zusammenhang lediglich metasyntaktische Variablen.

Frage: Wie werden Variablen in Java deklariert?
Antwort: In Java wird der Typ einer Variablen bei der Deklaration vorangestellt, z.B. int x; oder String s;

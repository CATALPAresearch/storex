13.3 Collections für andere Zwecke

Nicht alle Collections dienen der Umsetzung von Zu-n-Beziehungen. Ein gutes Beispiel ist die Klasse "Interval".
Bei Instanzen der Klasse "Interval" handelt es sich um endliche arithmetische Folgen, also um beschränkte Folgen von Zahlen, die alle denselben Abstand zueinander haben. Die Elemente einer solchen Collection müssen deswegen nicht gespeichert, sondern können berechnet werden. Die Spezifikation eines Intervalls umfasst seinen Anfangs- und seinen Endwert sowie die Schrittweite, die auch negativ sein darf.
"5 to: 1 by: -2" erzeugt ein Intervall, das die Zahlen 5, 3 und 1 enthält. Intervalle dienen vor allem dem Zweck, sog. "For"-Schleifen zu emulieren.
Um der geschätzten Programmiererin auch noch die Klammern zu ersparen, wurde gleich noch die Methode "to:by:do:" hinzugefügt.
(Manche beachten, dass hier der Iterator in der Klasse "Number" und nicht in einer Collection wie "Interval" definiert wurde.) Wie man sieht, ist es in SMALLTALK möglich, ohne großen Aufwand neue Ausdrucksformen hinzuzufügen, ohne dazu (wie in den meisten anderen Sprachen notwendig) die Syntax ändern zu müssen.

Frage: Was ist die Klasse "Interval" und wofür werden ihre Instanzen verwendet?
Antwort: Die Klasse "Interval" repräsentiert endliche arithmetische Folgen von Zahlen, bei denen alle Zahlen denselben Abstand voneinander haben. Instanzen dieser Klasse werden verwendet, um solche Intervalle zu definieren, wobei die Spezifikation eines Intervalls den Anfangs- und Endwert sowie die Schrittweite umfasst, die sogar negativ sein kann.

Frage: Wie kann man ein Intervall in Smalltalk definieren, und welche Methode wird verwendet?
Antwort: Ein Intervall in Smalltalk kann mithilfe der Methode to:by: definiert werden. Zum Beispiel erzeugt 5 to: 1 by: -2 ein Intervall, das die Zahlen 5, 3 und 1 enthält.

Frage: Wozu dienen Intervalle hauptsächlich in Smalltalk?
Antwort: Intervalle in Smalltalk dienen hauptsächlich dem Zweck, sogenannte "For"-Schleifen zu emulieren.

Frage: Wie funktioniert die Verwendung eines Intervalls in einer "For"-Schleife?
Antwort: In einer "For"-Schleife verwendet man ein Intervall, um durch die darin enthaltenen Werte zu iterieren. Zum Beispiel bewirkt der Ausdruck 5 to: 1 by: -2 do: [:i | "Code hier"], dass dem Laufparameter "i" nacheinander die Werte 5, 3 und 1 zugewiesen werden.

Frage: Gibt es eine Methode in der Klasse "Number," die die Verwendung von Intervallen noch komfortabler macht?
Antwort: Ja, in der Klasse "Number" gibt es die Methode "to:by:", die ein entsprechendes Intervall zurückliefert. Dadurch kann man eine "For"-Schleife in einer kompakteren Form schreiben, z. B. 5 to: 1 by: -2.

Frage: Was ist das Besondere an der Methode "to:by:do:"?
Antwort: Die Methode "to:by:do:" erlaubt die kompakte Darstellung einer "For"-Schleife und erspart die Verwendung von Klammern. Sie ermöglicht es, den Schleifenkörper in einem übersichtlichen Format anzugeben.

Frage: Wo ist der Iterator für Intervalle definiert?
Antwort: Der Iterator für Intervalle ist in der Klasse "Number" definiert und nicht in einer Collection-Klasse wie "Interval."

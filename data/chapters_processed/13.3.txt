13.3 Collections für andere Zwecke

Nicht alle Collections dienen der Umsetzung von Zu-n-Beziehungen. Ein gutes Beispiel ist die Klasse "Interval". Eine Intervall-Collection enthält eine Anzahl von Elementen, die durch eine untere und obere Grenze bestimmt sind. Die untere Grenze ist inklusiv, die obere Grenze exklusiv. Die Anzahl der Elemente ist also die Differenz zwischen der oberen und unteren Grenze. Die Elemente eines Intervalls sind die ganzen Zahlen, die zwischen der unteren und oberen Grenze liegen.

Frage: Wozu dient die Intervall-Collection?
Antwort: Die Intervall-Collection dient der Umsetzung von Zu-n-Beziehungen und enthält eine Anzahl von Elementen, die durch eine untere und obere Grenze bestimmt sind. Die untere Grenze ist inklusiv, die obere Grenze exklusiv. Die Anzahl der Elemente ist also die Differenz zwischen der oberen und unteren Grenze. Die Elemente eines Intervalls sind die ganzen Zahlen, die zwischen der unteren und oberen Grenze liegen.

Frage: Welche Art von Beziehungen kann die Klasse "Interval" nicht umsetzen?
Antwort: Die Klasse "Interval" ist nicht geeignet, um Zu-n-Beziehungen umzusetzen.

Frage: Was ist eine der Eigenschaften der Klasse "Interval"?
Antwort: Eine der Eigenschaften der Klasse "Interval" ist, dass sie eine zusammenhängende Sequenz von Objekten repräsentiert, die durch einen Start- und Endwert definiert sind.


Bei Instanzen der Klasse "Interval" handelt es sich um endliche arithmetische Folgen, also um beschränkte Folgen von Zahlen, die alle denselben Abstand zueinander haben. Die Elemente einer solchen Collection müssen deswegen nicht gespeichert, sondern können berechnet werden. Die Spezifikation eines Intervalls umfasst seinen Anfangs- und seinen Endwert sowie die Schrittweite, die auch negativ sein darf.


Frage: Was sind Instanzen der Klasse "Interval"?
Antwort: Instanzen der Klasse "Interval" sind endliche arithmetische Folgen, also beschränkte Folgen von Zahlen, die alle denselben Abstand zueinander haben. Die Elemente einer solchen Collection müssen nicht gespeichert, sondern können berechnet werden. Die Spezifikation eines Intervalls umfasst seinen Anfangs- und seinen Endwert sowie die Schrittweite, die auch negativ sein darf.


"5 to: 1 by: -2" erzeugt ein Intervall, das die Zahlen 5, 3 und 1 enthält. Intervalle dienen vor allem dem Zweck, sog. "For"-Schleifen zu emulieren. Um der geschätzten Programmiererin auch noch die Klammern zu ersparen, wurde gleich noch die Methode "to:by:do:" hinzugefügt. "to:do:" ist eine Methode, die eine Schleife über eine Sequenz von Zahlen erzeugt. Die Sequenz beginnt mit dem ersten Wert, der als Argument übergeben wird, und endet mit dem letzten Wert, der ebenfalls als Argument übergeben wird. Die Methode "to:by:do:" ist eine Variante von "to:do:", die eine Schrittweite als drittes Argument akzeptiert.


Frage: Was macht die Methode "to:by:do:"?
Antwort: Die Methode "to:by:do:" ist eine Methode in SMALLTALK, die eine Zählung von einer Startzahl bis zu einer Endzahl mit einem bestimmten Schritt durchführt. Dabei wird eine Block-Variable verwendet, die für jeden Schritt ausgeführt wird. Die Syntax lautet: "to:end by:increment do:aBlock"

Frage: Was macht die Methode "to:do:" in Smalltalk?
Antwort: Die Methode "to:do:" in Smalltalk erzeugt eine Schleife über eine Sequenz von Zahlen, die mit dem ersten Wert beginnt und mit dem letzten Wert endet, die als Argumente übergeben werden. Die Methode akzeptiert eine Blockvariable, die für jede Zahl in der Sequenz verwendet wird.


(Manche beachten, dass hier der Iterator in der Klasse "Number" und nicht in einer Collection wie "Interval" definiert wurde.) Wie man sieht, ist es in SMALLTALK möglich, ohne großen Aufwand neue Ausdrucksformen hinzuzufügen, ohne dazu (wie in den meisten anderen Sprachen notwendig) die Syntax ändern zu müssen.


Frage: Wie können neue Ausdrucksformen in SMALLTALK hinzugefügt werden?
Antwort: In SMALLTALK können neue Ausdrucksformen ohne großen Aufwand hinzugefügt werden, ohne dazu die Syntax ändern zu müssen.

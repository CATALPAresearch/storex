51 C++

Mit einer so chaotischen Syntax, dass sogar Compiler raten müssen, ist es besser, dass C++-Code wiederverwendbar ist, denn niemand wird jemals daran denken, ihn rückzuentwickeln. Die "Funktion" der Programmiersprache - nämlich eine Erweiterung von C zu sein - ist ein grundlegendes Problem. Mit zahlreichen großen Projekten, die bereits in veralteten Dialekten geschrieben wurden, kann man C++ sicherlich als eine "sofortige Legacy"-Sprache betrachten.


Frage: Wie wird C++ oft beschrieben?
Antwort: C++ wird oft als eine "sofortige Legacy"-Sprache beschrieben, die eine Erweiterung von C ist und eine chaotische Syntax hat.

Frage: Was ist das grundlegende Problem von C++?
Antwort: Das grundlegende Problem von C++ ist, dass es eine Erweiterung von C ist.

Frage: Warum ist es besser, dass C++-Code wiederverwendbar ist?
Antwort: Es ist besser, dass C++-Code wiederverwendbar ist, weil niemand jemals daran denken wird, ihn rückzuentwickeln, aufgrund der chaotischen Syntax.

Frage: Warum wird C++ als "sofortige Legacy"-Sprache bezeichnet?
Antwort: C++ wird als "sofortige Legacy"-Sprache bezeichnet, weil es zahlreiche große Projekte gibt, die bereits in veralteten Dialekten geschrieben wurden und weil die chaotische Syntax von C++ dazu führt, dass sogar Compiler raten müssen, was der Programmierer beabsichtigt hat. Diese Faktoren machen es unwahrscheinlich, dass C++-Code rückentwickelt wird, und somit ist die Wiederverwendbarkeit von C++-Code wichtiger als seine Rückentwicklung.


Über C++ wurde viel geschrieben, und nicht alles davon war positiv. Dabei wird jedoch häufig vergessen, dass eine der harten Anforderungen bei der Entwicklung von C++ die vollständige Rückwärtskompatibilität zu C ist, was ein so schwerwiegender Nachteil ist, dass fast jede Kritik an C++ als unfair angesehen werden muss. Natürlich kann man in C++ völlig unlesbaren Code schreiben, aber das gilt auch für C, weil man in C völlig unlesbaren Code schreiben kann. Aber man kann auch C++ mit einer neuen Syntax versehen (mithilfe seines Präprozessors, der übrigens Turing-äquivalent ist und daher die Ausdrucksstärke einer vollwertigen Programmiersprache besitzt) und dann völlig lesbaren Code schreiben.


Frage: Warum wird oft vergessen, dass C++ vollständig rückwärtskompatibel zu C sein muss?
Antwort: Bei der Entwicklung von C++ war eine der harten Anforderungen die vollständige Rückwärtskompatibilität zu C. Diese Anforderung wird oft vergessen, was ein so schwerwiegender Nachteil ist, dass fast jede Kritik an C++ als unfair angesehen werden muss.

Frage: Kann man in C++ völlig unlesbaren Code schreiben?
Antwort: Ja, man kann in C++ völlig unlesbaren Code schreiben, aber das gilt auch für C, weil man in C völlig unlesbaren Code schreiben kann.

Frage: Kann man auch C++ mit einer neuen Syntax versehen und dann völlig lesbaren Code schreiben?
Antwort: Ja, man kann C++ mit einer neuen Syntax versehen, indem man den Präprozessor verwendet, der die Ausdrucksstärke einer vollwertigen Programmiersprache besitzt, und dann völlig lesbaren Code schreiben.

Frage: Warum ist die Kritik an C++ als unfair anzusehen?
Antwort: Die Kritik an C++ ist als unfair anzusehen, weil bei der Entwicklung von C++ die vollständige Rückwärtskompatibilität zu C gefordert wurde, was ein so schwerwiegender Nachteil ist, dass fast jede Kritik an C++ als unfair angesehen werden muss.

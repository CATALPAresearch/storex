11.4 Subklassenhierarchie und Vererbung unter Metaklassen

Vererbung ist nicht auf die Klassen der Ebene 1 beschränkt — in SMALLTALK können vielmehr auch Metaklassen, die ja ebenfalls Klassen sind, voneinander erben. Da Metaklassen aber bei der Erzeugung von Klassen automatisch angelegt werden (und auch keine eigenen Namen haben), hat die Programmiererin auch keinen direkten Einfluss auf die Vererbungshierarchie der Metaklassen. Vielmehr wird diese automatisch parallel zur Vererbungshierarchie der Klassen, die Instanzen der Metaklassen sind, angelegt. Dies hat zur Folge, dass in SMALLTALK neben den Instanzvariablen und -methoden auch die Klassenvariablen und -methoden von einer Klasse auf ihre Subklassen vererbt werden.


Frage: Kann Vererbung in SMALLTALK auch auf Metaklassen angewendet werden?
Antwort: Ja, Vererbung kann in SMALLTALK auch auf Metaklassen angewendet werden, da Metaklassen ebenfalls Klassen sind. Die Vererbungshierarchie der Metaklassen wird automatisch parallel zur Vererbungshierarchie der Klassen angelegt, die Instanzen der Metaklassen sind.

Frage: Kann Vererbung in SMALLTALK nur auf der Ebene 1 stattfinden?
Antwort: Nein, Vererbung ist in SMALLTALK nicht auf die Klassen der Ebene 1 beschränkt. Auch Metaklassen, die ja ebenfalls Klassen sind, können voneinander erben. Diese Vererbungshierarchie der Metaklassen wird automatisch parallel zur Vererbungshierarchie der Klassen angelegt, die Instanzen der Metaklassen sind.

Frage: Wie vererben sich Klassenvariablen und -methoden in SMALLTALK?
Antwort: In SMALLTALK werden Klassenvariablen und -methoden von einer Klasse auf ihre Subklassen vererbt. Dies geschieht automatisch parallel zur Vererbungshierarchie der Klassen, die Instanzen der Metaklassen sind.


Da in SMALLTALK jede Klasse direkte oder indirekte Subklasse von Object ist und die Subklassenhierarchie der Metaklassen parallel zu der ihrer Klassen angelegt ist, erbt jede Metaklasse in SMALLTALK automatisch von Object class, der Metaklasse von Object. Was läge also näher, als die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen — darunter auch die beiden Standardkonstruktoren new und new: — in Object (genauer: als Instanzmethoden von Object class) zu definieren?


Frage: Wo werden die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen, definiert?
Antwort: Die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen, werden in Object class definiert, der Metaklasse von Object.

Frage: Wo werden die Klassenmethoden in Smalltalk definiert?
Antwort: In Smalltalk werden die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen, als Instanzmethoden von Object class definiert.

Frage: Warum werden die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen, in Object class definiert?
Antwort: Die Klassenmethoden, die allen Klassen zur Verfügung stehen sollen, werden in Object class definiert, da jede Klasse in SMALLTALK direkte oder indirekte Subklasse von Object ist und die Subklassenhierarchie der Metaklassen parallel zu der ihrer Klassen angelegt ist. Somit erbt jede Metaklasse in SMALLTALK automatisch von Object class, der Metaklasse von Object.


Nun gibt es ja schon, wie bereits in Fußnote 29 oben erwähnt, in SMALLTALK zwei Arten von Objekten, nämlich solche, die instanziierbar sind (also Klassen) und solche, die es nicht sind. Darüber hinaus gibt es auch noch eine Unterscheidung zwischen Klassen, die Metaklassen sind, und solchen, die es nicht sind — bei allen Gemeinsamkeiten von Klassen und Metaklassen muss man z. B. von Klassen neue Subklassen bilden können, von Metaklassen jedoch nicht. Diese Unterscheidungen müssen schließlich irgendwo getroffen werden. Und so kommt es, dass Object class nicht die Wurzel der Vererbungshierarchie der Metaklassen ist (kann sie sowieso nicht, denn auch sie muss eine Subklasse von Object sein!), sondern selbst von einer für diesen Zweck vorgesehenen Klasse erbt. Aus demselben Grund, aus dem die Klasse Object „Object“ und die Klasse Metaclass „Metaclass“ heißt, heißt diese Klasse „Class“: Es gilt nämlich für jede Instanz dieser Klasse, dass sie eine Klasse ist. Man beachte übrigens, dass Class, auch wenn sie die Superklasse aller Metaklassen ist, selbst keine Metaklasse ist, denn sonst müsste Class ja als Superklasse von Object class und wegen der parallelen Vererbungshierarchie von Metaklassen und Klassen die (Meta-)Klasse einer Klasse sein, die Superklasse von Object ist. Ist sie aber nicht. Außerdem ist, wie man sich leicht überzeugen kann, die Klasse von Class die Klasse Class class und erst Class class eine Metaklasse. Zugegebenermaßen etwas kompliziert.


Frage: Wie werden Klassen und Metaklassen in SMALLTALK unterschieden?
Antwort: In SMALLTALK gibt es zwei Arten von Objekten: solche, die instanziierbar sind (Klassen) und solche, die es nicht sind. Darüber hinaus gibt es eine Unterscheidung zwischen Klassen, die Metaklassen sind, und solchen, die es nicht sind. Diese Unterscheidungen müssen irgendwo getroffen werden. Die Klasse Object ist nicht die Wurzel der Vererbungshierarchie der Metaklassen, sondern erbt von einer für diesen Zweck vorgesehenen Klasse. Die Klasse Class ist die Superklasse aller Metaklassen, ist aber selbst keine Metaklasse. Die Klasse von Class ist Class class und erst Class class eine Metaklasse.

Frage: Was ist der Unterschied zwischen Klassen und Metaklassen in Smalltalk?
Antwort: In Smalltalk gibt es zwei Arten von Objekten: solche, die instanziierbar sind (Klassen) und solche, die es nicht sind. Darüber hinaus gibt es eine Unterscheidung zwischen Klassen, die Metaklassen sind, und solchen, die es nicht sind. Diese Unterscheidungen müssen irgendwo getroffen werden. Die Klasse Object ist nicht die Wurzel der Vererbungshierarchie der Metaklassen, sondern erbt von einer für diesen Zweck vorgesehenen Klasse. Die Klasse Class ist die Superklasse aller Metaklassen, ist aber selbst keine Metaklasse. Die Klasse von Class ist Class class und erst Class class eine Metaklasse.

Frage: Was ist die Rolle der Klasse "Class" in Smalltalk?
Antwort: Die Klasse "Class" ist in Smalltalk die Superklasse aller Metaklassen. Jede Instanz dieser Klasse ist eine Klasse. Die Klasse von Class ist Class class und erst Class class eine Metaklasse.


Die Klasse Class steht in der Vererbungshierarchie SMALLTALKs neben der Klasse Metaclass. Gemeinsam erben sie von der Klasse Behavior (in SMALLTALK-80 und direkten Derivaten indirekt, über die Klasse ClassDescription), in der schließlich, neben vielen anderen Methoden, new und new: definiert sind. Man beachte, dass diese Methoden als Instanzmethoden deklariert sind; da sie aber in der Vererbungshierarchie SMALLTALKs von den Metaklassen der Klassen geerbt werden (z. B. Object class), stehen sie in den Klassen als Klassenmethoden zur Verfügung. new und new: werden also in der Praxis immer an Klassen geschickt.


Frage: Was ist die Klasse Class in SMALLTALK?
Antwort: Die Klasse Class ist in SMALLTALK eine Klasse, die neben der Klasse Metaclass in der Vererbungshierarchie steht und gemeinsam mit ihr von der Klasse Behavior erbt. Die Klasse Class stellt Methoden zur Verfügung, die als Klassenmethoden in den Klassen zur Verfügung stehen, wie zum Beispiel new und new:.

Frage: Was ist der Unterschied zwischen new und new: in Smalltalk?
Antwort: new erstellt eine neue Instanz eines Klassentyps, während new: eine neue Instanz mit angegebenen Parametern erstellt.

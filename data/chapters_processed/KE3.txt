Kurseinheit 3: Typen in der objektorientierten Programmierung

Der Zweck eines Typsystems besteht darin, das Auftreten von Ausführungsfehlern während der Programmausführung zu verhindern. Die Genauigkeit dieser informellen Aussage hängt von der eher subtilen Frage ab, was einen Ausführungsfehler darstellt. Selbst wenn dies geklärt ist, ist die Typsicherheit einer Programmiersprache (das Fehlen bestimmter Ausführungsfehler in allen Programmläufen) eine nicht-triviale Eigenschaft. Eine sorgfältige Analyse ist erforderlich, um falsche und peinliche Behauptungen zur Typsicherheit zu vermeiden. Als Konsequenz hat sich die Klassifikation, Beschreibung und Erforschung von Typsystemen zu einer formalen Disziplin entwickelt.


Frage: Was ist der Zweck eines Typsystems?
Antwort: Der Zweck eines Typsystems besteht darin, das Auftreten von Ausführungsfehlern während der Programmausführung zu verhindern.

Frage: Was ist Typsicherheit?
Antwort: Typsicherheit ist die Eigenschaft einer Programmiersprache, die das Fehlen bestimmter Ausführungsfehler in allen Programmläufen gewährleistet.

Frage: Warum ist die Typsicherheit eine nicht-triviale Eigenschaft?
Antwort: Die Typsicherheit ist eine nicht-triviale Eigenschaft, weil eine sorgfältige Analyse erforderlich ist, um falsche und peinliche Behauptungen zur Typsicherheit zu vermeiden.

Frage: Warum hat sich die Klassifikation, Beschreibung und Erforschung von Typsystemen zu einer formalen Disziplin entwickelt?
Antwort: Die Klassifikation, Beschreibung und Erforschung von Typsystemen hat sich zu einer formalen Disziplin entwickelt, weil die Typsicherheit eine nicht-triviale Eigenschaft ist und eine sorgfältige Analyse erforderlich ist, um falsche und peinliche Behauptungen zur Typsicherheit zu vermeiden.


Im Gegensatz zu SMALLTALK sind die meisten objektorientierten Programmiersprachen typisiert, was bedeutet, dass Programmelementen bei ihrer Deklaration Typen zugeordnet werden. Ein Typ beschränkt die Menge der Objekte, für die ein Programmelement stehen kann, und die Arten von Operationen, die darauf angewendet werden können. Typregeln sind in der Regel ein fester Bestandteil der Sprache. Wenn Sie eine solche Sprache neu erlernen, würden Sie normalerweise nicht daran denken, das Typsystem von der restlichen Sprachdefinition zu trennen. Dennoch sind Typen prinzipiell für das Funktionieren eines Programms entbehrlich, und es kann sich durchaus lohnen, das Typsystem einer Sprache von ihrem Rest zu isolieren, insbesondere wenn Sie es austauschen oder verbessern möchten. Dies gilt umso mehr, da gängige Typsysteme heute entweder ziemlich schwach oder ziemlich komplex sind.


Frage: Was ist der Unterschied zwischen SMALLTALK und typisierten objektorientierten Programmiersprachen?
Antwort: Im Gegensatz zu SMALLTALK sind die meisten objektorientierten Programmiersprachen typisiert, was bedeutet, dass Programmelementen bei ihrer Deklaration Typen zugeordnet werden. Ein Typ beschränkt die Menge der Objekte, für die ein Programmelement stehen kann, und die Arten von Operationen, die darauf angewendet werden können. Typregeln sind in der Regel ein fester Bestandteil der Sprache.

Frage: Was ist der Unterschied zwischen typisierten und nicht typisierten Programmiersprachen?
Antwort: Im Gegensatz zu typisierten Programmiersprachen, in denen Programmelementen bei ihrer Deklaration Typen zugeordnet werden, sind nicht typisierte Sprachen so konzipiert, dass Typen bei der Deklaration entbehrlich sind. Typen beschränken die Menge der Objekte, für die ein Programmelement stehen kann, und die Arten von Operationen, die darauf angewendet werden können. Typregeln sind in der Regel ein fester Bestandteil der Sprache, aber in nicht typisierten Sprachen können Typen von der restlichen Sprachdefinition getrennt werden, um sie auszutauschen oder zu verbessern.

Frage: Was ist der Zweck von Typen in objektorientierten Programmiersprachen?
Antwort: Der Zweck von Typen in objektorientierten Programmiersprachen ist es, Programmelementen bei ihrer Deklaration Typen zuzuordnen, die die Menge der Objekte beschränken, für die sie stehen können, und die Arten von Operationen, die darauf angewendet werden können. Typregeln sind in der Regel ein fester Bestandteil der Sprache und können das Funktionieren eines Programms sicherstellen.


Daher führt diese Kurseinheit in Typsysteme am Beispiel von STRONGTALK ein, einer SMALLTALK-Erweiterung um ein optionales Typsystem. Sie geht dabei langsam und inkrementell vor. Wer das als zu langweilig empfindet, sei gewarnt: Es wird noch kompliziert genug, und nicht jede Leserin wird alles, was sie in diesem Kurs über Typsysteme liest, auf Anhieb verstehen. Es wäre auch eine Option, diese Kurseinheit anhand einer bekannteren Sprache mit einem obligatorischen Typsystem zu erstellen. Dies hätte jedoch den Nachteil, dass das konkrete Typsystem als gegeben angesehen werden müsste. Wenn Sie dann später eine andere Sprache kennenlernen, hätten Sie wahrscheinlich Schwierigkeiten, das Gelernte abzulegen und sich an die neuen Gegebenheiten anzupassen. Das Ziel dieser Kurseinheit ist jedoch, dass Sie Typsysteme als das verstehen, was sie sind: eine Möglichkeit zur Spezifikation redundanter Informationen, die die Qualität von Programmen erhöhen sollen.


Frage: Was ist STRONGTALK?
Antwort: STRONGTALK ist eine SMALLTALK-Erweiterung um ein optionales Typsystem. Typsysteme sind dabei eine Möglichkeit zur Spezifikation redundanter Informationen, die die Qualität von Programmen erhöhen sollen.

Frage: Warum ist es von Vorteil, Typsysteme anhand einer Sprache mit optionalem Typsystem zu lernen?
Antwort: Es ist von Vorteil, Typsysteme anhand einer Sprache mit optionalem Typsystem zu lernen, weil man so die Grundlagen von Typsystemen verstehen und die Möglichkeit hat, das Gelernte auf andere Sprachen mit optionalen oder obligatorischen Typsystemen anzuwenden. Wenn man direkt mit einer Sprache mit obligatorischem Typsystem beginnt, besteht die Gefahr, dass man sich an die spezifischen Eigenschaften dieses Typsystems gewöhnt und Schwierigkeiten hat, das Gelernte auf andere Sprachen zu übertragen.

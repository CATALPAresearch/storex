27 Typumwandlungen

Zuweisungskompatibilität unter Subtyping erlaubt also die Zuweisung von Objekten eines Subtyps an Variablen eines Supertyps. Für die statische Typprüfung ergibt sich daraus kein Problem, weil sichergestellt ist, dass die Subtypen alle Eigenschaften ihrer Supertypen erhalten, so dass keine Typfehler auftreten können. Für die Programmiererin ergibt sich aber manchmal das Problem, dass sie ein Objekt, auf das eine Variable eines Supertyps verweist, wie ein Objekt seines tatsächlichen Typs verwenden möchte, in der Regel, weil sie eine Methode darauf aufrufen möchte, die der Supertyp nicht hat. Genau diesen Methodenaufruf würde die Typprüfung aber zurückweisen.


Frage: Was ist Zuweisungskompatibilität unter Subtyping?
Antwort: Zuweisungskompatibilität unter Subtyping erlaubt die Zuweisung von Objekten eines Subtyps an Variablen eines Supertyps.

Frage: Warum ist Zuweisungskompatibilität unter Subtyping möglich?
Antwort: Zuweisungskompatibilität unter Subtyping ist möglich, weil Subtypen alle Eigenschaften ihrer Supertypen erben und somit keine Typfehler auftreten können.


Für diesen Zweck gibt es die Möglichkeit der Typumwandlung (engl. type cast). Eine Typumwandlung ist ein Verfahren, bei dem der vorgefundene Typ eines Ausdrucks (einer Variable oder eines Methodenaufrufs) in einen vorgegebenen konvertiert wird. Mit dem Objekt, für das der Ausdruck steht, passiert dabei gar nichts — es wird lediglich der Compiler (bzw. der Type Checker) davon überzeugt, dass der Ausdruck den bei der Umwandlung angegebenen Typ hat. Sollte sich zur Laufzeit herausstellen, dass das nicht der Fall ist, kann ein Laufzeittypsystem — soweit vorhanden — dies bei seiner dynamischen Typprüfung bemerken und ggf. einen entsprechenden Fehler melden.


Frage: Was ist eine Typumwandlung?
Antwort: Eine Typumwandlung ist ein Verfahren, bei dem der vorgefundene Typ eines Ausdrucks in einen vorgegebenen konvertiert wird. Dabei passiert mit dem Objekt selbst nichts, sondern nur der Compiler wird davon überzeugt, dass der Ausdruck den angegebenen Typ hat.


Typumwandlungen können grundsätzlich in verschiedene Richtungen erfolgen: zu Supertypen, zu Subtypen oder zu solchen, die weder Supertyp noch Subtyp des Ausgangstyps sind. Man spricht entsprechend von Upcast, Downcast oder Crosscast. Upcasts sind immer typsicher, Downcasts und Crosscasts nicht. Downcasts sind relativ häufig; sie kommen vor allem dort vor, wo kein parametrischer Polymorphismus zur Verfügung steht oder wo ein Objekt seinem tatsächlichen Typ entsprechend behandelt werden soll. Crosscasts sind eher selten; in der interfacebasierten Programmierung stehen sie für einen Rollenwechsel eines Objekts.


Frage: Was ist ein Upcast in der Typumwandlung?
Antwort: Ein Upcast ist eine Typumwandlung von einem Typ zu einem Supertyp. Upcasts sind immer typsicher.

Frage: Was ist der Unterschied zwischen Upcast, Downcast und Crosscast?
Antwort: Upcasts sind Typumwandlungen zu Supertypen, Downcasts sind Typumwandlungen zu Subtypen und Crosscasts sind Typumwandlungen zu Typen, die weder Supertyp noch Subtyp des Ausgangstyps sind. Upcasts sind immer typsicher, Downcasts und Crosscasts hingegen nicht. Downcasts werden häufig verwendet, wenn kein parametrischer Polymorphismus zur Verfügung steht oder wenn ein Objekt seinem tatsächlichen Typ entsprechend behandelt werden soll. Crosscasts sind eher selten und stehen für einen Rollenwechsel eines Objekts.


Nun sind Typumwandlungen entweder überflüssig oder unsicher. Man sollte daher versuchen, auf sie zu verzichten. Wo unverzichtbar, sollten Typumwandlungen mit einem Typtest abgesichert werden. Dabei wird zur Laufzeit geprüft, ob das Objekt, für das der typgewandelte Ausdruck steht, auch den gewünschten Typ hat. Ist das nicht der Fall, sollten die Teile des Programms, die den bei der Typumwandlung genannten Typ voraussetzen, nicht ausgeführt werden.


Frage: Was ist der Zweck von Typumwandlungen in der Programmierung?
Antwort: Typumwandlungen sind in der Programmierung entweder überflüssig oder unsicher. Wenn sie unverzichtbar sind, sollten sie mit einem Typtest abgesichert werden, um sicherzustellen, dass das Objekt, für das der typgewandelte Ausdruck steht, auch den gewünschten Typ hat.

Frage: Warum sollte man auf Typumwandlungen verzichten?
Antwort: Typumwandlungen können überflüssig oder unsicher sein. Daher ist es besser, auf sie zu verzichten, um Fehler zu vermeiden. Wenn sie unverzichtbar sind, sollten sie mit einem Typtest abgesichert werden, um sicherzustellen, dass das Objekt, für das der typgewandelte Ausdruck steht, den gewünschten Typ hat.



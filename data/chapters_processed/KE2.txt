Kurseinheit 2: Systematik der objektorientierten Programmierung

In der vorangegangenen Kurseinheit haben Sie die Grundkonzepte der objektorientierten Programmierung mit SMALLTALK kennengelernt. Neben den Objekten selbst zählen dazu vor allem die Beziehungen zwischen diesen (durch Instanzvariablen ausgedrückt), der davon abgeleitete Zustand von Objekten sowie das in Form von Methoden definierte Verhalten. Was bislang verschwiegen wurde, ist, wie Objekte, für die es keine literale Repräsentation gibt, entstehen und wie ihnen ihre Instanzvariablen und ihre Methoden zugeordnet werden. Wie das zu geschehen hat, ist mit dem Begriff der objektorientierten Programmierung nicht grundsätzlich festgelegt. Eine gewisse Anerkennung und Verbreitung erfahren haben aber drei verschiedene Ansätze: der Konstruktoransatz, bei dem der Aufbau eines Objekts in einer Methode beschrieben wird, in der dem Objekt bei seiner Erzeugung Instanzvariablen und Methoden zugeordnet werden; verschiedene Konstruktoren erzeugen dann verschieden aufgebaute Objekte; der Prototypenansatz, bei dem ein schon existierendes Objekt samt seiner Instanzvariablen und Methoden geklont wird; ein Klon kann bei Bedarf um weitere Instanzvariablen und Methoden ergänzt werden oder geklonte können abgeändert oder entfernt werden; und der Klassenansatz, bei dem alle Objekte als Instanzen von bestimmten Vorlagen, die entweder selbst keine Objekte oder Objekte auf einer anderen Ebene sind, erzeugt werden.


Frage: Wie können Objekte, für die es keine literale Repräsentation gibt, entstehen?
Antwort: Es gibt drei verschiedene Ansätze, wie Objekte entstehen können: der Konstruktoransatz, bei dem der Aufbau eines Objekts in einer Methode beschrieben wird, in der dem Objekt bei seiner Erzeugung Instanzvariablen und Methoden zugeordnet werden; der Prototypenansatz, bei dem ein schon existierendes Objekt samt seiner Instanzvariablen und Methoden geklont wird; und der Klassenansatz, bei dem alle Objekte als Instanzen von bestimmten Vorlagen erzeugt werden.

Frage: Was ist der Klassenansatz in der objektorientierten Programmierung?
Antwort: Der Klassenansatz ist ein Ansatz in der objektorientierten Programmierung, bei dem alle Objekte als Instanzen von bestimmten Vorlagen, die entweder selbst keine Objekte oder Objekte auf einer anderen Ebene sind, erzeugt werden. Diese Vorlagen werden als Klassen bezeichnet.

Frage: Was ist der Unterschied zwischen dem Konstruktoransatz und dem Klassenansatz in der objektorientierten Programmierung?
Antwort: Beim Konstruktoransatz wird der Aufbau eines Objekts in einer Methode beschrieben, in der dem Objekt bei seiner Erzeugung Instanzvariablen und Methoden zugeordnet werden. Bei jedem Aufruf dieser Methode entsteht ein neues Objekt. Im Gegensatz dazu, erzeugt der Klassenansatz Objekte als Instanzen von bestimmten Vorlagen, die als Klassen bezeichnet werden. Alle Objekte, die von einer Klasse erzeugt werden, haben dieselben Instanzvariablen und Methoden.

Frage: Was ist der Prototypenansatz in der objektorientierten Programmierung?
Antwort: Der Prototypenansatz ist ein Ansatz in der objektorientierten Programmierung, bei dem ein schon existierendes Objekt samt seiner Instanzvariablen und Methoden geklont wird. Ein Klon kann bei Bedarf um weitere Instanzvariablen und Methoden ergänzt werden oder geklonte können abgeändert oder entfernt werden.

Frage: Was ist der Unterschied zwischen dem Prototypenansatz und dem Klassenansatz in der objektorientierten Programmierung?
Antwort: Beim Prototypenansatz wird ein schon existierendes Objekt samt seiner Instanzvariablen und Methoden geklont und bei Bedarf um weitere Instanzvariablen und Methoden ergänzt. Im Gegensatz dazu, erzeugt der Klassenansatz Objekte als Instanzen von bestimmten Vorlagen, die als Klassen bezeichnet


Den Konstruktoransatz findet man in Sprachen wie EMERALD, den Prototypenansatz in Sprachen wie SELF oder JavaSCRIPT und den Klassenansatz in Sprachen wie SMALLTALK, C++, EIFFEL, Java, C-Sharp, SCALA und vielen anderen mehr. Aus verschiedenen Gründen hat sich die dritte Variante, die klassenbasierte Form der Objektorientierung (wobei die Klassen die erwähnten Vorlagen sind) gegenüber der zweiten, der prototypenbasierten Form der Objektorientierung weitgehend durchgesetzt. Die erste Variante findet im Zuge einer gewissen Ernüchterung bzgl. der objektorientierten Programmierung zunehmend Anhänger, und zwar da, wo Objekte und dynamisches Binden (s. Abschnitt 12) im Kontext traditioneller imperativer Programmierung angeboten werden sollen. Sie liegt damit aber außerhalb des Gegenstands dieses Kurstextes. Die Dominanz der klassenbasierten Form der objektorientierten Programmierung liegt vermutlich zum einen daran, dass Klassen ein klassisches, in anderen Disziplinen wie der Mathematik oder der Biologie fest etabliertes Ordnungskonzept darstellen, mit dessen Hilfe sich auch objektorientierte Programme gut strukturieren lassen, und zum anderen daran, dass Klassen sich als (Vorlagen für) Typen eignen und somit die objektorientierte Programmierung Eigenschaften anderer, nicht objektorientierter, dafür aber typisierter Sprachen (also Sprachen, bei denen alle Variablen und Funktionen bei der Deklaration einen Typ zugeordnet bekommen und der Variableninhalt immer vom deklarierten Typ sein muss) übernehmen kann. Die prototypenbasierte Form der Objektorientierung hat hingegen den Charme, dass sie mit weniger Konzepten auskommt und dass sie sehr viel flexibler einzelne Objekte an ihren jeweiligen Zweck anpassen kann, z. B. indem sie eine Methodendefinition nur für ein einziges Objekt abzuändern erlaubt. Letzteres ist z. B. bei der Programmierung von grafischen Bedienoberflächen, bei der das Drücken verschiedener Buttons jeweils verschiedene Ereignisse auslöst (Methoden aufruft), sehr praktisch. Nicht umsonst ist JavaSCRIPT als Programmiersprache für interaktive Webseiten so erfolgreich. Auch wenn es gute Gründe für die prototypenbasierte Form der objektorientierten Programmierung gibt (und sich deswegen jedes Werk zum Thema objektorientierte Programmierung — so wie auch das Ihnen vorliegende — gemüßigt fühlt, darauf hinzuweisen, dass es sie gibt), werde ich mich im Folgenden vornehmlich Klassen als strukturbildenden Konzepten der objektorientierten Programmierung zuwenden und nur hier und da Prototypen kurz die Referenz erweisen.


Frage: Was sind die drei Varianten der Objektorientierung?
Antwort: Die drei Varianten der Objektorientierung sind der Konstruktoransatz, der Prototypenansatz und der Klassenansatz. Die klassenbasierte Form der Objektorientierung hat sich gegenüber der prototypenbasierten Form weitgehend durchgesetzt, da Klassen sich als (Vorlagen für) Typen eignen und somit die objektorientierte Programmierung Eigenschaften anderer, nicht objektorientierter, dafür aber typisierter Sprachen übernehmen kann. Die prototypenbasierte Form der Objektorientierung hat hingegen den Charme, dass sie mit weniger Konzepten auskommt und dass sie sehr viel flexibler einzelne Objekte an ihren jeweiligen Zweck anpassen kann.

1.2 Literale

Ein Literal (von lat. littera, der Buchstabe) ist eine Repräsentation eines Objekts, die in der Syntax der Programmiersprache ausgedrückt wird. Literale sind somit textuelle Spezifikationen von Objekten. Wenn der Compiler ein Literal übersetzt, erzeugt er bei der Übersetzung das entsprechende Objekt im Speicher. Dies unterscheidet sich von objekterzeugenden Anweisungen in einem Programm, da diese erst zur Laufzeit des Programms ausgeführt werden. Obwohl wir uns in der nächsten Kurseinheit ausführlicher mit der programmgesteuerten Erzeugung von Objekten befassen werden, müssen wir vorerst mit Objekten zufrieden sein, die eine literale Repräsentation haben. Beachten Sie, dass Literale Objekte repräsentieren, aber nicht selbst Objekte sind.
Die einfachsten Literale repräsentieren Zeichen (mit Ausnahme von Zeichenobjekten). In SMALLTALK wird diesen Literalen ein $-Zeichen vorangestellt, um sie von anderen Zeichen im Programm zu unterscheiden. Zum Beispiel bezeichnet das Literal $a das Zeichenobjekt "a". Dieses Objekt ist atomar, das heißt, es besteht nicht aus anderen Objekten. In anderen Programmiersprachen sind Zeichen in der Regel auch Werte.
Eine weitere Art von Literalen, die atomare Objekte repräsentieren, sind Zahl-Literale. Zum Beispiel ist 1 ein Literal, das das Objekt "1" bezeichnet. Zahl-Literale bezeichnen ebenfalls atomare Objekte, sie sind in anderen Programmiersprachen in der Regel ebenfalls Werte, jedoch nicht für sehr große Zahlen mit beliebiger Genauigkeit, die in anderen objektorientierten Sprachen durch Objekte repräsentiert werden.
Die in anderen Programmiersprachen vorhandenen Literale (oder Schlüsselwörter), wie true, false und nil (oder null), die ebenfalls atomare Objekte repräsentieren, sind in SMALLTALK nicht vorhanden. Damit sind sie nicht Literale, sondern sogenannte Pseudo-Variablen (siehe Abschnitt 1.7). Der Grund dafür scheint pragmatischer Natur zu sein: SMALLTALK hat keine Schlüsselwörter, und indem true, false und nil als Pseudo-Variablen betrachtet werden, müssen sie vom Compiler nicht syntaktisch von Variablen (siehe Abschnitt 1.5) unterschieden werden. Sie repräsentieren jeweils ein entsprechendes Objekt, das in anderen Sprachen wiederum Werte sind.
Wenn es atomare Objekte gibt, müssen auch zusammengesetzte Objekte existieren. Zum Beispiel können Zeichen zu Zeichenketten, den sogenannten Strings, zusammengesetzt werden, die ebenfalls Objekte sind. Ein String kann selbst wiederum durch ein Literal bezeichnet werden. Zum Beispiel steht in SMALLTALK das Literal 'Smalltalk' für ein String-Objekt mit dem Inhalt "Smalltalk". Dieses Objekt setzt sich aus Zeichenobjekten zusammen, die durch die Zeichenliterale $S, $m, $a, $l, $l, $t, $a, $l und $k repräsentiert werden. Die Details zur Zusammensetzung von Objekten und wie sie funktioniert, werden in den Abschnitten 2.1 und 2.3 genauer erläutert.
String-Literale repräsentieren also zusammengesetzte Objekte. Dies wirft die Frage auf, ob zwei identische String-Literale dasselbe Objekt im Speicher repräsentieren. Dies ist nicht grundsätzlich der Fall, wie wir später sehen werden.
Um sicherzustellen, dass syntaktisch identische Zeichenketten stets dasselbe Objekt bezeichnen, bietet SMALLTALK sogenannte Symbole als weitere Art von Objekten mit literaler Repräsentation. Zum Beispiel ist #Smalltalk die literale Repräsentation eines Objekts. Es bezeichnet bei jedem Vorkommen im Programm dasselbe Symbolobjekt "Smalltalk" (nicht zu verwechseln mit dem obigen String-Objekt). Symbole dürfen im Gegensatz zu Strings nicht alle Zeichen enthalten, beispielsweise keine Leerzeichen.
Da gleiche Symbolliterale immer dasselbe Objekt repräsentieren, ist die Erzeugung eines solchen Objekts technisch aufwendiger als beispielsweise die Erzeugung anhand eines String-Literals. Der Compiler muss vor der Erzeugung prüfen, ob das Literal bereits irgendwo zuvor vorkommt. Falls dies der Fall ist, wird kein neues Objekt erzeugt, sondern das bereits vorhandene verwendet. Dies erfordert eine entsprechende Verwaltung aller Symbolliterale und zugehöriger Objekte durch den Compiler. Wie leicht vorstellbar ist, wäre dieser Ansatz für die allgemein und in großer Anzahl verwendeten Strings sehr zeitaufwendig.
Abschließend versuchen einige SMALLTALK-Compiler, identische Literale, die zusammen kompiliert werden, auf dasselbe Objekt abzubilden. Dies führt manchmal durch sogenanntes Aliasing (siehe Abschnitt 1.8) zu unerwarteten Ergebnissen bei der Verwendung dieser Literale.
Die letzte wichtige Kategorie von Literalen in SMALLTALK sind Array-Literale. Die von ihnen repräsentierten Objekte sind wie Strings zusammengesetzt, bestehen jedoch nicht nur aus Zeichen, sondern aus einer Folge beliebiger Objekte, die wiederum durch Literale repräsentiert werden können. Ein Array-Literal wird in SMALLTALK durch das #-Zeichen und eine öffnende Klammer eingeleitet, gefolgt von den durch Leerzeichen getrennten Literalen und abgeschlossen durch eine schließende Klammer.
Ein solches Array-Literal wie #(1 2 3) ist ein Beispiel, während ein anderes Beispiel #('Smalltalk' #(4 5 6)) wäre. Array-Literale können ineinander verschachtelt sein, wobei das #-Zeichen bei allen inneren Arrays weggelassen wird. In diesem Fall würde das String-Literal 'Smalltalk' in Zeile 8 durch ein gleichbedeutendes Array-Literal ersetzt, das aus Zeichen-Literalen besteht.
Für Array-Literale gelten im Wesentlichen die gleichen Regeln wie für String-Literale: Das Vorhandensein von zwei syntaktisch identischen Literalen bedeutet nicht zwangsläufig, dass sie dasselbe Objekt erzeugen (oder korrekterweise, dass nur ein Objekt erzeugt wird).

Frage: Was sind Literale in der Programmierung?
Antwort: Ein Literal ist eine Repräsentation eines Objekts, die in der Syntax der Programmiersprache ausgedrückt wird. Literale sind somit textuelle Spezifikationen von Objekten.

Frage: Wie unterscheiden sich Literale von objekterzeugenden Anweisungen in einem Programm?
Antwort: Der Compiler erzeugt bei der Übersetzung eines Literals das entsprechende Objekt im Speicher, während objekterzeugende Anweisungen erst zur Laufzeit des Programms ausgeführt werden.

Frage: Warum repräsentieren Literale Objekte, aber sind selbst keine Objekte?
Antwort: Literale repräsentieren Objekte, sind jedoch selbst keine Objekte, da sie textuelle Spezifikationen von Objekten sind.

Frage: Was repräsentieren die einfachsten Literale in SMALLTALK?
Antwort: Die einfachsten Literale repräsentieren Zeichen (mit Ausnahme von Zeichenobjekten) und Zahl-Literale.

Frage: Was sind Symbole in SMALLTALK und wie unterscheiden sie sich von Strings?
Antwort: Symbole sind eine weitere Art von Objekten mit literaler Repräsentation in SMALLTALK. Sie dienen dazu, sicherzustellen, dass syntaktisch identische Zeichenketten stets dasselbe Objekt bezeichnen. Symbole dürfen im Gegensatz zu Strings keine Leerzeichen enthalten.

Frage: Welche Herausforderungen können bei der Verwendung von identischen Symbolliteralen auftreten?
Antwort: Bei der Verwendung identischer Symbolliterale kann es durch sogenanntes Aliasing zu unerwarteten Ergebnissen führen.

Frage: Was sind Array-Literale in SMALLTALK ?
Antwort: Array-Literale repräsentieren Objekte, die aus einer Folge beliebiger anderer Objekte bestehen.
28.3 Gründe für die Trennung von Typen und Klassen

Nun mögen Sie sich vielleicht fragen, warum Typen und Klassen über so viele Seiten hinweg als getrennte Begriffe dargestellt wurden, nur um am Ende zum Schluss zu kommen, dass eine Klassendefinition in der Regel auch als Typdefinition herhält. Nun, erstens ist das nicht in allen Sprachen der Fall, und zweitens ist es selbst in den Sprachen, in denen es so zu sein scheint, nicht immer der Fall (siehe Fußnote 54). Es handelt sich eher um eine Symbiose zweier verschiedener Konzepte, die unterschiedlichen Zwecken dienen, deren strukturelle Ähnlichkeit sich jedoch durch eine syntaktische Zusammenlegung ausnutzen lässt: Klassen dienen der Angabe von Implementierungen und damit als Container für ausführbaren Code. Typen dienen der Formulierung von Invarianten, die für Variablenzuweisungen gelten müssen und deren Verletzung auf einen (logischen oder semantischen) Programmfehler hinweist.


Frage: Was ist der Unterschied zwischen Typen und Klassen?
Antwort: Typen und Klassen sind zwei verschiedene Konzepte, die unterschiedlichen Zwecken dienen. Klassen dienen der Angabe von Implementierungen und damit als Container für ausführbaren Code. Typen dienen der Formulierung von Invarianten, die für Variablenzuweisungen gelten müssen und deren Verletzung auf einen (logischen oder semantischen) Programmfehler hinweist. In einigen Sprachen können diese beiden Konzepte jedoch zusammengelegt werden.


Da beide im Wesentlichen über die gleichen Elemente verfügen, lässt sich die Definition beider in einem Sprachkonstrukt zusammenfassen. Der Unterschied zwischen den beiden Konzepten, Klasse und Typ, manifestiert sich auch darin, welche Rolle sie zur Laufzeit eines Programms spielen: Typinformation beeinflusst die Ausführung eines laufenden Programms, indem sie das Programm bei Verletzung einer Invariante abbrechen lässt (durch einen dynamischen Typtest) und damit einem anderen, schwieriger zu identifizierenden Fehler zuvorkommt. Klasseninformation beeinflusst die Ausführung des laufenden Programms, indem sie die Grundlage des dynamischen Bindens bildet und in einem Programm als Eigenschaft von Objekten abgefragt werden kann. In Sprachen, in denen jede Klasse einen Typ definiert, ist diese Unterscheidung jedoch nicht immer klar getroffen und wird deswegen von Programmierern nicht unbedingt wahrgenommen.


Frage: Was ist der Unterschied zwischen Klasse und Typ?
Antwort: Klasse und Typ sind Konzepte, die sich in der Rolle unterscheiden, die sie zur Laufzeit eines Programms spielen. Typinformation beeinflusst die Ausführung eines laufenden Programms, indem sie das Programm bei Verletzung einer Invariante abbrechen lässt und damit einem anderen, schwieriger zu identifizierenden Fehler zuvorkommt. Klasseninformation beeinflusst die Ausführung des laufenden Programms, indem sie die Grundlage des dynamischen Bindens bildet und in einem Programm als Eigenschaft von Objekten abgefragt werden kann. In Sprachen, in denen jede Klasse einen Typ definiert, ist diese Unterscheidung jedoch nicht immer klar getroffen und wird deswegen von Programmierern nicht unbedingt wahrgenommen.

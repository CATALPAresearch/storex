68.2 Automatische Überprüfung
Man kann sich fragen, ob sich die Einhaltung des Law of Demeter so wie die Einhaltung der
Zugreifbarkeitsregeln automatisch überprüfen lässt. Dabei gibt es aber ein Problem: Das
Gesetz ist nämlich oben in Termini von Objekten, nicht von Variablen oder Typen formuliert.
Eine Überprüfung würde also die Auswertung von konkreten Zuweisungen und damit des
dynamischen Programmflusses erfordern, die aber mechanisch extrem aufwendig bis gar Ziel des Gesetzes
DDaass GGeesseettzz DDeemmeetteerrss:: SSpprriicchh nniicchhtt mmiitt FFrreemmddeenn..
nicht durchzuführen ist. Statt dessen prüfen automatische Checker des Law of Demeter zu-
meist lediglich die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur
auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters
(wenn der Aufruf aus einer M ethode heraus erfolgt, was meistens der Fall ist) haben. Daraus
folgt, dass eine solche Prüfung in SMALLTALK nicht möglich ist (da Ausdrücke nicht typisiert
sind).
Was aber tun, wenn man die Funktion von Ausdrücken wie oben haben und zugleich De-
meters Gese tz folgen möchte? Die Antwort ist einfach: Man erweitert das Protokoll der
Klasse des ersten Nachrichtenempfängers um die Methode(n), die man nicht verkettet auf-
rufen darf, also beispielsweise die Klasse des von a benannten Objekts um die Methode
doY. Da a das Ergebnis von doX, nennen wir es b, irgendwo herhaben muss (sonst könnte
es es ja nicht zurückgeben), kann auch a die Methode doY aufrufen und das Ergebnis zu-
rückgeben. Die Implementierung von doY würde dann durch ^ b doY abgeschlossen.
Komplizierter w ird die Sache jedoch, wenn die Verkettung länger ist, wenn also der zu ver-
meidende Ausdruck a doX doY doZ heißen würde, denn dann müsste auch noch doZ zur
Klasse von a hinzugefügt und mit entsprechenden Implementierungen versehen werden.
Man ahnt schon, wo zu das führt: zu einem Wachstum des Protokolls von a.

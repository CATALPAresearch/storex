29.2 Collections als Standardanwendungsfall für parametrischen Polymorphismus
Eine wichtige Gruppe von Klassen, die Sie in den letzten beiden Kurseinheiten kennenge-
lernt haben, sind die sog. Collection -Klassen. Auch diese bilden jeweils einen Typ, so dass
Variablen, die auf eine Collection verweisen, mit diesem Typ deklariert werden können.
Nun dienen Collections ja u. a. dem Zweck, : n-Beziehungen zwischen ei-
nem Objekt und mehreren anderen zu ermöglichen, indem si e dafür Zwischenobjekte zur
Verfügung stellen (s. Kurseinheit 2, Kapitel 13). Und so bilden die mit den Collection -Klassen
assoziierten Typen auch nur die Typen für die Zwischenobjekte. Was man jedoch eigentlich
bei der Deklaration von n-wertigen Attributen angeben (deklarieren) möchte, ist der Typ der
in Beziehung stehenden Ob jekte.
Wenn das Attribut beispielsweise kinder heißt und man damit eine Per-
son mit einer Menge anderer Objekte vom Typ Person , den Kindern, in
Beziehung setzen möchte, dann nutzt es nichts, wenn man kinder vom
Typ Person deklariert — es könnte dann höchstens eine Person enthalten und nicht meh-
rere. Was man vielmehr gern hätte, wäre etwas, das dem Array -Typkonstruktor array
[<Bereich>] of <Elementtyp> (spitze Klammern hier wieder als Begrenzer von meta-
syntaktischen V ariablen) von PASCAL gleicht: Im gegebenen Beispiel würde man gern dekla-
rieren, dass kinder den Typ Collection of Person haben soll. Genau das tut
Klasse Person
benannte Instanzvariablen kinder <Collection[Person]>
Instanzmethoden
Passend dazu ist es möglich, Collection in STRONGTALK als parametri-
schen Typ wie folgt zu definieren:
Typ Collection
Typvariablen E
Protokoll
Das Programmfragment
ist demnach typkorrekt (und weist p zwei Kinder und ein Enkelkind zu).
Ein anderes Beispiel für eine parametrische Definition einer Collection ist Dictionary : Hier
sollte nicht nur der Element -, sondern auch der Schlüsseltyp variabel gehalten werden. Eine
entsprechende parametrische Typdefinition, diesmal mit zwei Typparametern, kann wi e
folgt aussehen:
Typ Dictionary
Typvariablen S E
Supertyp Collection[E]
Protokoll
Dabei ist der parametrische Typ Dictionary ein Subtyp des ebenfalls parametrischen Typs
Collection . Man beachte, dass der Typparameter E hier bereits in der Supertypdeklara-
tion verwendet wird. Ein Dictionary, in dem Integer auf beliebige Objekte abgebildet wer-
den, erhält man dann durch die Instanz iierung Dictionary[Integer, Object] . Es ist
mit einer Variable vom Typ Collection[Object] zuweisungskompatibel . Auf die Einzel-
heiten des Subtypings bei parametrischen Typen wird in Kapitel 30 eingegangen.

14.1 Kopieren von Objekten
In Abschnitt 7.3 hatten wir ja die Instanziierung als den hauptsächlichen Weg kennenge-
lernt, w ie neue Instanzen von Klassen, für deren Objekte es keine literale Repräsentation
gibt, erzeugt werden. Wir hatten allerdings dort schon auf die Möglichkeit des Klonens/Ko-
pierens hingewiesen. Darauf wollen wir nun wieder zurückkommen.
Die einfachste Form des Kopierens eines Objekts erzeugt ein Objekt glei-
cher Klasse mit gleichen Variablenbelegungen. Dazu gibt es in SMALLTALK die Methode
Diese Meth ode liefert eine neue Instanz der Klasse des Empfängers, die in denselben Bezie-
hungen zu denselben anderen Objekten steht wie das Original. Insbesondere werden die
Objekte, die die Instanzvariablen des Originals benennen, nicht selbst kopiert. Deswegen
nennt man die Kopie flach . Sie erfolgt einfach durch Zuweisung aller Instanzvariablen des
Originals an die Instanzvariablen des neuen Objekts, das damit zur Kopie wird. Die Imple-
mentierung in SMALLTALK EXPRESS ist die folgende:
isVariable unterscheidet dabei zwischen Klassen mit indizierten Instanzvariablen und sol-
chen ohne; isPointers unterscheidet zwischen Klassen mit zusammengesetzten Objek-
ten und atomaren .
Nun ist eine flache Kopie aber häufig nicht genug. Es gibt daher noch
eine zweite Methode
Wie der Name nahele gt, unterscheidet sich die Methode deepCopy von shallowCopy
darin, dass auch die in Beziehung stehenden (durch die Instanzvariablen benannten) Objekte
kopiert werden. Statt einzelner Objekte wird also ein Objektgeflecht kopiert — die Kopie ist
tief. Es muss dazu an die beiden tatsächlich en Parameter von put: (Zeilen 566 und 570)
lediglich eine Nachricht zum Kopieren der Parameter angehängt werden. Dabei ist jedoch flaches Kopieren
Vorsicht geboten: Wenn es sich dabei ebenfalls um ein tiefes Kopieren handelt, dann kann
der Kopiervorgang leicht in eine Endlosrekursion geraten.
Selbsttestaufgabe 14.1
Überlegen Sie, wie Sie ei n rekursives tiefes Kopieren technisch in den Griff bekommen können.
Nun ist die Festlegung, ob die Kopien ihrer Instanzen tiefe oder flache
sein sollen, gelegentlich ein Charakteristikum der Klasse selbst. Jede
Klasse erbt deswegen von Object eine Methode copy , die standardmäßig (also in Object )
einfach shallowCopy aufruft (warum es nicht deepCopy aufruft, sollte klar sein) und die
die erbende Klasse entsprechend ihren eigenen Konditionen überschreiben kann. Es ist so
möglic h, die Kopiertiefe von Objektstrukturen selbst zu bestimmen, indem man copy für
manche Klassen deepCopy aufrufen lässt und das tiefe Kopieren durch Instanzen termi-
niert, deren Klassen shallowCopy aufrufen lassen.
Manchmal darf bei Kopier - oder Konvertiero perationen kein Objekt des
gleichen Typs zurückgegeben werden. In diesen Fällen sollte statt self
class (Zeile 554) self speci es aufgerufen werden:
Die Methode species war uns schon einmal begegnet, und zwar in Kurseinheit 1, Ab-
schnitt 4.6.4 , Zeile 244. Sie gibt standardmäßig die Klasse des Empfängerobjekts zurück
und kann überschrieben werden, wenn eine andere Klasse angegeben werden soll. Dies ist
z. B. bei der Methode collect: , ausgeführt auf einer Instanz von Interval , sinnvoll, da
collect: hier kein Intervall zurückgeben kann. So kann beispielsweise die von
zurückgegebene Collection von Strings nicht als Intervall dargest ellt werden . Entsprechend
ist in der Klasse Interval die Methode species als
implementiert.

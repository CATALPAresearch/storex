4.6.3 Iteration
Wenn Sie If und While schon kennen, kennen Sie sicher auch For. Die klassische Form der
For-Schleife verwendet eine Zählvariable, einen Anfangswert, ein Inkrement (das auch ne-
gativ, also ein Dekrement sein kann) sowie einen Endwert. Solche For -Schleifen gibt es in
SMALLTALK auch:
beispielsweise gibt auf dem Transcript die Folge „531“ aus.
Wir schauen uns den Ausdruck aus Zeile 219 einmal genauer an. Dem
Objekt 5 wird offenbar eine Nachricht to:by:do: gesendet, wobei 5 der Startwert, der
Parameter zu to:, 1, der Endwert, der zu by:, –2, das Inkrement u nd der zu do: ein Block
ist. Der Block stellt offenbar, ähnlich wie bei der Realisierung der While -Schleife in SMALL-
TALK, den Schleifenrumpf dar; er hat einen Parameter i, der anscheinend als Zählvariable
fungiert. Tatsächlich wird die Methode to:by:do: in SMALLTALK EXPRESS wie folgt imple-
mentiert:
Hier interessiert uns aber vor allem eine Form der Iteration, die nicht einer einfachen Zähl-
schleife e ntspricht, sondern über eine Menge von beliebigen Objekten geht. Solche Mengen
sind uns ja schon begegnet, wenn auch nur in Gestalt von literalen Arrays.
Anders als in vielen anderen Sprachen kann man in SMALLTALK über die
Elemente eines Arrays direkt, also ohne die Verwendung einer Zählschleife, deren Laufvari-
able als Index in das Array dient, iterieren. So hat die Auswertung des Ausdrucks
exakt das gleiche Ergeb nis wie die des Ausdrucks aus Zeile 219, nämlich die Ausgabe von
„531“ auf dem Transcript. i ist aber diesmal keine Zählvariable, da hier nichts gezählt wird;
es ist vielmehr eine Laufvariable, der der Reihe nach die Elemente des literalen Arrays #(5
funktioniert genauso. do: ersetzt also ganz offensichtlich das aus man-
chen anderen Sprachen (seit der Version 5.0 auch aus JAVA) bekannte For -each-Konstrukt.
Wie wir gleich sehen werden, ist die Iteration, also das Fortschalten der Elemente und die
Überprü fung der Abbruchbedingung, in der Collection, über die iteriert wird, implementiert,
weswegen man das Verfahren auch interne Iteration nennt (in Abgrenzung von der her-
kömm lichen, externen Iteration , bei der die Laufvariable selbst gesetzt und abgefragt
werden muss ). Zählschleife
Die Implementier ung der Kontrollstruktur erfolgt wiederum selbst in
SMALLTALK und ist ziemlich einfach:
Dabei ist to:do: für Ganzahlen analog zu obigem to:by:do implementiert. Die Zählvari-
able index des Blocks von Zeile 238 läuft so von 1 bis zur Anzahl der indizierten Instanzva-
riablen des Empfängers von do: (im obigen Beispiel ein Array) , die über den Auf ruf von
size auf dem Empfänger (repräsentiert durch self ) abgefragt wird. Der Inhalt der indi-
zierten Instanzvariable n des Empfängers wird dann der Reihe nach als Parameter mittels
value: an den Block aBlock zur Auswertung geschickt.

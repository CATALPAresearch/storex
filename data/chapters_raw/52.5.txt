52.5 Das Typsystem EIFFELs
EIFFEL besitzt ein einheitliches Typsystem (keine separa ten Referenz - und Werttypen) und
unterscheidet auch nicht (wie JAVA) zwischen eingebauten Operatoren und programmiere-
rinnendefinierten Methoden: Die Operation + auf Integern beispielsweise ist (wie in SMALL-
TALK) nichts weiter als eine syntaktische Variante einer Methode plus definiert in einer
Klasse INTEGER mit gleichem Parametertyp ( EIFFEL verwendet per Konvention für Klassen
und Typen vollständige Großschreibung; allerdings ist EIFFEL — wie PASCAL — nicht case
sensitive ). Die Einheitlichkeit des Typsystems von EIFFEL geht dabei über die von C# insofern
hinaus, als es keine an bestimmte Typkonstruktoren gebundene Unterscheidung von Wert -
und Referenztypen gibt; gleichzeitig unterscheidet es sich aber von dem SMALLTALK s (das
sich ja zumindest dem Anschein nach vollständig auf Referenztypen festgelegt hat) insofern,
als es auch Werttypen zu lässt. Mehr dazu gleich.
Zu den prominentesten Eigenschaften des Typsystems von EIFFEL zählen
 Mehrfachvererbung,
 Generizität (genauer: beschränkter parametrischer Polymorphismus; s. Ab-
schnitt 29.4 in Kurseinheit 3),
 das Unterdrücken von Instanzvariablen und Methoden in Subklassen (Löschen von
Methoden; s. dazu auch Abschnitt 11.3 in Kurseinheit 1) sowie
 kovariante Redefinition, unterstützt durch sog. verankerte Typen (engl . anchored
types ; so gut wie ein Alleinstellungsmerkmal EIFFELs). Überladen und
In gewisser Weise kann man das Unterdrücken von Methoden eines Typs in seinen Subtypen
in EIFFEL als ein Spezialfall der kovarianten Redefinition ansehen, nämlich einen, in dem die
Menge der möglichen Parameterobjekte auf die leere Menge eingeschränkt wird, so dass
es keinen gültigen Aufruf gibt (vgl. Kapitel in Kurseinheit 3). Auch sind die Probleme, die
kovari ante Redefinition und Unterdrückung verursachen, ähnlich. Deshalb beschränken wir
uns bei der Motivation (der Erklärung, warum EIFFEL über diese Eigenschaften verfügt), auf
ein Beispiel für kovariante Redefinition.

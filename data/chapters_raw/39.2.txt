39.2 Abhängigkeiten zwischen Modulen
Die Aufteilung eines Programms auf Module dient vor allem dem Zweck der unabhängigen
Entwicklung der Programmteile. Damit dies erreicht wird, muss die Abhängigkeit der Mo-
dule möglichst gering ausfallen. Dabei bedeutet Abhängigkeit in der Regel Änderungsab-
hängigkeit : Wenn sich in einem Teil etwas ändert, muss sich auch im davon abhängigen
Teil etwas ändern . Sie ergibt sich regelmäßig aus einer Benutzt -Beziehung; in der objektori-
entierten Programmierung kommt jedoch noch die Vererbungsabhängigkeit hinzu . Mo-
dule, die vollkommen unabhängig voneinander sind, sind ein Indikator dafür, dass man
nicht ein Programm entwickelt, sondern mehrere — wo keine Abhängigkeiten bestehen,
da gibt es auch kein Zusammenspiel.
Abhängigkeit ist eine gerichtete Beziehung: Dass A von B abhängt heißt
nicht, dass auch B von A abhängt. Und so manifestieren sich auch in den
Aufruf auf mehr als nur dem Empfängerobjekt gedispatcht wird; vgl. dazu auch Abschnitt 12.3 in
Kurseinheit 1). Vor- und Nachteile
Klassen als Modulen der JAVA-Programmierung die zwei Richtungen von Abhängigkeit in
zwei verschiedenen Formen:
1. Dass eine Klasse von (der Schnittstelle) einer anderen abhängt, erkennt man an der
Tatsache, dass auf Objekte der anderen Klasse zugegriffen wird, was man wiede-
rum daran erkennt, dass Variablen des dazugehörigen Typs deklariert werden so-
wie, soweit sich die an dere Klasse in einem anderen Paket befindet, die Klasse oder
gleich das ganze Paket importiert wird.
2. Dass eine Klasse manche Teile ihrer Member anderen zur Benutzung anbietet und
diese damit von ihr abhängig werden können, erkennt man an der Verwendung
von anderen Zugriffsmodifikatoren als private sowie an der Implementierung von
Interfaces.
In JAVA sind zirkuläre Abhängigkeiten zunächst erlaubt. Insbesondere
dürfen sich zwei Klassen (genauer: Compilation units ) wechselseitig im-
portieren. In der Softwareentwicklung ist dies jedoch ve rpönt, schon weil durch eine wech-
selseitige Abhängigkeit eine enge Kopplung dokumentiert wird, die zwischen Modulen
grundsätzlich nicht bestehen sollte. Für JAVA-Module (s. u.) sind zirkuläre Abhängigkeiten
denn auch verboten. Wenn Sie einmal in die Verlegenheit kommen sollten, selbst JAVA-
Module zu definieren, werden Sie feststellen, dass dieses Verbot eine sehr sorgfältige Pla-
nung der Modularisierung erzwingt (was für sich genommen schon einen Wert darstellt).
Vererbungsabhängigkeiten zwischen Klassen, die in JAVA durch Verwendung des Zug riffs-
modifikators protected und der Annotation @Override zumindest angedeutet werden
(mehr dazu in Kurseinheit 6, Kapitel 55), sind naturgemäß nicht zirkulär; bei der Aufweitung
der Abhängigkeit von Klassen auf Pakete können jedoch auch zirkuläre Abhängigkeiten
entstehen .

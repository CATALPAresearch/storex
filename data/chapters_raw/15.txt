15 Ein- und Ausgabeströme
Ein- und Ausgabeströme spielen in der konventionellen (objektorientierten) Programmie-
rung eine wichtige Rolle, da über sie Eingaben in und Ausgaben aus dem System erfolgen,
und zwar sowohl von/zu der Benutzerin als auch vom/zum Dateisystem. Nun ist SMALLTALK
aber als fensterbasiertes, grafisches System konzipiert, das der zeilenorientierten und text-
basierten Ein - und Ausgabe der damals vorherrschenden Programme eine Alternativ e ge-
genüberstellen wollte. Zudem ist auch eine Speicherung permanenter Daten in Dateien
nicht nötig, da mit dem Image alle Objekte dauerhaft gespeichert werden. Da ist es nur
konsequent, dass die Ein - und Ausgabe über Streams wenig Gewicht hat.
In SMALLTALK haben Streams somit zunächst auch eine andere Aufgabe:
Sie erlauben eine Form des Zugriffs auf Collections , die das Collection -
Protokoll nicht bieten kann, nämlich
 den sequentiellen Zugriff auf einzelne Elemente in beliebigen zeitlichen Abständen
(bei den Iteratoren wird immer in einem Schritt, oder in einer Anweisung, über die
ganze C ollection iteriert) sowie
 den gleichzeitigen bzw. zeitlich abwechselnden Zugriff auf (die Elemente einer) Col-
lection durch mehrere andere Objekte.
Um dies umzusetzen, braucht man Positionszeiger in eine Collection hinein, und genau die
zu liefern ist die F unktion von Streams.
Streams werden zunächst immer auf einer Collection erzeugt, deren In-
halt Basis des Streams ist. Die Erzeugung erfolgt mittels der Klassenme-
thode on:, die als Parameter eine Collection erhält. Das Basis protokoll auf Instanzebene
enthält die folgenden Methoden:
Für frei positionierbare Streams kommt noch das Protokoll zur Änderung des Zeigers hinzu:
Für peek ist die freie Positionierbarkeit notwendig, weil man dazu erst das nächste Element
anspringen und dann wieder einen Schritt zurückgehen muss .
Da ein Stream (wie eine Collection) eine Menge von Objekten repräsen-
tiert, möchte man darüber (genau wie über eine Collection) iterieren kön-
nen. Kein Problem:
Außerdem wird nat ürlich zwischen (nur) lesbaren und schreibbaren Streams unterschieden.
Erst eine weitere Kategorie von Streams operiert nicht auf Collections,
sondern auf externen Daten. Dazu gehören insbesondere die File streams . In SMALLTALK -80
wurde mit den Klassen FileDirectory , File und FilePage (die selbst keine Streams
sind) ein eigenes Dateisystem geschaffen; die meisten heute gebräuchlichen Implementie-
rungen nehmen jedoch eine Abbildung auf das Betriebssystem vor, für das sie geschrieben
wurden . Man erkennt hier noch sehr schön, welche Funktion SMALLTALK ursprünglich zuge-
dacht war: die der einzigen Software auf einem Computer.
Besonders in SQUEAK gibt es noch zahllose weitere Streams, so u. a. für Multimedia -Aufga-
ben; insgesamt unterscheiden sic h die verschiedenen SMALLTALK -Dialekte bei der Handha-
bung von Streams zum Teil erheblich, weswegen wir hier auch nicht weiter darauf einge-
hen.

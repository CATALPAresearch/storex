46.2 Interne Iteration
Von SMALLTALK kennen Sie ja schon die Möglichkeit, Iterationen als Methoden der Collec-
tion-Klassen zu definieren (die interne Iteration ; s. Abschnitt 4.6.4 in Kurseinheit 1 und Ka-
pitel 13 in Kurseinheit 2). Mit Version 8 wurden nun auch in JAVA (anonyme) Funktionen
(die sog. Lambda -Ausdrücke ) eingeführt, die interne Iterationen à la SMALLTALK erlauben .
Allerdings wurden für die Implementierung der Methoden forEach , filter , map und
reduce (entsprechend SMALLTALK s do, select , collect und inject ) ein eigenes Frame-
work geschaffen: die sog. Streams . For-each -Schleife
Streams sind ein mit JAVA 8 neu einge führtes Konstrukt, da s eine Daten-
verarbeitung in Pipelines ganz ähnlich wie die Collections in SMALLTALK erlaubt: Das Ergebnis
einer Operation wie filter oder map, auf einem Stream ausgeführt, ist wieder ein Stream,
auf dem weitere Operationen dieser Art ausgeführt werden können (das Pipelining ). Das
besondere an Streams ist, dass sie keine Datenspeicher wie Collections sind, sondern interne
Iteratoren : Jeder Stream für sich hält zu einem Zeitpunkt immer genau ein Element einer
potentiell unendlichen Folge vo n Elementen. Dabei dienen Streams entweder abgeschlos-
sene Datenspeicher wie Collections und Files oder offene Datenlieferanten wie die Tastatur
oder Datengeneratoren (wie beispielsweise ein Zufallszahlengenerator oder eine Vorschrift
zur Berechnung einer Fibonacci -Folge) als Quelle. Ein Ergebnis liefert eine Stream -Pipeline
(die auch aus nur einem Element bestehen kann) immer erst durch einen sog. Abschluss,
also eine Methode wie reduce oder collect , die ein anderes Ergebnis als einen Stream
liefert (eine C ollection im Falle von collect ).
Das Stream -Framework von JAVA ermöglicht für viele Pipelines eine besonders effiziente
Ausführung. So muss jedes Element einer Datenquelle in der Regel nur einmal angefragt
werden und die interne Speicherung von Zwischene rgebnissen wird automatisch gering ge-
halten. Insbesondere wird gegenüber einer naiven Implementierung von Pipelines, die eine
Iteration je Element der Pipeline benötigt, in vielen Fällen nur eine Iteration gebraucht (die
sog. Stream fusion) . Zudem kann durch Wahl des Streams (und nicht der Operationen) be-
stimmt werden, ob die Verarbeitung der Pipeline parallel oder sequentiell erfolgt. Gleich-
wohl ist die Performanz von JAVA-Pipelines nicht leicht vorh erzusagen und eine gewinnbrin-
gende Verwendung setzt sicherlich einiges an Erfahrung und Kenntnis der Implementierung
voraus.

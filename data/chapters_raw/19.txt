19 Deklaration, Definition und Verwendung von Pro-
grammelementen
Programme bestehen aus Schlüsselwörtern und -zeichen sowie aus Pro-
grammelementen, deren Namen, die sogenannten Bezeichner, frei vergeben werden kön-
nen. Viele Programmiersprachen verla ngen, dass man diese Programmelemente vor der ers-
ten Verwendung vereinbart oder deklariert. Durch eine solche Deklaration gibt man dem
Compiler den Bezeichner bekannt; er kann ihn in der Folge wiedererkennen und mit der
Deklaration in Verbindung bringen.
Bei der Definition wird dem Bezeichner das zugeordnet, wofür er steht.
Im Falle einer Varia ble ist das eine bestimmte Stelle im Speicher, die ge-
nügend Platz bietet, um den Wert der Variable aufzunehmen. Im Falle einer Methode sind
es die Anweisungen, die durch die Methode zusammen gefasst werden. Nicht selten (aber
immer abhängig von der Programm iersprache) erfolgen Deklaration und Definition in einem statische Typprüfung
Ausdruck. In solchen Fällen spricht man von Deklaration beziehungsweise Definition des
Programmelementes in Abhängigkeit davon, was man gerade meint. Bei Variablen ist die
Definition in der Regel implizit und aus der Deklaration ableitbar (der Speicherplatz wird
vom Compiler automatisch zugewiesen), so dass man hier häufig Deklaration meint, selbst
wenn man Definition sagt. Bei Methoden hingegen ist die Unterscheidung essentiell: I n ihrer
Deklaration wird ihre Signatur , das ist ihr Name (in SMALLTALK der Nachrichtenselektor) und
die Lister der formalen Parameter , bekanntgegeben , in ihrer Definition wird der Signatur
der Methodenrumpf, also die Folge der mit der Methode verbundenen und bei einem Auf-
ruf auszuführenden Anweisungen, zugeordnet. Von der Definition einer Variable zu unter-
scheiden ist übrigens ihre Initialisierung , bei der ihr (der dafür vorgesehenen Speicherstelle)
ein Anfangswert zugewiesen wird; in manchen Kontexten (insbesondere im Kontext der
Programmanalyse) ist mit Variablendefinition aber auch die Zuweisung eines Werts an eine
Variable ganz all gemein gemeint.
Deklaration und Definition dienen letztlich nur einem: der Verwendung.
Die Verwendung eines Programmelements äußert sich darin, dass sein
Name, der Bezeichner, im Programmtext angeführt oder referenziert
wird. An der Stelle der Verwendung steht eine Variable für den Wert, den sie hat (bzw.,
wenn sie auf der linken Seite einer Zuweisung auftaucht, haben soll). Der Bezeichner einer
Methode steht hingegen meistens für ihren Aufruf (in manchen Sprachen durch ein Schlüs-
selwort eingeleitet), selt ener auch für einen Zeiger auf die Implementierung.
Variablendeklarationen haben Sie in SMALLTALK bislang an zwei Stellen
gesehen: als forma le Parameter in Methodendeklarationen und als tem-
poräre , lokale Variablen in Methodenrümpfen . Im Beispiel
stecken die Deklarationen von a und b als formaler Parameter und von c als temporäre
Variable. Weitere Formen der Deklaration werden Sie im Verlauf dieses Kurstextes noch zu
Gesicht bekommen.
In untypisier ten Sprachen werden Variablen ohne Angabe eines Typs (wie
z. B. in SMALLTALK ) oder gar nicht (etliche Skriptsprachen und z. B. BASIC)
deklariert. Letzteres hat den erheblichen Nachteil, dass Variablen durch
ihre erste Verwendung quasi implizit deklariert ( und damit angelegt) wer-
den, was bei Schreibfehlern dazu führt, dass man plötzlich zwei Variablen anstatt einer hat,
wobei die eine mit der anderen nichts zu tun hat. Eine solche Einladung zu Programmier-
fehlern sollten Sie als diejenige, die die Entscheidun g für die Auswahl einer Sprache zu tref-
fen hat, stets ablehnen. Deklaration und

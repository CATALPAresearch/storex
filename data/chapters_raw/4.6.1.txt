4.6.1 Verzweigung
Die einfache Verzweigung wird in SMALLTALK durch das Versenden eine Nachricht, die die
bedingt auszuführenden Anweisungen in Form eines Blocks als Parameter enthält, an einen
Wahrheitswert realisiert:
beispielsweise gibt genau dann die Meldung „x > 5“ auf der Konsole aus, wenn x > 5 zu
true auswertet.
Um zu verstehen, wie das funktioniert, sehen wir uns zunächst die Implementierung der
Verzweigung mittels ifTrue: an. Sie wird durch eine Methode ifTrue: aB lock reali-
siert, die als Parameter aBlock , also ein e Folge von Anweisungen , erhält, das sie, der Be-
deutung von If entsprechend, entweder ausführt oder eben nicht ausführt. Diese Methode
ist für die beiden Objekte true und false (genauer: für die beiden Objekte, die die Pseu-
dovariablen true und false benennen; siehe Abschnitt 1.7) jeweils unterschiedlich imple-
mentiert:
für true und
für false . Wenn also der Empfänger der Nachricht ifTrue: aBlock das Objekt true
ist, dann bewirkt die Auswertung, dass der Block aBlock ausgeführt wird; ist das Objekt
hingegen false , wird aBlock nicht ausgef ührt, was genau der Bedeutung der Nachricht
entspricht. So hat
genau den erwarteten Effekt. Aufgrund der Continuation bei Blöcken (s. Abschnitt 4.4.2 )
ist es möglich, aus einer Methode mittels ifTrue: bedingt zurückzukehren:
liefert true zurück, da durch die Auswertung des Blocks [^ true] per value in Zeile 197
nicht der Block, sondern die Methode returnEarly , beendet wird. W ie man sieht, hat das
zunächst etwas eigenwillig anmutende Konzept der Continuation in Kombination mit Re-
turn eine erhebliche programmierpraktische Relevanz.
Aus Symmetriegründen wird auch die Methode ifFalse: aBlock angeboten, die wie
folgt implementiert ist:
für true sowie
für false . Eigentlich viel zu banal, um es hinzuschreiben, aber da es nur ein einziges Mal
gemacht werden muss und dabei so etwas Fundamentales wie die Verzweigung realisiert,
kann man sich auch daran freuen.
Falls Sie dies dennoch für einen Budenzauber halten, dann haben Sie zu-
mindest nicht völlig unrecht: Die Verzweigu ng ist nä mlich gar nicht wirk-
lich aus dem Sprach kern verschwunden, sie ist nur an einer Stelle ver-
steckt , an der Sie sie vielleicht nicht vermuten: an der Stelle der Auswahl der Methode, die
in Reaktion auf den Empfang einer Nachricht ausgeführt wird (also beim dynamischen Bin-
den).
Selbsttestaufgabe 4.3
Überlegen Sie, wie Sie das aus anderen Sprachen bekannte If -then-else-Konstrukt in SMALLTALK rea-
lisieren würden und schreiben Sie die entsprechenden Methodendefinitionen auf.
Nach demselben Prinzip wie die einfache Fallunterscheidung vermeidet SMALLTALK übrigens
auch solche, die das Auftreten von nil betreffen. So ist zum Beispiel die Methode isNil
für nil als
und für alle anderen Objekte als
implementiert.
Selbsttestaufgabe 4.4
Überlegen Sie, wie Sie die logischen Operatoren and: , or: und not für true und false imple-
mentieren würden!

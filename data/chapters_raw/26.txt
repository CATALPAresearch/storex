26 Subtyping und Inklusionspolymorphie
Die Einführung von Typäquivalenz und Typkonformität bezog sich bislang lediglich auf das
Verhältnis der Typdefinitionen, also der Intensionen der Typen. Die Frage des Zusammen-
hangs der Wertebereiche der Typen, also der Extensionen, ist dabei unberücksichti gt geblie-
ben. Wenn aber die obige Definition von Typkorrektheit weiter Bestand haben soll, dann
müssen die Werte zuweisungskompatibler Typen zum Wertebereich des Typen, an den zu-
gewiesen werden soll, gehören.
Zur Erinnerung: Typannotationen stellen Invarianten dar, die die möglichen Werte einer Va-
riable beschr änken. Diese Invarianten dürfen durch Zuweisungen nicht verletzt werden.
Wenn man aber nun Zuweisungen von einem anderen Typen zu lässt, dann wird die Typ-
korrektheit nur dann nicht verletzt, wenn der Wertebereich des anderen Typen (seine Ex-
tension) in dem d essen, dem zugewiesen wird, enthalten (inkludiert) ist. Mit anderen Wor-
ten: Damit eine Zuweisung a := b , bei der sich die Typen von a und b unterscheiden,
zulässig ist, muss die Extension des Typs von b eine Teilmenge der Extension des Typs von
a sein.
Im Fall der Typerweiterung ist dies nicht automatisch der Fall. So handelt
es beispielsweise bei der Extension des Typs
Typ DreiDPunkt
erweiterter Typ ZweiDPunkt
Protokoll
als Erweiterung von
Typ ZweiDPunkt
Protokoll
nicht unbedingt um eine Teilmenge der Extension von ZweiDPunkt , denn es ist z. B. nicht
klar, was das Ergebnis der Addition eines dreidimensionalen zu einem zweidimensionalen
Punkt sein könnte — geometrisch ist die Addition zweier Punkte unterschiedlicher Dimen-
sionen jedenfalls nicht definiert. mangelnde Teilmen-
Selbsttestaufgabe 26.1
Versuchen Sie, das Beispiel mit ZweiDPunkt und DreiDPunkt so zu retten, dass sowohl Typer-
weiterung als auch Inklusion von Extensionen darin vorkommt. Evtl. finden Sie in Kapitel 9 von Kurs-
einheit 2 nützliche Hinweise.
Das Phänomen der mangelnden Extensionsinklusion bei Typerweiterung
lässt sich darauf zurückführen, dass dem erweiterten Typ ( im Beispiel
Dokument ) eigene, d. h. nicht einer seiner Erweiterungen entstammende
Werte (Objekte) zuges tanden werden. Wäre die Extension eines erweiterten Typs als die
Vereinigung der Extensionen seiner Subtypen (hier Text und Zeichnung ) definiert, gäbe
es dieses Problem nicht. Dies ist ein sehr guter Grund dafür, dass Supertypen — genau wie
Generalisierungen ( Kurseinheit 2, Kapitel 9) — keine eigenen Objekte haben sollten (vgl. a.
Abschnitt 26.1 und Kurseinheit 7, Kapitel 69).
Auch nicht selbstverständlich ist die Teilmengenbeziehung bei der Typein-
schränkung: Durch das Weglassen von Eigensch aften (Methoden) wird
die Extension, also die Menge de r Werte (Objekte), die darunter fallen,
eher größer denn kleiner — je weniger spezifisch die Menge der geforderten Eigenschaften
ist, desto mehr Objekte fallen darunter. Die sich daraus ergebende Teilmen genbeziehung
wäre also eher die umgekehrte (die Extension des einschränkenden Typen enthält die des
eingeschränkten). Etwas anders sieht es aus, wenn durch Typeinschränkung ( Redefinition )
die Ein - oder Rückgabetypen von Methoden beschränkt werden: Die Menge der Zeichnun-
gen ist eine Teilmenge der Menge der Dokumente, auch weil sich Zeichnungen eben nur
auf Plottern ausgeben lassen. Die Zuweisungskompatibilität von Zeichnung mit Dokument
wäre also, was die Inklusion der Extensionen angeht, kein Problem.
Man könnte nun die Typerweiterung unter oben gemachter Einschrän-
kung und die zweite Form der Typeinschränk ung als in dieselbe Richtung
zielende Maßnahmen ansehen: Beide schränken Extensionen ein. Das
lässt sich wie folgt erklären: Wenn man einer Menge von Objekten, die
durch eine Anzahl Attribute alle gleichermaßen charakterisiert werden, weitere Attribute
beimisst, dann schränkt man diese Menge ein, wenn die hinzugefügten Attribute nicht alle
Objekte der Menge charakterisieren. Wenn man beispielsweise wie oben geschehen die
Attributmenge des Typs Dokument um die Methode zeilen ^ <Collection> erweitert,
dann fa llen die Zeichnungen aus der durch Dokument beschriebenen Menge von Objekten
heraus, weil sie keine Zeilen haben. Alternativ könnte man auch sagen, dass Dokumente
grundsätzlich über Zeilen verfügen können, diese aber bei Zeichnungen immer in der Anzahl
erscheint das weniger natürlich.51 Man beachte die Parallelität zum Begriff der Spezialisie-
rung (Abschnitt 9.2 in Kurseinheit 2): Der durch Typerweiterung oder -einschränkung aus
Dokument hervorgegangene Typ Zeichnung ist spezieller als seine Vorlage.
Nun ergibt sich aber gemäß obigem Beispiel (Zeilen 900–902) ein Sach-
verhalt, der trotz aller Harmonie von Typerweiterung und -einschränkung
nicht weniger als den Verlust der Zuweisungskompatibilität bedeutet.
Dieser resultiert jedoch bei genauerer Be trachtung nicht daraus, dass Zeichnungen keine
Dokumente wären, sondern aus der mit der Typkorrektheit verbundenen, impliziten All-
quantifiziertheit von Typinvarianten: Eine Methodendeklaration
im Protokoll eines Ty ps Dokument wird nämlich interpretiert als „ druckenAuf: ist definiert
für alle Empfängerobjekte vom Typ Dokument und Parameterobjekte vom Typ Drucker “,
was aber in dieser Allgemeinheit sachlich falsch ist.
Typsysteme mit Typinvarianten der hier vorgestellten Art sind nicht in der
Lage, andere als implizit allquantifizierte Aussagen über Wertebereiche zu treffen. Dies ist
gewissermaßen der Preis der Einfachheit. Abhilfe schaffen neuere Typsysteme wie die Idee
von den Dependent types , wie sie beispielsweise in SCALA zum Einsatz kommen : Hier man
sich die Parametertypen von Methoden als Funktionen des Typs, zu dem die Methode ge-
hört, vorstellen. Der Parametertyp von druckenAuf: aus obigem Beispiel wäre dann, in
Abhängigkeit davon, ob die Methode auf einem Objekt vom Typ Dokument oder
Zeichnung aufgerufen wird, Drucker oder Plotter . Wie man sich leicht vorstellen kann,
ist die statische Prüfung solcher Bedingungen (Invar ianten) aber nicht so einfach.
Die Vereinigung von Typerweiterung und Typeinschränkung mit Zuweisungskompatibilität
und der daraus folgenden Typkorrektheit bietet der Begriff des Subtyps.

2.2 Unterscheidung von :1 - und : n-Beziehungen
In der Daten - und Softwaremodellierung werden Beziehungen (oder Relationen) häufig mit
sog. Kardinalitäten versehen. (Manchmal, besonders im Kontext der Softwaremodellierung
mit der Unified Modeling Language UML werden diese auch Multiplizitäten genannt.) Sie
geben an, mit wie vielen anderen Objekten ein Objekt gleichzeitig in derselben Beziehung
stehen kann. Beispielsweise kann eine Person zu mehreren anderen Personen in einer Ver-
wandtschaftsbeziehung stehen. Häufig sind die möglichen Kard inalitäten auf ein Intervall
beschränkt; sie werden dann durch eben dieses Intervall beschrieben.
Von den theoretisch unendlich vielen möglichen Intervallen, die die Kardinalität beschrän-
ken können, sind vor allem drei interessant: [0..1] , [1..1] und [0..). Dabei ist [1..1], also
dass ein Objekt immer mit genau einem in Beziehung stehen muss, technisch nur schwer
umzusetzen, so dass [1..1] hier nicht weiter betrachtet wird11; die untere Schranke 0, die
den beiden verbleibenden Intervallen gemeinsam ist und die ausdrückt, dass ein Objekt auch
mit gar keinem anderen in der Beziehung stehen kann, muss da her nicht erwähnt werden .
Im Fall von [0..1] sprechen wir also von Zu-eins-Beziehungen (im folgenden mit :1-Bezie-
hung notiert), im Fall von [0..) von Zu-n-Beziehungen (:n-Beziehungen ), wobei n hier
andeuten soll, dass es sich um eine nicht näher spezifizierte Zahl größer als 1 handelt.12
Objekt nil (null in anderen Sprachen) ausgedrückt. Nach und nach kommen in verschiedenen
objektorientierten Programmiersprachen die sog. Not -null-Annotationen auf, die sicherstellen sollen,
dass eine Variable nie den Wert null hat.
nalitäten auch für die Gegenrichtung angeben. Da wir es in der objektorientierten Programmierung Begrenzung der
Die Beziehung eines Objekts zu einem anderen wird auf natürliche Weise
durch eine benannte Instanzvariable ausgedrückt, wobei die Instanzvariable den Namen der
Beziehung oder, besser noch, den Namen der Rolle des von der Variablen referenzierten
Objektes i n der Beziehung trägt. So zeigt die Instanzvariable arbeitgeber beispielsweise
auf das Objekt, das in der Beziehung Anstellung aus Sicht des Arbeitnehmerobjekts die Rolle
des Arbeitgebers spielt. Hat auch das Arbeitgeberobjekt einen Verweis auf das Arbe itneh-
merobjekt (die Rückrichtung), so wird die entsprechende Variable sinnvollerweise nach der
Gegenrolle arbeitnehmer genannt. Steht ein Arbeitnehmerobjekt zur Zeit in keinem An-
stellungsverhältnis, ist seine Instanzvariable arbeitgeber leer, was in SMALLTALK durch den
Verweis auf das Objekt nil ausgedrückt wird.13
Beziehungen sind nicht von Natur aus auf ein Gegenüber eingeschränkt:
Ein Objekt kann, und wird häuf ig, in derselben Beziehung zu mehreren andern stehen. Ge-
nau dafür sind aber die indizierten Instanzvariablen wie geschaffen: Sie erlauben es, von
einem Objekt zu beliebig vielen anderen Objekten zu navigieren, ohne für jedes andere eine
eigene (jeweils and ers) benannte Instanzvariable vorsehen zu müssen. Die „Namen“ der
Gegenüber sind einfach Indizes: 1, 2, 3 usw.
Es ergibt sich nun aber das Problem, dass bei durch indizierte Instanzva-
riablen eines Objekts realisierten : n-Beziehungen nicht zwischen verschie-
denen solchen Beziehungen desselben Objekts unterschieden werden kann — die indizier-
ten Instanzvariablen sind ja nicht benannt. Deswegen werden : n-Beziehungen in der ob-
jektorientierten Programmierpraxis praktisch immer ü ber Zwischenobjekte realisiert, deren
Aufgabe es ist, mittels ihrer indizierten Instanzvariablen jeweils eine Beziehung zu mehreren
anderen Objekten herzustellen. Dabei können diese Zwischenobjekte die : n-Beziehung ggf.
mit weiteren Attributen (z. B. Anzahl n, Verweise auf ein bestimmtes Element, Art der Sor-
tierung o. ä.) versehen, die dann in den benannten Instanzvariablen der Zwischenobjekte
untergebracht werden. Das Originalo bjekt, das die : n-Beziehung eigentlich haben sollte,
steht dann stattdessen in einer von einer benannten Instanzvariable hergestellten :1 -Bezie-
hung zu dem Zwischenobjekt, das die : n-Beziehung herstellt.
aber nicht mit (ungerichteten, d. h. bidirektionalen) Relationen, sondern mit Verweisen (Zeigern) zu
tun haben, entfällt die Rückrichtung.
sie heute selbst als einen (seinen) „ billion dollar mistake “ bezeichnet. :1-Beziehungen
Objekt 1 Objekt 2:1-Beziehung
Objekt 1 ZwischenobjektObjekt 2.1
Objekt 2. n…:n-Beziehungbenannte Instanzvariable
benannte Instanzvariableindizierte Instanzvariable
Wie wir noch sehen we rden, erlaubt der Umstand, dass :n-Beziehungen
über Zwischenobjekte realisiert werden, die vollwertige Objekte sind, die
Beziehung en beliebig auszugestalten. So kann beispielsweise eine (Sortier -)Reihenfolge vor-
gegeben oder ein ausgezeichnetes Element der Beziehung noch einmal gesondert referen-
ziert werden (z. B. das oberste Element auf einem Stack). Auch besondere Zugriffsverfahren
wie z. B. das Auffinden von Elementen (in Beziehung stehenden Objekten) anhand eines
Schlüssels können auf diese Weise realisi ert werden. Da in SMALLTALK Objekte auch eigene
Kontrollstrukturen (wie z. B. spezielle Schleifen) anbieten können, sind der Ausgestaltung
von Beziehungen über Zwischenobjekte praktisch keine Grenzen gesetzt.
Da :n-Beziehungen häufig vorkommen, ist ihre Handhab ung von ent-
scheidender Bedeutung für die Ausdrucksstärke der verwendeten Pro-
grammiersprache und die Produktivität der Programmierung insgesamt.
Wie sich schon in Abschnitt 4.6.4 zeigen wird, erlaubt die Ausgestaltung
von Zwischenobjekten in SMALLTALK Möglichkeiten , die bis heute Vorbild-
charakter für andere objektorientierte Programmiersprachen haben.

4.4.2 Continuation
Das Konzept des Home context eines Blocks geht aber noch weiter: Es gehören nicht nur
die sichtbaren Variablen aus dem Kontext der Definition des Blocks dazu, sondern auch der
sog. Call stack , also der Speicher, in dem die Rücksprungadressen von Methodenaufrufen Blöcke in anderen
abgelegt werden. Entsprechend bedeutet eine Return -Anweisung innerhalb eines Blocks bei
seiner Auswertung auch stets die sofortige Rückkehr in den den Block definierenden Home
context (der Methode) und nicht in den Kontext (in der Methode), in dem (in der) der Block,
durch Senden von value , ausgewertet wird. Das nachfolgende Beispiel zeigt das:
Der Aufruf der Methode homeContext gibt „home“, aber nicht auch noch „other“ auf
der Konsole aus. Man nennt dieses Konzept, das ebenfalls aus der Welt der funktionale n
Programmierung stammt, auch Continuation . Continuations spielen bei der Implementie-
rung von Kontrollstrukturen in SMALLTALK eine entscheiden de Rolle (s. Kapitel 4.6).
Das Prinzip der Continuation gilt übrigens auch für geschachtelte Blöcke:
liefert true , nicht false . Return -Anweisung verlässt auch alle umschließenden Blöcke, und
zwar sofort. Dies liegt daran, dass explizite Return -Anweisungen aus Blöcken immer dahin
zurückkehren, von wo die Definition des Blocks angestoßen wurde.
Continuations können zu Laufzeitfehlern führen, nämlich wenn durch sie
von einer Methode zurückgekehrt werden soll, die bereits beendet
wurde. Wenn beispielsweise das Objekt o über die Methode
verfügt, dann führt
zu einem Laufzeitfehler, da die Auswertung des von merkwuerdig mit ihrer Beendigung
zurückgegebenen Blocks merkwuerdig noch einmal beenden müsste , was aber nicht geht.
Return -Anweisungen in Blöcken sind u. a. deswegen ein umstrittenes Konzept. Für SMALL-
TALK sind sie aber unverzichtbar, da mit ihnen fast alle Kontrollstrukturen implementiert
werden (s. Kapitel 4.6).

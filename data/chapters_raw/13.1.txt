13.1 Pflegen von : n-Beziehungen
Um : n-Beziehungen zu pflegen, also um Objekte zu einer Beziehung hinzuzufügen und
wieder zu entfernen, sieht SMALLTALK standardmäßig die Methoden add: und remove:
vor, die beide jeweils das Argumentobjekt zurückliefern. Beide sind in der abstrakten Klasse
Collection definiert, die Wurzel einer Hierarchie von Klassen , den Collection -Klassen , ist,
die allesamt der Verwirklichung von : n-Beziehungen dienen. Unsere Zwischenobjekte, die
diese Beziehungen repräsentieren, sind also alle indir ekte Instanzen von Collection .
Die Methoden add: und remove: bleiben zunächst (in Collection )
abstrakt:
Da sie von der tatsächlichen Realisierung einer Collection abhängen, können sie erst in den
entsprechenden Subklassen (durch Überschreiben ) realisiert werden.
Beim Entfernen eines Objektes aus einer Collection43 mittels remove:
gibt es zwei Sonderfälle zu berücksichtigen: Das Objekt ist nicht vorhan-
den oder das Obje kt ist mehrfach vorhanden. Im ersten Fall wird ein Fehler gemeldet, wäh-
rend im zweiten nur ein Vorkommen des Objekts aus der Collection entfernt wird (das erste,
wie auch immer die Reihenfolge festgelegt ist). Da es immer vorkommen kann, dass ein zu
entfer nendes Objekt gar nicht vorhanden ist, und ein entsprechender vorheriger Test auf
Vorhandensein (s. u.) wieder so eine stereotype Handlung ist, bietet SMALLTALK eine Variante
von remove: , die einem genau das erspart: remove: anObject ifAbsent:
anExceptionB lock . Sollte das zu entfernende Objekt fehlen, wird stattdessen
anExceptionBlock ausgeführt und dessen Ergebnis zurückgeliefert. Will man, dass beim
Versuch, ein nicht vorhandenes Objekt zu entfernen, nichts passiert, so gibt man einfach
den leeren Block [] für anExceptionBlock an. Sollen mehrere Objekte auf einmal einer
Beziehung hinzugefügt bzw. daraus entfernt werden, so stehen hierfür die Methoden
addAll: aCollection bzw. removeAll: aCollection zur Verfügung, die jeweils
eine Collection als Parameter er warten.
wusstsein, dass es sich bei den entsprechenden Instanzen p rinzipiell um eigenständige Objekte han-
delt, die hier lediglich die Funktion eines Zwischenobjektes haben, also dem Zweck der Realisierung
der Beziehungen dienen. Methoden add: und
Subklassen von Collection müssen also die Methoden add: und
remove:ifAbsent: überschreiben. Dabei offenbart sich gleich ein Cha-
rakterzug SMALLTALK s: Da seine Klassenhierarchie keine Generalisierungs-
hierarchie ist, kommt es vor, dass Subklassen die Methoden add: ,
remove: und remove:ifAbsent: löschen. Während beispielsweise in der Klasse
OrderedCollection add: und remove:ifAbsent: mit
überschrieben werden, werden sie in der Klasse FixedSizeCollection , die ebenfalls
eine Subklasse vo n Collection ist, gelöscht :
Die Methoden add: und remove: werden durch die Methoden
addAll: und removeAll: komplettiert; die Implementierung von
addAll: können Sie den Zeilen 427–431 oben (Abschnitt 10.3) entnehmen, removeAll:
verläuft im Prinzip analog (warum SMALLTALK EXPRESS hier eine Kopie zurückgibt, weiß ich
nicht). Die Methode addAll: wird dazu benutzt, eine Collection in eine andere zu konver-
tieren:
Dabei ist addAll: nur einmal, nämlich in Collection , definiert. Man beachte, dass dabei
ein Objekt nicht seine Klasse wechselt, sondern lediglich der Inhalt einer Collection in eine
neue übertragen wird. Diese Übertragung ist immer dann sinnvoll, wenn die Klasse der
neuen Collection Eigenschaften hat, die man gern nutzen möchte. Ein Be ispiel hierfür finden
Sie in Zeile 525 unten . Die Nachricht yourself (von Object geerbt) liefert übrigens ihren
Empfänger zurück ; sie wird am Ende von kaskadierten Nachrichtenausdrücken in Return -
Anweisungen verwendet, um den Empfänger zurückzuliefern .
Zum Pflegen seiner Beziehungen ist es manchmal vorteilhaft, zu wissen,
mit wie vielen Objekten m an in Beziehung steht und mit welchen. Die
Klasse Collection sieht dafür die Methoden size , isEmpty und
notEmpty , includes: sowie occurencesOf: vor, die jeweils die na-
hegelegte Bedeutung haben.

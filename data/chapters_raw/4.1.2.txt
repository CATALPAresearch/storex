4.1.2 Nachrichtenausdrücke
Neben der Zuweisung ist der Nachrichtenversand die zweite wichtige Ausdrucksform
der objektorientierten Programmierung. SMALLTALK verwendet hierfür eine Syntax, die stark
an die der engl ischen Sprache angelehnt ist: Sie verlangt ein Subjekt (den Empfänger der
Nachricht), ein Prädikat (die Nachricht ) sowie eine optionale Liste von Objekten als Prädi-
katsergänzungen (die P arameter der Nachricht). Dabei wird auf die in anderen Sprachen
übliche Verwendung des Punkts als Trennzeichen zwischen Empfänger und Nachricht und
Klammern zum Umschließen der Parameterliste verzichtet; stattdessen verwendet man bei Zustandswechsel von
zwei oder mehr Paramet ern Partikeln (Präpositionen oder Konjunktionen) ähnelnde Nach-
richtenteile, die den Parametern vorangestellt werden. Die allgemeine Syntax lautet also
für parameterlose Nachrichten,
für Nachrichten mit einem Parameter,
für Nachrichten mit zwei Parametern usw., wobei hier die in spitzen Klammern stehenden
Namen metasyntaktische Variablen , also Platzhalter für Namen in einem konkreten Pro-
gramm, sind und die Nachrichten(teile), die Parameter nach sich ziehen, immer mit einem
Doppelpunkt enden müssen.
drückt beispielsweise den Versand einer parameterlosen Nachricht tueEtwas an das Ob-
jekt, auf das die Variable einObjekt verweist, aus.16 Ein etwas konkreteres Beispiel hierfür
ist der Ausdruck
mit dem dem Objekt #abc die Nachricht printStri ng gesendet wird.
Soll einer Nachricht ein Parameter angehängt werden, so tut das
wobei einemParameter hier auch eine Variable ist (es könnte auch ein anderer Ausdruck
dort stehen; s. u.). Ein konkretes Beispiel hierfü r ist
Ein zweiter Parameter wird durch einen weiteren Nachrichtenbestandteil wie in
hinzugefügt und alle weiteren entsprechend, also etwa
men durch sog. Binnenmajuskeln (eingefüg te Großbuchstaben) und nicht durch den Unterstrich
kenntlich zu machen.
wobei sich die Nachrichtenteile wie oben ruhig wiederholen dürfen. Es ist
also insbesondere nicht so, dass die Reihenfolge der Nachrichtenteile beliebig umgestellt
werden dürfte, oh ne dass sich dadurch die Bedeutung der Nachricht änderte. Tatsächlich
ist die an das Objekt geschickte Nachricht, der sog. Nachrichtenselektor (engl. message
selector ), immer ein Symbol, das aus der Konkatenation (Aneinanderfügung) aller seiner
Teile, also im Beispiel der Zeile 48 oben #tueEtwasMit:und: besteht. Die Namen der
Nachrichtenteile sind frei wählbar, beginnen jedoch per Konvention mit einem Kleinbuch-
staben.
Parameterlose Nachrichten w ie beispielsweise tueEtwas in Zeile 44
nennt man in SMALLTALK übrigens unär (unary messages ): Obwohl sie
keine expliziten Argumente haben, heißen sie trotzdem unär, weil der Empfänger das erste,
implizite Argument ist. So nehmen denn auch sog. binäre Nachrichten17 nur einen Para-
meter, was aber zwei Argumenten, nämlich dem Empfänger und einem weiteren Argu-
ment, entspricht:
beispielsweise drückt aus, dass die Nachricht „+“ mit Argument „2“ an das Objekt „1“
gesendet werden soll.
In SMALLTALK sind binä re Nachrichten eine syntaktische Besonderheit: Sie bestehen nämlich
aus einem oder mehreren nicht alphanumerischen, nicht reservierten Zeichen (die Liste der
reservierten Zeichen finden Sie in Kapitel 5 am Ende diese r Kurseinheit ). Alle anderen Nach-
richten, die neben dem Empfänger noch mindestens ein Argument erfordern, werden in
SMALLTALK dagegen Schlüsselwortnachrichten (keyword messages ) genannt, so z. B.
tueEtwasMit: in Zeile 46 und tueEtwasMit:und: in Zeile 48. Dies ist jedoch etwas ver-
wirrend, da sie keine Schlüsselwörter im landläufigen Sinne (von denen SMALLTALK ja gar
keine hat) enthalten und da natürlich auch die unären Nachrichten „Schlüsselwörter“ ver-
wenden.
Ein Nachrichtenausdruck besteht also aus einem Empfängerobjekt, einem
Nachrichtenselektor sowie einer Anzahl von Argumentausdrücken, die
die Teile des Nachrichtenselekt ors sperren (dazwischen stehen).18 Der Ausdruck als ganzes
gleichen Typ haben
Parameter zu übergeben; in den allermeisten Fällen handelt es sich dabei um einen Anfängerinnen-Nachrichtenselektor
steht für ein Objekt, nämlich das Ergebnis der Auswertung der Nachricht durch den Emp-
fänger. Der Nachrichtensender wird dem Empfänger übrigens nicht mitgeteilt (es sei denn,
er wird explizit als Par ameter übergeben) — das System weiß automatisch, wohin die Ant-
wort auf die Nachricht zurückgeliefert werden soll (nämlich genau an die Stelle, an der der
Nachrichtenversand steht). Mehr dazu gleich, wenn es um die Auswertung von Nachrich-
tenausdrücken geht (Abschnitt 4.1.3 ).
Da ein Nachrichtenausdruck für ein Objekt steht, kann er selbst Teil eines
Nachrichtenausdrucks sein, also f ür den Empfänger der Nachricht oder
einen ihrer Parameter stehen. Es ist dann allerdings u. U. notwendig, den so geschachtelten
Nachrichtenausdruck zu klammern, da er sonst nicht richtig erkannt werden kann:
beispielsweise schiebt das Objekt auf den Stack, das Resultat der Nachricht arg:arg: ge-
sandt an das oberste Objekt des Stacks mit seinem zweiten und dritten als Parameter ist.
(Zu den genauen Regeln zur Reihenfolg e der Auswertungen siehe Abschnitt 4.1.4 .)
Nicht selten möchte man eine Serie von Ausdrücken an dasselbe Empfän-
gerobjekt senden. SMALLTALK sieht dafür mit der Kaskadierung eine nette
syntaktische Abkürzung vor, die es erlaubt, bei einer Sequenz von Nach-
richten an dasselbe Objekt dieses nicht immer wiederholen zu müssen. So sorgt beispiels-
weise
anstelle des wesentlich wortreicheren
dafür, dass die Objekte „1“, „+“ und „2“ nacheinander als Parameter der Nachricht show:
an das von der globalen Variable Transcript benannte Objekt, eine Art Systemkonsole,
gesendet werden. (Auf die Bedeutung des „.“ kommen wir in Kapitel 4.2 zu sprechen.) Das
Beispiel ist übrigens nicht b esonders zwingend, da man in SMALLTALK genauso gut auch
hätte
fehler , bei dem durchscheint, dass die Programmiererin (die vermutlich noch in Kategorien der pro-
zeduralen Programmierung denkt) nicht verstanden hat, dass jede Nachricht einen Empfänger hat,
ein Nachrichtenausdruck diesen also schon beinhaltet. geschachtelte Nach-
schreiben können (wobei , ein binärer Nachrichtenselektor ist, der für die Konkatenation
steht). cr ist übrigens eine (unäre) Nachricht, die für einen Wagenrücklauf ( carriage return )
auf dem Transcript sorgt.
Man kann sich aber durch Verwendung der Kaskadierung häufig die Ein-
führung einer temporären Variablen (s. Abschnitt 4.3) ersparen, und zwar
immer dann, wenn anstelle einer Variabl e als Empfänger ( Transcript
in obigem Beispiel) ein Ausdruck steht, der das Empfängerobjekt liefert und der nur einmal
ausgewertet werden soll. Anstelle von
kann man also
schreiben, wenn man eineVariable hernach nicht mehr benötigt. SMALLTALK unterstützt
also von Haus aus sog. Fluent APIs .

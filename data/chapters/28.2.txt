28.2 Typen als Schnittstellenspezifikationen von Klassen
Eine Klasse liefert eine Implementierung. Nach gängigen Prinzipien nicht nur der objektori-
entierten Programmierung sind Implementierungen aber hinter Schnittstellen (oder Inter-
faces ) zu verbergen: Nur die Elemente einer Klassendefinition, die für Benutzerinnen einer
Klasse zu Verwendung gedacht sind, sollen durch die Schnittstelle nach außen getragen
werden — der Rest soll verborgen bleiben (das sog. Geheimnisprinzip ).
In Programmiersprachen wie JAVA, C++ etc. gibt es spezielle Schlüssel-
wörter, die einem Element einer Klassendefinition (beispiels weise einer
Methode) vorangestellt seine Zugreif barkeit festlegen. Diese sog. Zu-
griffsmodifikatoren (engl. access modifier ) legen gemeinsam mit der Klassendefinition, die
ihre vollständige Implementierung beinhaltet, auch die Schnittstelle der Klasse fest. Je nach
Sprache ist diese Schnittstelle für alle Benutzeri nnen der Klasse gleich oder unterscheidet
sich nach Lokalität oder anderen Eigenschaften von benutzender und benutzter Klasse. Im Zugriffsmodifikato-
ren; absolute und
relative Schnittstelle
ersten Fall könnte man von einer absoluten Schnittstelle sprechen; um sie zu spezifizieren,
reicht es, zwischen sichtbar un d unsichtbar zu unterscheiden. Im zweiten Fall ist die Schnitt-
stelle relativ.
Eine absolut spezifizierte Schnittstelle einer Klasse kommt, wenn sie wirk-
lich keinerlei Implementierungsgeheimnisse verrät, einem Typ gleich. S ie
besteht nämlich nur aus Deklarationen von Methoden . Die gemachte Ein-
schränkung ist notwendig, weil manche Sprachen, so z. B. JAVA und C++, die Instanzvari-
ablen ihrer Objekte in die Schnittstelle der Klassen aufzunehmen erlauben. Mit den In-
stanzvariab len wird aber die Repräsentation der Objekte nach außen sichtbar, was dem
Gedanken des Geheimnisprinzips widerspricht.
Wenn man nun eine Variable mit einem solchen die Schnittstelle reprä-
sentierenden Typ deklariert und eine Typprüfung erfolgreich durchge-
führt hat, dann ist sichergestellt, dass über diese Variable nur auf die Ele-
mente einer Klasse zugegriffen wird, die auch Bestandteil des Interfaces der Klasse sind.
Wenn jede Instanz dieser Klasse ausschließlich über typisierte Variablen ansprechbar ist, ist
damit die Wahrung des Geheimnisprinzips garantiert. Typen dienen damit einem weiteren
Zweck, den man zunächst einmal nicht mit ihnen assoziieren würde, nämlich der Wahrung
des Implementationsgeheimnisses/Einhaltung der Schnittstellen durch den Compiler.
Dieser überaus nützliche Zusammenhang zwischen Klassen, ihren Schnittstellen und Typen
wurde erst relativ spät, nämli ch mit der Programmiersprache JAVA und ihrem Interface -als-
Typ-Konzept , so weiterentwickelt, dass eine Klasse verschiedene Schnittstellen anbieten
kann, die alle zugleich Typen der Klasse (gen auer: Supertypen des der Klasse entsprechen-
den Typs) sind. Die damit ermöglichte interfacebasierte Programmierung , die in Kurs 01853
ausführlich behandelt wird, betrachte ich persönlich als den wichtigsten Beitrag JAVAs zur
Disziplin der objektorientierten Programmierung (s. a. Kurseinheit 4, Kapitel 45).

30 Parametrischer Polymorphismus und das Kovari-
anzproblem
In gewisser Weise hat man es beim rekursiv beschränkten parametrischen Polymorphismus
wie oben vorgestellt mit einem Fall von kovarianter Redefinition zu tun: Der Parametertyp
der Methode = ändert sich mit dem Empfängertyp. Allerdings ergibt sich daraus, anders als
bei der Verwendung von Self als Typvariable , kein Widerspruch zur Kontravarianzregel des
Subtyping, denn Integer wird dadurch unmittelbar ja lediglich zu einem Sub typ von
Equatable[In teger] und nicht etwa von Equatable[Object] . Tatsächlich sind
Equatable[Integer] und Equatable[Object] ja zwei vollkommen verschiedene Ty-
pen (mit disjunkten Wertebereichen) und Equatable[T] ist gar kein Typ (so dass man
auch keine Va riable mit ihm deklarieren kann), so dass keinerlei Zuweisungskompatibilität
und damit auch kein Problem mit Typkorrektheit besteht.
Trotzdem stellt sich die Frage, ob sich das in Abschnitt 26.3 angesprochene allgemeine
Problem der wünschenswerten kovarianten Redefinition von Eingabeparametern in Metho-
den mittels parametrischen Polymorphismus nicht irgendwie lösen lässt. Die Antwort ist un-
befriedigend: nur zum Teil.
So kann man, um das Beispiel von Dokumenten und Druckern aus Abschnitt 26.3 wieder
aufzugreifen, einen parametrischen Typ Dokument wie folgt definieren: ein paar Worte zum
Trost
Typ Dokument
Typvariablen  T < Drucker
Protokoll
970 druckenAuf: einDrucker <T> ^ <Self>
Die Deklaration von Zeichnung mit Typparameter T als Subtyp von Dokument vorausge-
setzt, lassen sich die folgenden Variablendeklarationen bilden:
971 | z <Zeichnung[Plotter]> p <Plotter> l <Zeilendrucker> |
Weiterhin die Deklarationen von Plotter und Zeilendrucker als Subtypen von
Drucker vorausgesetzt wäre ein Methodenaufruf
972 z druckenAuf: p
typkorrekt,
973 z druckenAuf: l
hingegen nicht. Allerdings ist die Ass oziation von Zeichnung mit Plotter , die Kovarianz,
in keiner Typdefinition festgehalten, sondern lediglich in der Deklaration von z. Es hindert
einen insbesondere nichts daran, dieselbe oder eine andere Variable als vom Typ
Zeichnung[Zeilendrucker] zu dekl arieren. Man beachte, dass es anders als im obigen
Beispiel von Equatable , wo ja der Typparameter auf den definierten Typ selbst einge-
schränkt wurde, hier keine Möglichkeit gibt, einen bestimmten Wert für einen Typparame-
ter vorzuschreiben.
Was man allerdin gs tun könnte, ist, Zeichnung als Subtyp von Dokument[Plotter] zu
definieren. Dies hat jedoch den Nachteil, dass Zeichnung damit kein Subtyp mehr von
Dokument und, wie auch zuvor schon Zeichnung [Plotter] kein Subtyp von
Dokument[Drucker] ist (s. Abschnitt 29.3), wodurch die Zuweisungskompatibilität mit
entsprechend deklarierten Variablen verlorengeht. Kovariante Redefinition bei gleichzeitiger
Inklusionspolymorphie lässt sich auch mittels parametrischer Typen nicht hinbekommen.

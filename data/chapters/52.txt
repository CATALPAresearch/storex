52 EIFFEL
EIFFEL nimmt unter den hier behandelten Sprachen eine Sonderstellung ein. Es soll näm lich
mehrere Dinge auf einmal sein:
 eine Sprache für objektorientierte Analyse und Design,
 eine Sprache für kommerzielle Programmierung und
 eine akademische Lehrsprache.
Das herausragende Merkmal, das EIFFEL zu dieser Multifunktion qualifiziert, ist die Integra-
tion von Zusicherungen (die Formulierung von Vorbedingungen, Nachbedingungen und
Klasseninvarianten) , die, als Verträge zwischen
dienstanbietenden und dienstnehmenden Klassen interpretiert, erlauben, das Was einer
Software zumindest teilweise unabhängig vom Wie zu spezifizieren. Die Typsysteme, die Sie
in den vorangegangenen Kapiteln kennengelernt haben und von denen auch EIFFEL eines
besitzt, erlauben zwar auch schon, Zusicherungen auszudrü cken, aber die sind jeweils auf
die möglichen Werte einer Variable bezogen und bleiben dabei sowohl voneinander als
auch von der Zeit unabhängig. EIFFEL erlaubt darüber hinaus, nahezu beliebige Bedingungen
für Variablen - und Rückgabewerte von Methoden ausz udrücken, die sowohl auf andere
Werte als auch auf den zeitlichen Verlauf (vorher/nachher) Bezug nehmen können.
EIFFEL tritt in vielerlei Hinsicht in die Fußstapfen von PASCAL : Es ist nicht
nur syntaktisch ähnlich, sondern ist auch um Sparsamkeit , Klarheit und
Orthogonalität der Konzepte bemüht. Viele Dinge sind in EIFFEL ein klein bisschen anders als
in anderen Sprachen, weswegen man meinen könnte, es sei aus Prinzip anders; d ie meisten
Abweichungen sind aber wohlbegründet und vermitteln mitunter eine angenehm andere
Perspektive auf vertraute Dinge. So ist es eigentlich nur folgerichtig, dass der Erschaffer von
EIFFEL, BERTRAND MEYER, Nachfolger von NIKLAUS WIRTH auf dessen Leh rstuhl an der ETH Zü-
rich wurde.
Es ist mir nicht ganz klar, warum EIFFEL kein größerer Erfolg beschieden ist — es mag zum
einen an der über Jahre absolut unzureichenden Implementierung der Werkzeuge liegen
(insbesondere des Compilers — es wurde anfangs noch nach C übersetzt; man male sich
aus, welche Freude man als Programmiererin beim Debuggen hatte) und zum anderen an
der Natur BERTRAND MEYERs, der sich mit seiner Kompromisslosigkeit nicht nur Freundinnen
gemacht hat. Eine Rolle spielt sicher auch das unmögliche, aber trotzdem angestrebte Spa-
gat zwischen kommerzieller Einsetzbarkeit und akademischer Eignung — viele Program-
mierweisen, die in der Praxis üblich sind und auf die kaum eine Entwicklerin verzichten will,
sind akademisch verpönt. Das Typsystem EIFFELs schließlich trägt, wie Sie sich in Abschnitt
52.5 selbst vergewissern können, auch nicht unbedingt zur Akzeptanz bei. Auf der ander en
Seite hat EIFFEL neben SMALLTALK noch am ehesten das Format, die Art, wie man über das
Programmieren denkt, zu beeinflussen.

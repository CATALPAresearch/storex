36.1 Klassendefinitionen
Eine einfache Klassendefinition sieht in JAVA wie folgt aus:
986 class <Klassenname> {
987 <Typ 1> <feld1>;
988 …
989 <Rückgabetyp 1> <methode1>(<Parametertyp 1> <parameter 1>, …) {…}
990 …
991 }
Die geschweiften Klammern sind in JAVA (wie auch in C und allen syntaktisch davon abge-
leiteten Sprachen) Begrenzer für Definitionen und Blöcke; sie entsprechen den Schlüssel-
wörtern begin und end von PASCAL. Die spitzen Klammern kennzeichnen auch hier wieder
metasyntaktische Variablen (also Platzhalter für richtige Namen). Klassen und Dateien
Klassen und Typen
Die obige Klassendefinition teilt sich in die Angabe von Instanzvariablen ,
die in JAVA Felder genannt werden, und Instanzm ethoden , die in JAVA
Beide werden, der Tradition von C++ folgend, zusammenfassend auch als Member be-
zeichnet, wobei sich Member (das englische Wort für ein Element einer Menge) a uf die
Klassendefinition (oder Intension ; vgl. Abschnitt 7.2 in Kurseinheit 1) bezieht . Kon-
struktoren zählen nicht zu den Membern; sie werden in Abschnitt 36.3 behandelt.
Neben Feldern und Methoden kann eine Klassendefinition in JAVA auch
geschachtelte sowie sog. innere Klassendefinitionen besitzen. Diese Klassendefinitionen
gelten dann ebenfalls als Member der umschließenden Klasse. Sie sind vor allem dann sinn-
voll, wenn man ausdrücken will, dass die Existenz der inneren Klasse ohne die der äußeren
sinnlos wäre. So ist es beispielsweise üblich, wenn man verzeigerten Listen implementiert,
die Klasse der Listenelemente, deren Instanzen neben dem eigentlichen Inhalt auch noch
einen oder mehrere Zeiger aufnehmen müssen, innerhalb der Klasse der Liste zu definieren,
denn diese Listenelemente wird man kaum außerhalb einer Liste verwenden (und ihre Klasse
auch gar nicht kennen) wollen. Innere Klassen werden zudem immer im Kontext von Instan-
zen ihrer äußeren Klasse(n) instanziiert; Instanzen innerer Klassen liegen somit „innerhalb“
von Instanzen ihrer äu ßeren Klasse(n), auf die sie mit einem Outer this genannten Kon-
strukt zugreifen können.
Member können auch mit dem Zusatz static deklariert werden. Dabei
bedeutet static für so deklarierte Felder und Methoden, dass sie sich
nicht auf Objekte beziehen (die ja dynamische Gebilde sind), sondern auf die Klasse selbst,
in der sie definiert sind. Es handelt sich also um Klassenvariablen und -methoden . Da in JAVA
im Gegensatz zu SMALLTALK Klassen se lbst keine Objekte, sondern während der Pro-
grammausführung dauerhaft existierende, unveränderliche Gebilde sind, die nicht in Vari-
ablen gespeichert werden können, werden als static deklarierte Member auch nicht dy-
namisch gebunden .
Achtung: Man könnte im Fall von static deklarierten Feldern meinen,
dass diese dadurch zu Konstanten würden; das ist aber nicht der Fall.
Dazu dient in JAVA das Schlüsselwort final , das für Variablen aussagt, dass ihnen genau
einmal ein Wert zugewiesen werden darf. Im Gegensatz dazu brauchte man im schlüssel-
wortlosen SMALLTALK für Konstanten noch konstante Methoden (Abschnitt 4.3.6 ). Auf Me-
thoden angewandt bedeutet final , dass diese nicht in Subklassen überschrieben werden
dürfen; mehr dazu im nächsten Abschnitt.

67 Ausgewogene Verteilung
Ein weiteres Kennzeichen der objektorientierte n Programmierung ist, dass Klassen nicht ins
Uferlose wachsen. Wenn der Methodenumfang einer Klasse immer weiter ansteigt, wird
die erfahrene objektorientierte Programmiererin bald den Verdacht schöpfen, dass es sich
bei der Klasse in Wirklichkeit nicht um eine, sondern um mehr ere handelt. Dafür gibt es
zwei Erklärungen:
1. Die Klasse steht nicht für eine Abstraktion der Anwendungsdomäne, sondern für
mehrere. In diesem Fall sollte die Aufteilung der Klasse in mehrere — eine für jede
Abstraktion — leicht fallen: Man ordnet zunächst die Daten den Abstraktionen (All-
gemeinbegriffen) zu und lässt dann die Methoden den Daten folgen.
2. Die Klasse steht zwar für eine Abstraktion der Anwendungsdomäne, aber dies auf
einem höheren Abstraktionsniveau als das der Implementierung, die Sie gerade b e-
trachten. Dafür gibt es wiederum mindestens zwei mögliche Erklärungen:
in Bibliotheken umzusehen, bevor sie mit der Entwicklung eigener Ideen beginnt. so wenig wie
a. Die Abstraktion ist eine Generalisierung (s. Kurseinheit 1, Abschnitt 9.1) und
Sie haben all deren Spezialisierungen in einer Klasse zusammen gefasst . In
diesem Fall müssen Sie lediglich die unterschiedlichen Spezialisierungen
identifizieren und die jew eils darauf bezogenen (dafür charakteristischen)
Daten und Funktionen in neu zu schaffenden Subklassen verlagern. Ledig-
lich das allen Fällen gemeinsame Protokoll verbleibt dann in der (idealerweise
abstrakten) neuen Superklasse. Ein guter Indikator für die sen Fall ist das wie-
derholte Vorkommen gleicher Fallunterscheidungen , insbesondere dann,
wenn diese Fallunterscheidungen die Art der Objekte betreffen ( vgl. dazu
auch das sog. Replace -conditional -with-polymorphism -Refactoring).
b. Die Abstraktion ist eine Aggregation (oder Komposition , s. Kurseinheit 1,
Abschnitt 2.3), also eine Zusammensetzung eines Ganzen aus mehreren Tei-
len. In diesem Fall müssen Sie die Teile als logische Einheiten identifizieren
und dafür neue Klassen formulieren. Für den Fall, dass diese neuen Klassen
außerhalb der Abstraktion keine Bedeutung haben, können Sie in Erwägung
ziehen, sie als innere Klassen zu deklarieren (wenn Ihre Programmiersprache
das erlaubt), um so den Namensraum nicht zu überfrachten und die von
anderen wahrgenommene Zahl der Klassen nicht unnötig zu vergrößern.

13.2.2 Sortierte Collections
Eine weitere nützliche Collection -Klasse wird durch SortedCollection implementiert. Es
handelt sich dabei um eine Subklasse von OrderedCollection , bei der die Reihenfolge
der Elemente nicht von außen, also durch die Angabe eines Indexes oder die Reihenfolge
der Einfügung, festgelegt wird, sondern von innen, genauer durch eine Qualität der einge-
fügten Objekte. Zwischenobjekte der Klasse SortedCollection setzt man ein, wenn man
die in Beziehung stehenden Objekte in einer bestimmten Reihenfolge stehen wissen
möchte, wie z. B. die Kinder einer Person in der Namensfolge, und zwar unabhängig davon,
in welcher Reihenfolge sie der Collection hinzu gefügt wurden. Voraussetzung dafür, dass
die Elemente einer SortedCollection sortiert werden können, ist, dass sie sich verglei-
chen lassen, dass also die (binäre) Methode <= (für kleiner gleich) darauf definiert ist. So
liefert beispielsweise
525 #(3 2 1) asSo rtedCollection asArray
thode hat. Dies ist beim Forwarding (oder eben der „Delegation“) der klassenbasierten objektorien-
tierten Programmierung nicht der Fall: self in der Methode at:put: der Klasse Dictionary
bezieht sich nie auf ein Ob jekt der Klasse Bag. Dictionaries als
universelle
Datenstruktur
Vorsicht Falle!
mit #(1 2 3) das gewünschte Ergebnis.45
Wenn die Elemente, die in eine sortierte Collection eingefügt werden sol-
len, keine Größen sind, also insbesondere den Vergleich <= nicht implementieren, dann ist
es immer noch mögl ich, für eine neue Instanz einer SortedCollection einen sog. Sor-
tierblock zu spezifizieren, der zwei formale Parameter hat und dessen Auswertung z urück-
liefert, ob der erste tatsächlich e Parameter kleiner oder gleich dem zweiten ist. Tatsächlich
wird, falls man bei der Erzeugung keinen Sortierblock angibt, ein Standardsortierblock an-
genommen:
Klasse  SortedCollection
Superklasse OrderedCollection
Klassenmethoden
526 sortBlock: aBlock
527  "Answer aSortedCollection which will
528   sort in the order defined by aBlock."
529  ^ (super new: 10) sortBlock: aBlock
530 new: anInteger
531  "Answer a SortedCollection capable of
532   holding anInteger number of elements
533   which will sort in ascending order."
534  ^ (super new: anInteger) sortBlock: [ :a :b | a <= b]
benannte Instanzvariablen  sortBlock
indizierte Instanzvariablen  nein
Instanzmethoden
535 sortBlock: aBlock
536  "Answer the receiver. Set the sort block for
537   the receiver to aBlock and resort the receiver."
538  sortBlock := aBlock.
539  self reSort
540 …
45 Analog dazu gibt es noch eine ganze Reihe anderer Konvertierungsmethoden, mit deren Hilfe
eine Menge von Objekten aus einer Collection in eine andere übertragen werden kann, wobei die
Eigenschaften der Ziel -Collection berücksichtigt werden, so z. B. asSet , das doppelte Elemente ent-
fernt. Sie sind allesamt (und analog zu asBag und asOrderedCollection oben) in Collection
implementiert. Besonders interessant sind natürlich Konvertierungen in Collections, die stärkere Be-
dingungen stellen, also z. B. eben asSet und asSortedCollection . Sortierblöcke
Vorsicht Falle!
Man beachte jedoch, dass eine nach trägliche Änderung der Attribut werte, die zum Ver-
gleich der Objekte für die Sortierung herangezogen wurden, keine auto matische Änderung
der Reihenfolge bewirkt, selbst wenn dies eigentlich notwendig würde.

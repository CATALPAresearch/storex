11.3 Löschen von Methoden
Wie be reits in Abschnitt 10.3 erwähnt, wird die Programmiererin, die eine abst rakte, weil
unvollständige, Klasse instanziiert, irgendwann damit bestraft, dass das Versenden einer
Nachricht an die entsprechende Instanz zu einer Fehlermeldung führt, die ihr (per
subclassResponsibility oder implementedBySubclass , die, genau wie
doesNotUnderstand: , in der Klasse Object definiert ist) anzeigt, dass die Methode (erst)
in einer Subklasse implementiert werden sollte. Dummerweise bekommt die Programmie-
rerin diesen Hinweis erst zur Laufzeit des Programms zu Gesicht, also dann, wenn es schon
zu spät ist (es sei denn, man testet gerade). Man erkennt hieran sehr schön den interaktiven
Geist des SMALLTALK -Systems, insbesondere die Philosophie, nach der Programmieren nichts die Klasse Object
weiter ist als das iterative Zurechtbiegen und Erweitern eines bereits bestehenden, funktio-
nierenden Systems. Man muss eine Weile damit gespielt haben, um diesem Charme zu er-
liegen.
Selbsttestaufgabe 11.1 (für JAVA-Fans)
Überschreiben Sie die Methode doesNotUnderstand: so, dass man beim Versenden einer Nach-
richt an nil eine Meldung „ Null pointer exception “ erhält. Achtu ng: Speichern Sie vorher unbedingt
Ihr Image und stellen Sie es nach der Bearbeitung der Aufgabe wieder her!
Wenn man sich erst einmal damit abgefunden hat, dass man als Program-
miererin Methoden schreibt, die ausschließlich dem Zweck dienen, sich
selbst oder eine Kollegin auf Programmierfehler hinzuweisen, dann erscheint einem eine
weitere SMALLTALK -Konvention geradezu als elegant, nämlich die, geerbte Methoden durch
überschreiben auszulöschen . Tatsächlich ist genau hierfür eine weitere Methode in der
Klasse Object mit Name n „shouldNotImplement“ vorgesehen, die zu einer entsprechen-
den Fehlermeldung führt. Eine Klasse, die also eine geerbte Methode löschen möchte, über-
schreibt diese einfach mit
im Rumpf. Bevor Sie jetzt als disziplinierte Programmiererin den Stab über SMALLTALK bre-
chen, erlauben Sie noch den Hinweis, dass der Wunsch, geerbte Methoden zu löschen,
direkte Folge der vorrangigen Orienti erung an Vererbung ist, die bereits oben kritisiert
wurde: Wäre die Superklasse auf Grundlage des Prinzips der Generalisierung ausgewählt
worden, käme man gar nicht in die Verlegenheit, Methoden löschen zu wollen, denn alles,
was für die Generalisierung si nnvoll ist, ist grundsätzlich auch für ihre Spezialisierungen
sinnvoll, oder die Generalisierung ist keine Generalisierung. Außerdem haben Sie auch in
Sprachen mit starker Typprüfung, in denen das Löschen von Methoden nicht möglich ist,
als Programmiererin immer die Freiheit, eine Methode so zu überschreiben, dass sie garan-
tiert nichts tut, was mit der Idee der Klasse, von der sie ererbt ist, in Einklang zu bringen
wäre. Auch hier wäre n Laufzeitfehler die unvermeidbare Folge. Mehr dazu im Kurseinheit 3;
hier sei nur soviel bemerkt wie, dass wenn man sich bei der Organisation seiner Klassenhie-
rarchie auf das P rinzip der Generalisierung stützt, dass man dann auch nicht in die Verle-
genheit kommt, Methoden löschen zu wollen.

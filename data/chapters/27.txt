27 Typumwandlungen
Zuweisungskompatibilität unter Subtyping erlaubt also die Zuweisung von Objekten eines
Subtyps an Variablen eines Supertyps. Für die statische Typprüfung ergibt sich dara us kein
Problem, weil sichergestellt ist, dass die Subtypen alle Eigenschaften ihrer Supertypen erhal-
ten, so dass keine Typfehler auftreten können. Für die Programmiererin ergibt sich aber
manchmal das Problem, dass sie ein Objekt, auf das eine Variable eines Supertyps verweist,
wie ein Objekt seines tatsächlichen Typs verwenden möchte, in der Regel, weil sie eine Me-
thode darauf aufrufen möchte, die der Supertyp nicht hat. Genau diesen Methodenaufruf
würde die Typprüfung aber zurückweisen. Attraktivität der
Inklusions -
polymorphie
Unzulänglichkeit der
einfachen Definition
Für diesen Zweck gibt es die Möglichkeit der Typumwandlung (engl. type cast ). Eine Ty-
pumwandlung ist ein Verfahren, bei dem der vorgefundene Typ eines Ausdrucks (einer Va-
riable oder eines Methodenaufrufs) in einen vorgegebenen konvertiert wird. Mit dem Ob-
jekt, für das der Ausdruck steht, passiert dabei gar nichts — es wird lediglich der Compiler
(bzw. der Type checker) davon überzeugt, dass der Ausdruck den bei der Umwandlung
angegebenen Typ hat. Sollte sich zur Laufzeit herausstellen, dass das nicht der Fall ist, k ann
ein Laufzeittypsystem — soweit vorhanden — dies bei seiner dynamischen Typprüfung be-
merken und ggf. einen entsprechenden Fehler melden (vgl. die Anmerkungen daz u in Ka-
pitel 18).
Typumwandlungen können grundsätzlich in verschiedene Richtungen er-
folgen: zu Supertypen, zu Subtypen oder zu solchen, die weder Super -
noch Subtyp des Ausgangstyps sind. Man spricht entsprechend von Up cast , Down cast
oder Cross cast . Up casts sind immer typsicher, Down casts und Cross casts nicht. Down
casts sind relativ häufig; sie kommen vor allem dort vor, wo kein parametrischer Polymor-
phismus ( Kapitel 29) zur Verfügung steht oder wo ein Objekt seinem tatsächlic hen Typ ent-
sprechend behandelt werden soll . Cross casts sind eher selten; in der interfacebasierten
Programmierung (s. Abschnitt 28.2) stehen sie für einen Rollenwechsel eines Objekts .
Nun sind Typumwandlungen entweder überflüssig oder unsicher. Man
sollte daher versuchen, auf sie zu verzichten. Wo unverzichtbar, sollten
Typumwandlungen mit einem Typtest abgesichert werden. Dabei wird zur Laufzeit geprüft,
ob das Objekt, für das der typgewandelte Ausdruck steht, auch den gewünschten Typ hat.
Ist das nicht der Fall, sollten die Teile des Programms, die den bei der Typumwandlung ge-
nannten Typ voraussetzen, nicht ausgeführt werden. Sie werden in späteren Kapiteln zu
den einzelnen Programmiersprachen noch Beispiele für diese Praxis zu sehen bekommen.

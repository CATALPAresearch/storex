9.1 Generalisierung
Nun entspricht, wie eingangs (in Abschnitt 7.1) erwähnt, die Klassifikation sprachlich der
Ist-ein-Abstraktionsbeziehung zwischen Individuen und ihren Klassen: „Peter ist ein
Mensch“, „ SMALLTALK ist eine Programmiersprache“ usw. sind alles Beispiele für eine Art
der Abstr aktion, bei der man von einem Individuum zu seinem Allgemeinbegriff übergeht.
Es gibt aber noch eine zweite Form der Ist -ein-Abstraktion, die sich von der ersten funda-
mental unterscheidet, die aber ebenfalls eine charakteristische Rolle in der objektorient ier-
ten Programmierung spielt: die Generalisierung . Sprachlich offenbart sich diese in Sätzen
wie „ein Mensch ist ein Säugetier“, „ein Säugetier ist ein Lebewesen“ oder „eine Program-
miersprache ist ein Werkzeug“. Der Unterschied zur ersten Form der Abstraktion liegt dabei
offensichtlich darin, dass hier zwei Allgemeinbegriffe und nicht ein Individuum und ein All-
gemeinbegriff miteinander ins Verhältnis gesetzt werden. Ein weiter er, etwas subtilerer,
aber sehr wesentlicher Unterschied ist der, dass die Klassifikation nicht transitiv ist, die Ge-
neralisierung hingegen schon. So folgt aus „ein Mensch ist ein Säugetier“ und „ein Säuge-
tier ist ein Lebewesen“ wohl „ein Mensch ist ein Le bewesen“, aber aus „Peter ist ein
Mensch“ und „Mensch ist eine Art“ nicht „Peter ist eine Art“.
Selbsttestaufgabe 9.1
Ordnen Sie der nachfolgenden Sequenz von Ist -ein-Sätzen die jeweilige Form der Abstraktion zu:
1. Clyde ist ein Elefant.
2. Elefant ist ein Säugetier.
3. Säugetier ist ein Wirbeltier.
4. Wirbeltier ist ein Stamm.
5. Stamm ist ein Taxon.
6. Elefant ist eine Spezies.
7. Spezies ist ein Taxon.
Bilden Sie alle daraus ableitbaren Ist -ein-Sätze und bestimmen Sie die längste Ableitung.
Beim Vorgang der Generalisierung werden mehrere Klassen, deren Defi-
nitionen inhaltlich verwandt sind, zusammen gefasst , wobei das Ergebnis
der Generalisierung , ebenfalls Generalisieru ng genannt, eine Klasse ist,
die nur diejenigen Elemente der Definitionen der generalisierten Klassen enthält, die allen
gemeinsam sind. So lässt sich beispielsweise aus den beiden ähnlichen, aber nicht gleichen
Klassen Mensch
Klasse Mensch
benannte Instanzvariablen linkesBein rechtesBein aufenthaltsort verstand
indizierte Instanzvariablen nein
Instanzmethoden
und Vogel
Klasse Vogel
benannte Instanzvariablen linkesBein rechtesBein aufenthaltsort flügel
indizierte Instanzvariablen nein
Instanzmethoden
per Vorgang Generalisierung die Klasse Zweibeiner
Klasse Zweibeiner
benannte Instanzvariablen linkesBein rechtesBein aufenthaltsort
indizierte Instanzvariablen nein Vorgang und
Instanzmethoden
herausfaktorisieren, deren Definition, als Ergebnis der Generalisierung der Klassen Mensch
und Vogel , genau die gemeinsamen Eigenschaften (Instanzvariablen und Methoden) ent-
hält.
Da die Eigenschaften, die einer Generalisierung als Klasse zugeordnet
sind, per Definition automatisch auch für alle Klassen, von denen die Ge-
neralisierung abstrahiert, gelten (denn das war ja die Bedingung für die Konstruktion der
Generalisierung), brauch en diese die Eigenschaften nicht zu wiederholen, sondern stattdes-
sen nur noch ihre Generalisierung anzugeben. Diese Klassen müssen dann nur noch die
Unterschiede, die sie von Zweibeiner sowie von einander unterscheiden, definieren:
Klasse Mensch
Generali sierung Zweibeiner
benannte Instanzvariablen verstand
indizierte Instanzvariablen nein
Instanzmethoden
bzw.
Klasse Vogel
Generalisierung Zweibeiner
benannte Instanzvariablen flügel
indizierte Instanzvariablen nein
Instanzmethoden
Diese zweite Form der Abstraktion, die Generalisierung, ist also genau wie die Klassifikation
Bestandteil der klassenbasierten objektorientierten Programmierung. Anders als bei der
Klassifikation ist bei der Generalisierung aber die Höhe der Abstraktionshi erarchie nicht
durch praktische Überlegungen beschränkt, sondern kann von der Programmiererin nach
Belieben angelegt werden. Sprachphilosophisch sind Generalisierungen näm lich genau wie
Klassen Allgemeinbegriffe ; sie sind nur noch allgemeiner. Generalisierungen können somit
selbst Generalisierungen haben un d so weiter; wie sich das für eine Abstraktionshierarchie
gehört, werden die Definitionen, die Intensionen , dabei immer knapper. Gleichzeitig wä chst Ökonomie der
jedoch die Extension (das bereits in Abschnitt 7.1 erwähnte Prinzip vom inversen Zusam-
menhang der beiden).
Abgeschaut ist das Prinzip der Generalisierung übrigens von Aristoteles ’
Prinzip von Genus et differentia , der gemeinsamen Abstammung und den
Unterschieden: Das Genus ist die nächst allgemeinere K ategorie, unter die die Objekte der
zu generalisierenden Klassen (der Spezies) a uch fallen, und die Differentia sind die Kriterien,
nach denen sich die Objekte aufgrund ihrer Natur, wie sie in den verschiedenen Klassende-
finitionen festgelegt (und nicht etwa durch spezielle Werte von Instanzvariablen bestimmt)
ist, unterscheiden. So haben eben die Klassen Mensch und Vogel das gemeinsame Genus
Zweibeiner als (biologisch nic ht ganz korrekte) Generalisierung: In ihr ist festgelegt, dass alle
Exemplare von Zweibeinern (und damit auch von Menschen und Vögeln) ein linkes und ein
rechtes Bein sowie einen Aufenthaltsort haben . Die Unterschiede (Differentia ) sind dann in
den jeweili gen Klassen herausgearbeitet. Man beachte, dass Genera keine eigenen Indivi-
duen haben, also keine Individuen, die nicht Individuen einer ihrer Spezies wären. So gibt
es keine Zweibeiner, die nicht entweder Mensch oder Vogel wäre n.35
Genau wie die Klassifikation hat das Ordnungsprinzip der Generalisierung
eine einfache mengentheoretische Interpretation. Demnach enthält die
Menge der Instanzen einer Generalisierung alle Instanzen der Klassen, von denen sie eine
Generalisierung ist. Wenn also Mensch und Vogel Ausgangsklassen einer Generalisierung
Zweibeiner sind, dann ist die Menge der Instanzen, die Zweibeiner repräsentiert (für
die Zweibeiner den Allgemeinbegriff abgibt) eine Obermenge der Vereinigung der Menge
der Instanzen von Mensch und Vogel . Die Menge der Instanzen von Zweibeiner ist eine
echte Obermenge, wenn Zweibeiner auch noch eigene Instanzen hat (also Instanzen, die
nicht Instanzen von Mensch und Vogel sind; im Kontext der Instanziierung würde man von
direkten Instanzen sprechen; s. Abschnitt 7.3); sonst ist sie nur eine unechte Obermenge
(also genau gleich der Vereinigung). Die nachfolgende Grafik zeigt den Zusammenhang
(wobei die schwarzen Punkte die Instanzen und die Ellipsen die Klassen darstellen sollen).
Gute Praxis (und hier angedeutet) ist, wenn Generalisierungen keine eigenen, direkten In-
stanzen haben, also Genera im obigen Sinne sind. Dies ist in der objektorientierten Praxis
aber (leider) längst nicht immer selbstverständlich, wie sich im nächsten Kapitel noch zeigen
wird (vgl. dazu auch Kapitel 69 in Kurseinheit 7).
Universum
Zweibeiner
Mensch Vogel
Die mengentheoretische Interpretation von Generalisierung als Obermengenbildung legt
nahe, dass Instanzen von Mensch und Vogel (als Elemente der entsprechenden Extensio-
nen) auch Instanzen von Zweibeiner sind. Wenn man das so sehen will, dann sollte man
aber zur notwendigen Unterscheidung von indirekten Instanzen (anstelle von direkten
Instanzen ; s. Abschnitt 7.3) sprechen.
Bei der Generalisierung können also Eigenschaften, die verschiedene,
aber ähnliche Klassen unterscheiden, weggelassen („wegabstrahiert“)
werden. Das Weglassen ist aber nicht die einzig mögliche Form der Ge-
neralisierung: Es können auch Eigenschafte n generalisiert werden, wobei dann der Begriff
der Generalisierung rekursiv zur Anwendung kommt. Dabei versteht man unter der Gene-
ralisierung von Attributen (oder allgemeiner von Instanzvariablen; s. Abschnitt 2.4), dass ihr
Wertebereich von einem spezielleren (kleineren) zu einem allgemeineren (größeren) aufge-
weitet wird. So würde beispielsweise das Attribut aufenthaltsort , das mit (Instanzen
der) Klasse Mensch assoziiert ist, beim Übergang zur Generalisierung Zweibeiner von
Punkten auf der Erdoberfläche zu Punkten einschließlich des Luftraums darüber generali-
siert, so dass es auch den Wertebereich für Vögel abdeckt. In SMALLTALK gibt es aber keine
Möglichkeit, Attributen per Deklaration Wertebereiche zuzuordnen; wie Sie noch sehen
werden, erlauben zudem aus gutem Grund die wenigsten Programmiersprachen, die die
Möglichkeit der Wertebeschränkung von Variablen vorsehen, Attributwertebereiche bei der
Generalisierun g ebenfalls zu generalisieren (die sog. kovariante Redefinition ; s. dazu auch
die Kapitel 25 und Abschnitt 26.3 in Kurseinheit 3).
Auch wenn bislang so getan wurde, also sei die Generalisierung etwas in
der Natur des betrachteten Gegenstandes liegendes, so gibt es in der Pra-
xis jedoch oftmals verschiedene Gesichtspunkte, nach denen man Gene-
ralisierungen durchführen kann. So ist z. B. die Generalisierung von Vogel bzw. Mensch
zu Zweibeiner nicht die einzig mögliche (und sicher nicht die einzig sinnvolle). Es könnte
also durchaus sein, dass man mehrere, voneinander unabhängige Generalisierungshierar-
chien konstruieren möchte, in denen durchaus dieselben Klassen auftauchen. In der Praxis
verliert man dadurch jedoch die strikte Hierarchieform der Generalisierung (da sich mehrere
Hierarchien überlagern), es sei denn, man erlaubt, verschiedene Arten der Genera lisierung
voneinander zu unterscheiden. Beides bringt jedoch einiges an Komplikationen mit sich, so
dass wir hier auf „Mehrfachgeneralisierungen“ nicht eingehen werden. Generalisierung ohne

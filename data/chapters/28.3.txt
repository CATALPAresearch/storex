28.3 Gründe für die Trennung von Typen und Klassen
Nun mögen S ie sich vielleicht fragen, warum Typen und Klassen über so viele Seiten als
getrennte Begriffe dargestellt wurden, nur um am Ende zum Schluss zu kommen, dass eine
Klassendefinition in der Regel auch als Typdefinition herhält. Nun, erstens ist das nicht in
allen Sprachen der Fall und zweitens ist es selbst in den Sprachen, in denen es der Fall zu
sein scheint, nicht immer so (s. Fußnote 54). So handelt es sich eher u m die Symbiose zweier
verschiedener Konzepte, die unterschiedlichen Zwecken dienen, deren strukturelle Ähnlich-
keit sich aber durch eine syntaktische Zusammenlegung ausnutzen lässt:
1. Klassen dienen der Angabe von Implementierungen und damit als Container von
ausführbarem Code;
2. Typen dienen der Formulierung von Invarianten, die für Variablenbelegungen gelten
müssen und deren Verletzung auf einen (logischen oder semantischen) Program-
mierfehler hinweist. absolute
Schnittstellen als
Typen
Wahrung des
Implementations ge-
heim nisses
Da beide im wesentlichen über die gleichen Elemente verfüg en, lässt sich die Definition
beider in einem Sprachkonstrukt zusammenfassen.
Der Unterschied der beiden Konzepte Klasse und Typ manifestiert sich
auch darin, welche Rolle sie zur Laufzeit eines Programms spielen: Typin-
formation beeinflusst die Ausführung eines laufenden Programms insofern, als sie ein Pro-
gramm bei Verletzung einer Invariante abbrechen lässt (durch einen dynamischen Typtest)
und damit einem anderen, schwieriger zuordenbaren Fehler zuvorkommt. Klasseninforma-
tion beeinflusst die Ausführung des laufenden Programms insofern, als sie Grundlage des
dynamischen Bindens ist und in einem Programm als Eigenschaft von Objekten abgefragt
werden kann. In Sprachen, in denen jede Klasse einen Typ definiert, ist diese Unterschei-
dung jedoch nicht immer klar getroffen und wird deswegen von Programmiererinnen auch
nicht unbedingt wahrgenommen.

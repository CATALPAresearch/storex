13.2.1 Dictionaries
Dictionaries repräsentieren sog. qualifizierte Beziehungen, das sind solche, bei denen jedes
Element der Beziehung durch einen Qualifizierer eindeutig bestimmt wird. Der Qualifizierer
heißt auch Schlüssel (engl. key; vergleichbar mit dem Primärschlüssel relationaler Datenban-
ken), das qualifizierte Element der Beziehung nennt man auch Wert (engl. value ). Ein Ele-
ment einer qualifizierten Beziehung besteht also gewissermaßen aus einer Assoziation eines
Schlüssels mit einem Wert. Der Clou an der Implementierung von Diction aries ist, dass man
Werte unter ihren Schlüsseln extrem schnell (im Idealfall ohne jede Suche) auffinden kann.
Das wird heute fast immer über sog. Hashing erreicht. Weitere nützliche
Methoden zum
Pflegen von : n-
Beziehungen
Die Klasse Dictionary hat für die Programmi erung besondere Bedeu-
tung: Sie realisiert sog. Assoziativspeicher, also Speicher, bei dem auf eine
Speicherzelle nicht durch Angabe einer Speicheradresse, sondern durch
Assoziation mit dem Inhalt zugegriffen wird. Sie wird im SMALLTALK -System selbst häufig
verwendet. So werden z. B. Methoden in Dictionaries hinterlegt (wobei der Nachrichten-
selektor die Rolle des Schlüssels spielt und als Wertobjekt die kompilierte Methode gespei-
chert ist). Aber auch andere Arten von Collections lassen sich mit Hilfe von Dictionaries sehr
einfach realisieren: So kann man die Klasse Bag beispielsweise wie folgt implementieren:
Klasse  Bag
Superklasse Collection
Klassenmethoden
513 new
514  ^ self basicNew initialize
benannte Instanzvariablen  elements
indizierte Instanzvariablen  nein
Instanzmethoden
515 initialize
516  elements := Dictionary new
517 add: anObject
518   elements
519     at: anObject
520     put: (self occurrencesOf: anObject) + 1.
521   ^ anObject
522 occurencesOf: anObject
523   ^ elements at: anObject ifAbsent: 0
524 …
Dabei wird einfach die Anzahl der Vorkommen eines Elements (repräsentiert durch den for-
malen Parameter anObject ) der Bag, solange diese nicht Null ist, in einem Dictionary unter
dem Element als Schlüssel gespeichert.
Man beachte hierbei, dass Bag die Klasse Dictionary nutzt, ohne von
ihr zu erben. Stattdessen hält sich jede Instanz von Bag eine Instanz von Dictionary als
Sklavin, die für sie den Dienst verrichtet. Man spricht hier auch von einer Delegation44; da
44 Tatsächlich würde manche es lieber sehen, wenn man hier von Forwarding und nicht von Dele-
gation sprechen würde. Die Delegation übernimmt nämlich in den prototypenbasierten objektorien-
tierten Programmiersprachen tatsächlich die Funktion der Vererbung, wobei insbesondere die Pseu-
dovariable self in den delegierten Methoden die gleiche Bedeutung wie bei einer geerbten Me-Klasse Dictionary
realisiert
Assoziativspeicher
Delegati on
die Delegation auf Instanzebene stattfindet und zudem dynamisch (also nachdem eine In-
stanz erzeugt wurde) eingerichtet werden kann und da sie zudem von Fragen der Genera-
lisierung/Spezia lisierung völlig befreit ist, erfreut sie sich in der objektorientierten Program-
mierung großer Beliebtheit.
Je länger Sie in SMALLTALK programmieren, desto häufiger werden Sie
feststellen, dass Sie durch Verwendun g eines Dictionaries Ihren Code
deutlich vereinfachen können. Tatsächlich erlauben es Dictionaries (bzw.
der von ihnen realisierte Assoziativspeicher ), Assoziationsketten, die Grundlage vieler
menschlicher Denkprozesse sind, direkt in einem Programm nachzubilden. Fragen Sie sich
also, wann immer Sie es mit einer Menge von Objekten zu tun haben, wie Sie auf die Ele-
mente der Menge zugreifen wollen; wenn dies über einen Schlüssel erfolgt, dann ist
Dictionary die Klasse Ihrer Wahl.
Es darf übrigens der Schlüssel eines in einem Dictionary gespeicherten
Objekts ruhig ein Attribut (der Inhalt einer Instanzvariable) des Objekts sein; dies kommt
sogar recht häufig vor. Beispielsweise wird man Personen in einem Dictionary unter ihrem
Nachnamen oder einer Ausweisnummer speichern. Allerdings sollte dieses Attribut dann
unveränderlich sein, da das Objekt nach einer Änderung des Attributs immer noch un ter
dem alten Attributwert als Schlüssel gespeichert ist und nur unter diesem wiedergefunden
wird.

Kurseinheit 2: Systematik der objektorientierten
Programmierung
In der vorangegangenen Kurseinheit haben Sie die Grun dkonzepte der objektorientierten
Programmierung mit SMALLTALK kennengelernt. Neben den Objekten selbst zählen dazu vor
allem die Beziehungen zwischen diesen (durch Instanzvariablen ausgedrückt), der davon
abgeleitete Zustand von Objekten sowie das in Form von Methoden definierte Verhalten.
Was bislang verschwiegen wurde, ist, wie Objekte, für die es keine literale Repräsentation
gibt, entstehen und wie ihnen ihre Instanzvariablen und ihre Methoden zugeordnet werden.
Wie das zu geschehen hat, ist mit dem Begriff der objektorientierten Pro-
grammierung nicht grundsätzlich festgelegt . Eine gewisse Anerkennung
und Verbreitung erfahren haben aber drei verschiedene Ansätze:
1. der Konstruktoransatz, bei dem der Aufbau eines Objekts in e iner Methode be-
schrieben wird, in der dem Objekt bei seiner Erzeugung Instanzvariablen und Me-
thoden zugeordnet werden; verschiedene Konstruktoren erzeugen dann verschie-
den aufgebaute Objekte;
2. der Prototypenansatz, bei dem ein schon existierendes Objekt sam t seiner Instanzva-
riablen und Methoden geklont wird; ein Klon kann bei Bedarf um weitere Instanzva-
riablen und Methoden ergänzt werden oder geklonte können abgeändert oder ent-
fernt werden; und
3. der Klassenansatz, bei dem alle Objekte als Instanzen von bestimmten Vorlagen, die
entweder selbst keine Objekte oder Objekte auf einer anderen Ebene sind, erzeugt
werden.
Den Konstruktoransatz findet man in Sprachen wi e EMERALD , den Prototypenansatz in Spra-
chen wie SELF oder JAVASCRIPT und den Klassenansatz in Sprachen wie SMALLTALK , C++, EIF-
FEL, JAVA, C#, SCALA und vielen anderen mehr .
Aus verschiedenen Gründen hat s ich die dritte Variante, die klassenbasierte Form der
Objektorientierung (wobei die Klassen die erwähnten Vorlagen sind) gegenüber der zwei-
ten, der prototypenbasierten Form der Objektorientierung weitgehend durchgesetzt.
Die erste Variante findet im Zuge einer gewi ssen Ernüchterung bzgl. der objektorientierten
Programmierung zunehmend Anhänger, und zwar da, wo Objekte und dynamisches Binden
(s. Abschnitt 12) im Kontext traditioneller imperativer Programmierung angeboten werden
sollen. Sie liegt damit aber außerhalb des Gegenstands dieses Kurstextes. Alternativen der
Die Dominanz der klassenbasierten Form der objektorientierten Program-
mierung liegt vermutlich zum einen daran, dass Klassen ein klassisches,
in anderen Disziplinen wie der Mathematik oder der Biologie fest etab-
liertes Ordnungskonzept darstellen, mit dessen Hilfe sich auch objektori-
entierte Programme gut strukturieren lassen, und zum anderen daran, dass Klassen sich als
(Vorlagen für) Typen eignen und somit die objektorientierte Programmierung Eigenschaften
anderer, nicht objektorientierter, dafür aber typisierter Sprachen (also Sprachen, bei denen
alle Variablen und Funktionen bei der Deklaration einen Typ zugeordnet bekommen und
der Variableninhalt immer vom deklarierten Typ sein muss ) übernehmen kann (der Gegen-
stand von Kurseinheit 3). Die prototypenbasierte Form der Objektorientierung hat hingegen
den Charme, dass sie mit weniger Konzepten auskommt und dass sie sehr viel flexibler ein-
zelne Objekte an ihren jeweiligen Zweck anpassen kann, z. B. indem sie eine Methodende-
finition nur für ein einziges Objekt abzuändern erlaubt. Letzteres ist z. B. bei der Program-
mierung von grafischen Bedienoberflächen, bei der das Drücken verschiedener Butt ons je-
weils verschiedene Ereignisse auslöst (Methoden aufruft), sehr praktisch. Nicht umsonst ist
JAVASCRIPT als Programmiersprache für interaktive Webseiten so erfolgreich.
Auch wenn es gute Gründe für die prototypenbasierte Form der objektorientierten Pr ogram-
mierung gibt (und sich deswegen jedes Werk zum Thema objektorientierte Programmierung
— so wie auch das Ihnen vorliegende — gemüßigt fühlt, darauf hinzuweisen, dass es sie
gibt), werden ich mich im folgenden vornehmlich Klassen als strukturbildenden K onzepten
der objektorientierten Programmierung zuwenden und nur hier und da Prototypen kurz die
Referenz erweisen.28

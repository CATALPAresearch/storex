62.2.2 Grammatikalisch -inhaltliche (semantische) Namenskonventionen
Überaus angemessen, wenn auch nicht immer in letzter Konsequenz ein-
zuhalten, ist, die verschiedenen Wortarten einer natürlichen Sprache für v erschiedene Arten
von Programmelementen zu verwenden. So legt beispielsweise der in Kurseinheit 1, Kapitel
7 beschriebene Zusammenhang zwischen Klassen und Allgemeinbegriffen nahe, dass man
für Klassennamen Substantive verwendet. Tatsächlich ist es eine vielzitierte objektorientierte
Technik, in der Analysephase eines Projekts alle Substantive der Spezifikation zu extrahieren,
um auf der Basis der so gewonnenen Liste die Menge der Klasse n eines Systems zu identi-
fizieren.
Methoden, die eine Aktion implementieren ( Befehle in EIFFEL, s. Kursein-
heit 5, Abschnitt 52.2), wird man aufgrund ihres prädikativen Charakters mit Verben be-
nennen, wobei es eine Stilfrage ist, ob ma n die Infinitiv - oder die Imperativform (im Engli-
schen übrigens kein Unterschied in der Erscheinungsform) bevorzugt. Persönlich fühle ich
mich hier an keine Regel gebunden außer an die, dass Ausdrücke durch meine Namenwahl
möglichst lesbar werden. So kling t
Klassen
Methoden
1628 problem loesen
(Infinitivform) in meinen Ohren besser als
1629 problem loese
(Imperativform),
1630 ausgabegeraet drucke: einenString
(Imperativform) klingt dagegen besser als
1631 ausgabegeraet drucken: einenString
(Infinitivform). Man könnte natürlich der imperativen Form ein Reflexivpronomen hinzufü-
gen wie etwa in
1632 problem loeseDich
aber das ist eher unüblich (obwohl nicht ohne Charme!). Verbergänzungen wie Präpositio-
nen verwendet man in SMALLTALK dauernd (schon um mehrere Parameter voneinander ab-
zusetzen); in Sprachen wie JAVA fügt man einem allgemeinen (und häufig überladenen)
Verb dann gelegentlich noch ein Substantiv als Objekt des Prädikats hinzu, wie in
1633 vector.addElement(anElement);
Gerade dieses Beispiel ist jedoch nicht unumstritten, da „Element“ hier gewisserma ßen re-
dundant ist — wenn es mehrere Methoden namens „add“ gibt, kann man sie auch mittels
ihrer Parametertypen unterscheiden (also überladen ). So heißt die entsprechende Me thode
im JDK heute auch nur noch add(.) .
Keine Verben, sondern Adjektive (oder Kopula plus Prädikatsnomen) verwendet man hin-
gegen für Methoden, die eine Abfrage darstellen (Queries; s. Abschnitt 52.2), wie etwa
1634 stapel voll
bzw.
1635 stapel istVoll
oder
1636 menge hatElement: einElement
Für Instanzvariablen verwendet man unterschiedliche Wortarten, und
zwar abhängig davon, ob eine Instanzvariable ein Attribut oder eine Beziehung repräsen-
tiert. Wenn es sich um ein Attribut handelt, das eine mehrwertige Qualität ausdrückt (wie
Größe, Farbe etc.), dann wird man den Namen der Qualität verwenden und damit ein Sub-
stantiv ( ggf. in Kleinschreibung). Wenn es sich um ei n zweiwertiges (Boolesches) Attribut Instanzvariablen
handelt, dann nimmt man das entsprechende Adjektiv (wie etwa leer ), ein Gerundivum
(z. B. laufend ) oder ein Partizip (wie etwa geloest ). Für Instanzvariablen, die Beziehun-
gen ausdrücken, nimmt man gerne den Namen der Ge genrolle, also beispielsweise mutter
in einer Kind -Mutter -Beziehung. Bei : n-Beziehungen nehme ich persönlich gern den Plural,
also z. B. kinder (statt kind ) für die umgekehrte Richtung.
Interfaces sind zwar wie Klassen Typen, aber bezeichnen keine Allgemein-
begriffe, sondern eher Rollen , die die Objekte, die konkrete Ausprägun gen der Allgemein-
begriffe sind, spielen können. Rollen werden aber, genau wie Allgemeinbegriffe, häufig
durch Substantive bezeichnet: „ Mutter “ ist ein Beispiel hierfür. Andere Rollen, insbesondere
die, die mit Parametern von Methoden verbunden sind, werden häufig durch Adjektive be-
zeichnet: Druckbar beispielsweise könnte der Parametertyp einer Methode drucken sein,
den das zu druckende Objekt h aben muss . Tatsächlich enden viele der gebräuchlichen In-
terfacenamen im Englischen auf „able“ oder „ible“, so z. B. bei Serializable .
Eine ganz interessante Option ergibt sich übrigens für Programmiererin-
nen, deren Muttersprache nicht Englisch ist: Man hat hier die Möglich-
keit, bei der Wahl der Bezeichner zwischen zwei Sprachen zu wählen und damit eine zu-
sätzliche Form der Differenzierung einzuset zen. Ich persönlich verwende dann gerne für
Begrifflichkeiten aus der Anwendungsdomäne (also dem Gegenstandsbereich, mit dem sich
das Programm befasst ) deutsche Bezeichner und für solche aus der technischen Umsetzung
(Hilfsklassen etc.) englische. Alternat iv kann man natürlich auch alle selbst beigesteuerten
Programmelemente auf Deutsch benennen, um sie von den aus Bibliotheken und Frame-
works zusammengeklaubten zu unterscheiden.

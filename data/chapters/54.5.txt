54.5 Relativität der Substituierbarkeit
Nun kann man argumentieren, dass Substituierbarkeit im Einzelfall von der jeweiligen Ver-
wendung der Typen abhängt (vgl. Fußnote 86). So kann man im Beispiel von Set und Bag
gar nicht sagen, dass grundsätzlich das eine nicht das andere substituieren kann, denn es
kann durchaus Verwendungen des einen oder anderen Typen geben, in denen der jeweils
andere durchaus als Ersatz infrage kommt. Das Vorliegen einer echten Substituierbarkeit ist
also nicht auf Basis der beteiligten Typen allein entscheidbar, sondern hängt auch von deren
Verwendung ab. Das wiederum bedeutet (auch vor dem Hintergrund des oben gesagten
zur funktionalen Äquivalenz), dass es so etwas wie eine absolute (d. h., von jeder möglichen
Verwendung losgelöste) Substituierbarkeit eigentlich nicht gibt.
Wie kann man diesem Umstand abhelfen? Nun, indem man neben der
Sicht der Programmiererin , die die Typen liefert und die sich um deren Substituierbarkeit
(und die davon abhängige Subtypenbeziehung) sorgt, auch noch die Sicht der Programmie-
rerin, die die Typen zu einem konkreten Zweck einsetzen will, einbezieht. Nur diese Pro-
grammiererin weiß nämlich, was sie sich genau von einem Typen (genauer: von den Objek-
ten eines Typs) erwartet, und nur diese kann beurteilen, welche Typen zu ihrem Zweck ge-
geneinander austauschbar sind.
Wie aber drückt die Programmiererin ihre Erwartung aus? Die Antwort ist
verblüffend einfach: Indem sie selbst einen Typ definiert, dessen Definition die — und eb en
nur die — Eigenschaften umfasst , die sie verlangt. Ein Typ, der genau diese Erwartung und
nicht mehr ausdrückt, spezifiziert gewissermaßen eine Rolle, die die Objekte im Kontext der
Verwendung zu spielen haben. In der Regel wird dieser Typ nur einen Teil der Eigenschaften
umfassen, die allgemeine Typen wie Set oder Bag spezifizieren; im Gegenzug ist damit
aber auch die Auswahl der Typen, deren Objekte für ihre Zwecke infrage kommen, größer. LSP ist zu restriktiv
Perspektivwechsel
Typen als Rollen
Die einzige Voraussetzung dafür, dass Objekte die ihnen durch ihren Typ aus Klientinnen-
sicht zugewiesene Rolle auch spielen können, ist, dass sie dazu typkonform sind.
Diese zweiseitige Sicht auf Typen, nämlich die der Nutzerin und die der Anbieterin , beginnt
sich erst langsam durchzusetzen. Die Programmiersprache JAVA und in der Folge auch C#
bieten immerhin ein Interface -als-Typ-Konzept (s. Kapitel 40 in Kurseinheit 4und Abschnitt
50.4.2 in Kurseinheit 5) an, mit dem es möglich ist, in einem Programm partielle Sichten auf
Typen zu spezifizieren. Allerdings wird in der Programmierpraxis die Möglichkeit dieser bei-
den Sprachen kaum dazu genutzt, Benutzerinnen ihre eigenen Anforderungen als Typen
definieren zu lassen. Vielleicht handhaben Sie es ja zukünftig anders.

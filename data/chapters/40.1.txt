40.1 Interfaces als Schnittstellen
Die öffentliche Schnittstelle einer Klasse in JAVA ist die Menge ihrer Instanzvariablen
und -methoden (in JAVA zusammen auch Member genannt ), die public deklariert sind.
Nun gibt es in JAVA die Möglichkeit, eine öffentliche Schnittstelle als eigenständiges Kon-
strukt zu de klarieren, das von dem der Klasse unabhängig ist, das aber genauso wie eine
Klasse einen Typ definiert. Es geschieht dies mit Hilfe des Schlüsselwortes interface :
Anders als bei Klassen entspricht hier das Fehlen eines Zugriffsmodifikators der Zugreifbar-
keit public — alles andere scheint für eine Schnittstelle auch unsinnig. Folgende weitere
syntaktischen Unterschiede der Interfacedeklaration in den Zeilen 1029 –1032 zur Klas-
sendefinition der Zeilen 986–991 fallen auf:
 die Verwendung des Schlüsselwortes interface anstelle von class (klar),
 das Fehlen von Felddeklara tionen und
 der Umstand, dass der Methodendeklaration keine Implementierung mehr folgt,
sondern lediglich das abschließende Semikolon.
Das Schlüsselwort abstract , das eine Klasse für eine solche Methodendeklaration anfüh-
ren müsste , wird in Interfaces automa tisch angenommen; Interfaces liefern zunächst erwar-
tungsgemäß weder Implementierungen noch Objekte (Instanzen). Mit derselben Begrün-
dung kann auch das Fehlen von Feldern erklärt werden: Da bei Feldern nicht zwischen De-
klaration und Implementierung (Definition ; s. Kapitel 19 in Kurseinheit 3) unterschieden
werden kann (die Deklaration ist, da sie Namen und Typ vorgibt und mehr auch fü r eine
Implementierung nicht angegeben werden kann, zugleich Implementierung des Feldes),
wurden sie aus den Interfaces verbannt. Diese Einschränkung ist aber keine wirkliche, da
ein Feldzugriff in einem Interface durch Zugriffsmethoden (Accessoren, also durch Getter
und Setter) ersetzt werden kann.
Eine Klasse kann nun angeben, dass sie ein Interface implementiert. Sie
tut das unter Verwendung des Schlüsselwortes implements :
Damit verpflichtet sich die Klasse, alle im Interface angekündigten Methoden zu implemen-
tieren und öffentlich anzubieten.67 Dabei kann eine Klasse mehrere Interfaces gleichzeitig
implementieren (die entsprechenden Namen werden einfach, durch Kommata getrenn t,
überlassen; in diesem Fall muss die Methode aber zumindest als abstrakt deklariert werden. Interface -
aneinandergehängt); zugleich ist die Angabe der implementierten Interfaces eine nominale
Typkonformitätsdeklaration , d. h., Instanzen d er Klasse sind mit allen Variablen jedes der
genannten Interfaces zuweisungskompatibel.
Es definieren also die Interfaces von JAVA genau wie Klassen Typen und
können daher genauso wie Klassen in Variablendeklarationen verwendet
werden:
ist eine solche Deklaration. Der Type checker garantiert dann, dass auf der Variable mit
Namen „Variablenname“ nur die Methoden aufgerufen werden können, die im Interface
mit Namen „Interfacename“ deklarier t sind, selbst wenn das Objekt, das die Variable be-
nennt, mehr anbietet. S o ist es möglich, dass Methoden und Felder einer Instanz vor ande-
ren Instanzen anderer oder derselben Klasse verborgen werden können: Man deklariert ein-
fach die Variablen , die auf di e Instanz verweisen , mit dem Interface als Typ. Eine genauere
Betrachtung der Bedeutung der Verwendung von Interfaces erfolgt in Kapitel 45.
Es kann also eine Klasse in JAVA zwar nur direkte Subklasse genau einer
anderen Klasse sein, dafür aber mehrere Interfaces gleichzeitig implemen-
tieren. Diese mögliche „Mehrfachimplementierung“ von Interfaces wurde häufig als Ersatz
für d ie in JAVA fehlende Möglichkeit der Mehrfachvererbung angepriesen — das aber war
Unsinn, denn bei der Implementierung eines Interfaces wurde nichts vererbt (sieht man mal
von der sog. Interfacevererbung ab, die aber auch keine wirkliche Vererbung ist, denn auch
die Deklarationen werden nicht automatisch von einem Interface auf seine implementieren-
den Klassen übertragen, sondern müssen dort wiederholt werden ). Vielmehr hat man es mit
einer Art Mehrfach -Subtyping zu tun, das aber auch ganz nett ist, wie die Überlegungen in
Kapitel 45 zeigen werden.

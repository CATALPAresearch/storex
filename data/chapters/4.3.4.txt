4.3.4 Verbergen der Repräsentation des Zustands hinter Methoden
In SMALLTALK sind die Instanzvariablen eines Objekts nur für das Objekt selbst sichtbar (und
damit auch zugreifbar).23 Genauer sind seine Methoden die einzigen Stellen im ganzen
Programm, an denen auf die Instanzvariablen des Objekts , dem die Methoden zugeordnet
sind, direkt zugegriffen werden kann. Die Struktur des Objekts bleibt somit verborgen (das
Implementationsgeheimnis ) und sein Zustand wird gekapselt (s. Abschnitt 3.2 sowie unten
für ein praktisches Beispiel ).
Um die Belegung der Instanzvariablen und damit den Zustand eines Ob-
jektes auszulesen oder verändern zu können, sind also Methoden not-
wendig. Um beispielsweise den Wert einer Instanzvariable mit Namen a auszulesen, muss
das Objekt eine Methode vorsehen, die den Wert von a zurückgibt. Diese (parameterlose)
Methode wird in SMALLTALK üblicherweise wie folgt notiert:
Sie entspricht im wesentlichem einem auch in JAVA gebräuchlichen sog. Getter einer an-
sonsten nicht zugreifbaren Variable. Die Namensgleichheit von Methode und Variable soll
dabei nicht darüber hinwegtäuschen, dass es sich bei beiden um verschiedene Dinge han-
delt — Methode und Variable könnten genauso gut verschieden benannt werden.
Um den Wert von a zu setzen, definiert man üblicherweise die folgende, auch Setter ge-
nannte Methode:
Getter und Setter werden zusammen auch als Zugriffsmethoden (oder Accessoren ; engl.
accessor methods ) bezeichnet.
Die obigen Zugriffsmethoden werden aufgerufen, indem man dem Objekt, zu dem die In-
stanzvariable a gehört, die Nachricht a (zum Lesen) bzw. a: mit einem Objekt als Parameter
(zum Schreiben) schickt. Das Empfängerobjekt antwortet darauf im ersten Fall mit Rü ckgabe
von a und im zweiten Fall mit Rückgabe von sich selbst. Man beachte, dass bei der Rückgabe
keine Kopie, sondern der Inhalt der Variable (bzw. ein Verweis darauf) zurückgegeben wird.
Nach Auswertung des Ausdrucks
ansehen. Auf der anderen Seite schützt die mangelnde Sichtbarkeit von Instanzvariablen ja nicht vor
dem Zugriff auf Objekte, auf die sie verweisen (wegen des möglichen Aliasing ), so dass man sich an
dieser Stelle nicht versteigen sollte. Zugriffsmethoden,
verweisen also b und die Instanzvariable a von einObjekt (genauer: dem von einObjekt
bezeichneten Objekt) auf dasselbe Objekt, genauso wie nach Auswertung von
Bei beiden ist hinterher b ein Alias auf a, was de facto die Kapselung des Zustandes von
einObjekt durchbricht.
Es soll nochmals darauf hingewiesen werden, dass im ersten Ausdruck a eine Nachricht
darstellt und keinesfalls der Name der Instanzvariable des Objekts ist. Insbesondere handelt
es sich bei dem (Teil -)Ausdruck einObjekt a mitnichten um das Äqui valent zu dem aus
JAVA bekannten einObjekt.a , sondern vielmehr dem von einObjekt.getA() (wobei
man die Methode getA() in JAVA per Konvention natürlich genauso gut nur a() nennen
könnte). Ein direkter Zugriff auf die Instanzvariable von außen wie in JAVA ist in SMALLTALK
nicht möglich. Man kann also den Zugriff auf eine Instanzvariable verhindern, indem man
einfach keine Zugriffsmethoden dafür vorsieht; man kann ihn auf Nur-Lesen oder Nur-
Schreiben beschränken, indem man nur die jeweilige Zugriffsmethode zur Verfügung stellt.
Man beachte schließlich, dass anders al s benannte Instanzvariablen indi-
zierte Instanzvariablen auch von dem Objekt, zu dem sie gehören, nicht
direkt, sondern nur über die beiden vordefinierten Nachrichten at: und
at:put: gelesen und geschrieben werden können:
liefert den Wert de r Instanzvariable mit dem Index i,
setzt ihn. Es ist in SMALLTALK also nicht möglich, indizierte Instanzvariablen eines Objekts (im
Gegensatz zu benannten) durch Nicht -Deklaration von Zugriffsmethoden zu verbergen (vor
Zugriff zu schützen). Zugleich folgt aus der festen Vorgabe der beiden Zugriffsmethoden,
dass jedes Ob jekt nur genau eine (unbenannte) Menge von indizierten Instanzvariablen ha-
ben kann.
Die ausschließliche Abfrage und Änderung des Zustandes von Objekten
über Methoden hat den Vorteil, dass man sich n icht festlegt, wie man
den Zustand eines Objekts tatsächlich codiert. So kann man beispiels-
weise einem Punktobjekt Methoden zum Setzen und Abfragen sowohl
von kartesischen als auch von polaren Koordinaten zuordnen, muss aber nur Instanzvariab-
len für eine A rt von Koordinaten vorsehen und kann die anderen jeweils berechnen:
Man könnte die Koordinaten natürlich genauso gut in polarer Form spei-
chern und die kartesischen berechnen — für die Benutzerin dieser Ob-
jekte spielt das keine Rolle. Man betrachtet die Art und Weise, wie ein
Objekt seinen Zustand codiert, als sein Implementationsgeheimnis und die Menge der Me-
thodensignaturen, die den Zugriff auf das Objekt (seinen Zustand) erlauben (das Protokoll ),
als sein Interface . Mehr dazu in Abschnitt 4.3.8 .

35.1 Literale
In JAVA gibt es Literale für Zahlen, Zeichen und S trings. Für Arrays gibt es, da sie nicht aus
Literalen zusammengesetzt sein müssen, etwas ähnliches, nämlich die sog. Array -Initialisie-
rer; sie werden in Kapitel 41 behandelt. Ob true und false bzw. null in JAVA Literale Deployment
oder Schlüsselwörter sind, hängt vom Standpunkt ab: Die meisten Syntaxeditoren behan-
deln sie wie Schlüs selwörter, gemäß Sprachdefinition handelt es sich aber um Literale, die
die beiden Booleschen Wahrheitswerte „wahr“ und „falsch“ bzw. den Wert des Nulltypen
(UndefinedObject in SMALLTALK , in JAVA unbenannt) repräsentieren.
Zahlenliterale in JAVA können eine Vielzahl von Formen annehmen. Für
drei besondere Werte im Fließkommabereich stehen allerdings keine Literale, sondern nur
Konstanten zur Verfügung: Es sind dies NaN (für das englische Not a Number ) sowie
POSITIVE_INFINITY und NEGATIVE_INFINITY . Zeichenliterale werden in JAVA durch
einfache Anführungsstriche eingeschlossen, String -Literale durch doppelte. Beide können
Escape -Sequenzen zur Darstellung von Sonderzeichen enthalten.
Anders als in SMALLTALK sind in JAVA Klassen keine Objekte. Dennoch
muss man in Programmen gelegentlich Klassen als Werte angeben. Das geht dann nicht
(wie in SMALLTALK ) per Angabe des Klassennamens (der dort ja zugleich als Pseudovariable
definiert war), sondern mittels eines sog. Klassenliterals . Dies besteht aus dem Namen der
Klasse, gefolgt von .class , also beispielsweise
Der Typ eines solchen Klassenliterals ist Class<T> , also im obigen Beispiel
Class<Object> . Da in JAVA-Programmen Klassennamen auch direkt vorkommen dürfen,
so z. B. als Empfänger beim Aufruf von Klassenmethoden oder in Typtests wie instanceof
(s. Abschnitt 35.4), sind Klassenliterale eher selten anzutreffen (die ganze Unterscheidung
von Klassennamen und Klassenliteralen in JAVA ist m. E. alles andere als glücklich).

39.1 Klassen und Pakete als Module
Klassen haben in JAVA mehrere Fun ktionen: Neben der offensichtlichen, der Vorlage für die
Erzeugung von Objekten, liefern sie auch noch Typen eines Programms und dienen der
Modularisierung.
öffentliche und
private Teile eines
Moduls
Pakete hingegen dienen der Sammlung von Klassen und sind zugleich Namensräume für sie
(keine zwei K lassen innerhalb eines Pakets dürfen gleich heißen). Außerdem gelten für Klas-
sen innerhalb eine Pakets laxere gegenseitige Zugriffsbeschränkungen als für Klassen aus
verschiedenen Paketen. Zwar können Pakete hierarchisch organisiert sein, aber diese Orga-
nisation hat keine Bedeutung. Insbesondere erlauben Pakete keinen privilegierten Zugriff
auf Klassen ihrer Subpakete. Damit Klassen paketübergreifend aufeinander zugreifen kön-
nen, bedarf es expliziter Import -Deklarationen unter Nennung der jeweiligen Paketna men.
Die Zugreifbarkeit von Klassen oder Typen und den Elementen ihrer D e-
finition (den Membern) wird in JAVA durch sog. Zugriffsmodifikatoren
(engl. access modifiers ) eingeschränkt .64 Es sind dies private , protected , public sowie
das sog. Package local , für das es kein Schlüsselwort gibt und das in Klassen bei Fehlen eines
der drei anderen angenommen wird (bei Interfaces wird public angenommen) . Innerhalb
der Klasse selbst sind alle Elemente seiner Definition zugreifbar , innerhalb ihrer Subklassen
die, die public oder protected deklariert wurden, innerhalb der Klassen desselben Pa-
kets alle, die public , protected oder ohne Zugriffsmodifikator dek lariert wurden, und in
anderen Paketen nur noch die, die public deklariert wurden. Faktisch werden Typdefiniti-
onen somit relativ: Was ein Typ anbietet, hängt nicht nur vom Typ selbst ab, sondern auch
davon, wo er verwendet wird. Konzeptionell hat die mit e inem Typ gemeinsam deklarierte
Zugriffsbeschränkung jedoch nichts mit dem Typ zu tun, sondern ist vielmehr die Schnitt-
stellenspezifikation eines Moduls , wobei das Modul die Klasse ist.
Auf die Bedeutung von Klassen als Module gehen ich in Kapitel 59 von
Kurseinheit 6 noch genauer ein. Hier schauen wir uns noch kurz die kon-
kreten Auswirkungen der Zugreifbar keitsbeschränkungen an:
1012 package a;
1013 public class A {
1014 public int i;
1015 protected int j;
1016 int k;
1017 private int l;
1018 public int m() {…}
1019 protected int n() {…}
1020 int o() {…}
1021 private int p() {…}
1022 }
1023 package a;
1024 public class B {}
1025 package a.a;
1026 public class C {}
1027 package a.a;
64 Die Zugreifbarkeit in JAVA wird oft, und dabei irrtümlich, auch als Sichtbarkeit (visibility ) bezeich-
net. Sichtbarkeit bezieht sich in JAVA aber auf lexikalische Scopes; sie wird durch Hiding, Shadowing
und Obscuring eingeschränkt (und kann dann bisweilen über Qualifizierer wiederhergestellt werden). Zugriffs -
modifikatoren
Beispiel für Zugriffs -
modifikatoren und
deren Auswirkungen
1028 public class D extends A {}
Auf einer per A a deklarierten Variable sind abhängig davon, innerhalb welcher Klasse die
Deklaration steht, die folgenden Elemente zugreifbar (ergeben die folgenden Ausdrücke
keine Typfehler):
 in Klasse A selbst: alle
 in Klasse B: a.i, a.j, a.k, a.m() , a.n() und a.o()
 in Klasse C: a.i und a.m()
 in Klasse D: a.i, a.j, a.m() und a.n()
Die Verquickung von Typ und Zugriffsbeschränkung (Schnittstelle) ist
etabliert und kommt auch in anderen Sprachen vor (z. B. EIFFEL, C# und
C++). Sie hat den Vorteil der sprachlichen Knappheit (Typ - und Schnitt-
stellendeklaration in einem) und den Nachteil, dass die Zugriffbeschrän-
kungen nur sehr grob eingestellt werden können — insbesondere ist es nicht möglich, dass
sich zwei (inhaltlich eng zusammengehörende) Klassen gegenseitig einen freieren Zugriff
gestatten als allen anderen, es sei denn, man packt diese beiden in ein Paket.65 Außerdem
hat sie den Nachteil, dass zwei unterschiedliche Konzepte der Programmierung zusammen-
gewo rfen und dadurch von Programmiererinnen u. U. nicht mehr als unterschiedlich wahr-
genommen werden. JAVA-Compiler unterscheiden aber immerhin zwischen Typ fehlern und
Zugriffsfehlern (z. B. „is undefined “ vs. „ is not visible “ in ECLIPSE , wobei letzteres freilich „ is
not accessible “ hätte heißen müssen) .

1.8 Aliasing
Wenn Variablen keine Objekte enthalten, sondern lediglich auf sie verweisen, wenn sie also
Verweissemantik haben, ist es möglich, dass mehrere Variablen gleichzeitig dasselbe Objekt
benennen. Das nennt man Aliasing . Das Aliasing ist eines der wichtigsten Phänomene der
objektorientierten Programmierung; zugleich ist es leider nur wenig als solches bekannt.
Versuchen Sie trotzdem, es sich stets bewusst zu machen — es wird Sie vor manch böser
Überraschung bewahren.
Aliase , also weitere Namen für ein bereits benanntes Objekt, entstehen
immer bei der Zuweisung. Daz u ist es notwendig, dass die Variable auf
der linken Seite Verweissemantik hat. Da in SMALLTALK die Semantik von Variablen nicht mit
der Variablendeklaration (s. Kapitel 19) festgelegt wird, sondern von der Art eines Objekts
abhängt, ist nicht immer klar, bei welcher Zuweisung ein Alias entsteht. Dabei kann beides,
die fälschliche Annahme von Verweissemantik bei tatsächlicher Wertsemantik und die
8 Die Pseudovariablen true , false und nil benennen spezielle, unveränderliche Objekte, auf de-
ren Bedeutung wir noch ausführlich ein gehen werden. Bis dahin kann die Leserin davon ausgehen,
dass true und false für die Booleschen Werte „wahr“ und „falsch“ stehen und nil für ein spe-
zielles Objekt, das meistens „kein Objekt“ repräsentieren soll. Entstehung von
Aliasing
fälschliche Annahm e von Wertsemantik bei tatsächlicher Verweissemantik, zu erheblichen
(und schwer zu findenden) Programmierfehlern führen.
Nach den beiden Zuweisungen
25 x := #Smalltalk
26 y := #Smalltalk
hat das eine Objekt, das der Compiler für #Smalltalk erzeugt, zwei Namen, nämlich x
und y.
Das Aliasing ist zunächst erwünscht: Da jedes Objekt nur einmal im Spei-
cher hinterlegt werden muss , ermöglicht es die extrem effiziente Infor-
mationsverarbeitung (es ist weder ein Kopieren notw endig, wenn ein Objekt weitergereicht
werden soll, noch müssen die Änderungen an den verschiedenen Kopien zusammengeführt
werden, die notwendig sind, wenn die Kopien immer noch dasselbe logische Objekt be-
zeichnen sollen). Doch diese Effizienz hat ihren Pre is.
Dass die Veränderung des durch eine Variable bezeichneten Objekts zu-
gleich die Veränderung der durch all seine Aliase bezeichneten Objekte
(die ja alle dieselben sind) bewirkt, kann nämlich unerwünscht, ja ein Programmierfehler
sein. So könnte man beispielswei se bei den beiden Zuweisungen
27 petersNachname := 'Müller'
28 paulasNachname := petersNachname
lediglich bezwecken wollen, dass Peter und Paul a zunächst gleich heißen, z. B. weil sie Ge-
schwister sind. Bei einer späteren Promotion Paulas fügt sie die Zeichen $D, $r und $. in
den ihren Nachnamen repräsentierenden String ein, ändert also das entsprechende Objekt.
Man hat nun sicher nicht beabsichtigt, dass das auch petersNachname betrifft, aber wenn
die Änderung an einer weit entfernten Stelle im Programm erfolgt, ist die Identität der von
petersNachname und paulasNachname benannten Objekte nicht mehr offensichtlich.
Tatsächlich hat man es dann mit einem recht subtilen und schwer zu findenden Program-
mierfehler zu tun. Deswegen (und aufgrund etwas überzeugenderer Bei spiele, die zu ver-
wenden aber noch mehr Vorbereitung bedarf ) sind in einigen SMALLTALK -Systemen alle auf
Basis literaler Repräsentationen erzeugten Objekte als unveränderlich markiert (wenn Sie es
nicht schon, wie beispielsweise Zahlen, von Haus aus sind), so dass Programmierfehler dieser
Art vermieden werden. Sollte wie im obigen Beispiel eine Zuweisung mit Wertsemantik be-
nötigt werden, so schreibt man statt Zeile 28 in SMALLTALK einfach
29 paulasNachname := petersNachname copy
Dabei sorgt das hintangestellte copy dafür, dass von dem Objekt, das durch
petersNachname bezeichnet wird, eine Kopie angefertigt wird, also ein neues Objekt, das
dem alten gleicht (mehr zur Syntax und dazu, wofür copy steht, folgt unten). Nicht nötig
wird das Kopieren, wenn ich die Änderung durch die Zuweisung eines neuen Objekts be-
werkstellige, wie das beispielsweise in Beispiel
Effizienz durch
Aliasing
mögliche Probleme
durch Aliasing
30 paulasNachname := 'Dr. Müller'
oder gar
31 paulasNachname := 'Dr. ' , paulasNachname
der Fall ist (wobei das Komma hier für die String -Konkatenation steht) .
Fehler dieser Art sind häufig die Folge dessen, dass sich eine Programmiererin der aliasbil-
denden Wirkung der Zuweisung nicht bewusst war. Das ist insbesondere bei den Program-
miererinnen der Fall, die nicht mit der objektorientierten Programmierung großgeworden
sind, die insbesondere bei einer Zuweisung y := x das Kopieren des Inhalts der Variablen
auf der rechten Seite ( x) vermuten. Tatsächlich muss man in anderen Sprachen (wi e bei-
spielsweise PASCAL oder C) eine Variable explizit als Pointervariable deklarieren, um einen
Alias bilden zu können. In SMALLTALK , genau wie in JAVA und C#, ist Aliasing jedoch der
Regelfall und Kopie die Ausnahme. Wer das nicht verinnerlicht hat, schreibt höchstens zu-
fällig korrekte Programme.

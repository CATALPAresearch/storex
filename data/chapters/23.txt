23 Typerweiterung
Wie bereits in Kapitel 21 angedeutet, verlangt die Zuweisungskompatibilität nicht unbe-
dingt T ypäquivalenz. Tatsächlich reicht es ja, bei einer rein strukturellen (syntaktischen) Be-
trachtung, voll aus, dass der Typ der rechten Seite einer Zuweisung das Protokoll (die Menge
der Methoden) des Typs der linken Seite enthält, um in der Folge Typfehler z u vermeiden.
Anders ausgedrückt: Der Typ auf der rechten Seite einer Zuweisung darf eine Erweiterung
dessen auf der linken Seite um zusätzliche Methoden sein.
Die sog. Typerweiterung (engl. type extension ; extension hier im Sinne
von Erweiterung und nicht im Sinne der Ausdehnung als Gegenstück zur
Intension; vgl. Abschnitt 7.1 in Kurseinheit 2), wie sie z. B. in den Pro-
grammiersprachen MODULA -3 und OBERON (beides Nachfolger von PASCAL ) Verwendung fin-
det, sieht genau dies vor. Eine Typerweiterung des obigen Typs Büro um ein Länderkenn-
zeichen sieht dann beispielsweise wie folgt aus:
Typ InternationalesBür o
erweiterter Typ Büro
Protokoll
884 länderkennzeichen ^ <String>
885 länderkennzeichen: einLänderkennzeichen <String> ^ <Self>
Der erweiternde Typ, hier InternationalesBüro , wird also relativ zu einem bereits be-
stehenden, dem erweiterten Typ (hier Büro ), definiert. Die Methodendeklarationen des er-
weiterten Typs werden dabei gewissermaßen an den erweiternden Typ vererbt ; dieser
braucht sie also nicht noch einmal zu wiederholen.
Wie man nun leicht einsieht, können Variablen, deren deklarierter Typ
Büro ist, auch Objekte vom Typ InternationalesBüro enthalten,
ohne dass dies zu Typfehlern führt, da alle Method en, die für Büro vor-
gesehen sind, auch in InternationalesBüro vorkommen.50 Das Umgekehrte ist jedoch
nicht der Fall: Wenn man einer Variable vom Typ InternationalesBüro ein Objekt vom
Typ Büro zuweisen könnte, dann hätte man immer dann ein Problem, wenn man über
diese Variable auf dessen Methoden zu Länderkennzeichen zugreifen wollte, weil diese
50 Bei Variablen mit Referenzsemantik geht das ohne Einschrä nkungen, denn die Größe des durch
einen Pointer belegten Speicherplatzes ist immer gleich. Bei Variablen mit Wertsemantik hingegen
muss der Wert eines erweiterten Typen erst auf einen des Basistypen projiziert werden, d. h., die
Inhalte eventueller zusätzl icher Felder müssen unter den Tisch fallen, da für sie im für die Variable
reservierten Speicher kein Platz ist. Solange in den Typdefinitionen aber gar keine Felder vorkommen,
ist der Typ einer Variable auch nicht für die Berechnung des zur Aufnahme eines Objekts des Typs
benötigten Speichers geeignet. Das ist z. B. in STRONGTALK der Fall — und auch gut so, denn Felder
zählen nach vorherrschender Meinung zur Implementation und sind, genau wie bei abstrakten Da-
tentypen, nicht Bestandteil einer Typdefinition . Vererbung der
Methoden -
deklaration
Zuweisungskompa -
tibilität bei
Typerweiterung
schlichtweg für das Objekt nicht definiert sind. Die Zuweisungskompatibilität unter Typer-
weiterung regelt der Begriff der Typkonformität.

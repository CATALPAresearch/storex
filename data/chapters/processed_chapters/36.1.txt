36.1 Klassendefinitionen

Eine einfache Klassendefinition in Java sieht wie folgt aus:
class <Klassenname> {
    <Typ 1> <feld1>;
    <Rückgabetyp 1> <methode1>(<Parametertyp 1> <parameter 1>, …) {…}
    // ...
}
Die geschweiften Klammern sind in Java (wie auch in C und allen syntaktisch davon abgeleiteten Sprachen) Begrenzer für Definitionen und Blöcke; sie entsprechen den Schlüsselwörtern "begin" und "end" von Pascal. Die spitzen Klammern kennzeichnen auch hier metasyntaktische Variablen (Platzhalter für richtige Namen).
Die oben gezeigte Klassendefinition gliedert sich in die Angabe von Instanzvariablen, die in Java als Felder bezeichnet werden, und Instanzmethoden. Beide werden, der Tradition von C++ folgend, zusammenfassend auch als "Member" bezeichnet. Der Begriff "Member" (das englische Wort für ein Element einer Menge) bezieht sich auf die Klassendefinition. Konstruktoren zählen nicht zu den Members; sie werden in Abschnitt 36.3 behandelt.
Neben Feldern und Methoden kann eine Klassendefinition in Java auch geschachtelte sowie sogenannte innere Klassendefinitionen besitzen. Diese Klassendefinitionen gelten ebenfalls als Members der umschließenden Klasse. Sie sind vor allem dann sinnvoll, wenn ausgedrückt werden soll, dass die Existenz der inneren Klasse ohne die der äußeren sinnlos wäre. Beispielsweise ist es üblich, wenn verknüpfte Listen implementiert werden, die Klasse der Listenelemente innerhalb der Klasse der Liste zu definieren. Denn diese Listenelemente werden kaum außerhalb einer Liste verwendet und ihre Klasse wird nicht benötigt. Innere Klassen werden immer im Kontext von Instanzen ihrer äußeren Klasse(n) instanziiert. Instanzen innerer Klassen liegen somit "innerhalb" von Instanzen ihrer äußeren Klasse(n) und können über das Konstrukt "Outer this" auf diese zugreifen.
Members können auch als "static" deklariert werden. Dabei bedeutet "static", dass sich so deklarierte Felder und Methoden nicht auf Objekte, sondern auf die Klasse selbst beziehen, in der sie definiert sind. Es handelt sich also um Klassenvariablen und -methoden. Da in Java im Gegensatz zu Smalltalk Klassen selbst keine Objekte sind, sondern während der Programmausführung dauerhaft existierende, unveränderliche Gebilde, die nicht in Variablen gespeichert werden können, werden als "static" deklarierte Members auch nicht dynamisch gebunden.
Achtung: Im Fall von "static" deklarierten Feldern könnte man meinen, dass diese zu Konstanten werden. Das ist jedoch nicht der Fall. In Java dient das Schlüsselwort "final" dazu, Variablen als Konstanten zu deklarieren. "final" bedeutet, dass einer Variable genau einmal ein Wert zugewiesen werden darf. Im Gegensatz dazu benötigte man in dem schlüsselwortlosen Smalltalk konstante Methoden für Konstanten (siehe Abschnitt 4.3.6). Auf Methoden angewandt bedeutet "final", dass diese in Subklassen nicht überschrieben werden dürfen. Mehr dazu im nächsten Abschnitt.

Frage: Wie sieht eine einfache Klassendefinition in Java aus?
Antwort: Eine einfache Klassendefinition in Java besteht aus dem Klassennamen, der Angabe von Instanzvariablen (Felder) und Instanzmethoden.

Frage: Was sind Instanzvariablen in Java?
Antwort: Instanzvariablen in Java sind Felder, die zur Speicherung von Daten in einer Klasse verwendet werden. Jede Instanz der Klasse hat ihre eigenen Kopien dieser Variablen.

Frage: Was sind Instanzmethoden in Java?
Antwort: Instanzmethoden in Java sind Methoden, die auf Instanzen (Objekten) einer Klasse angewendet werden können. Sie definieren das Verhalten der Klasse.

Frage: Was sind "Member" in Bezug auf Klassendefinitionen in Java?
Antwort: "Member" ist ein zusammenfassender Begriff für Felder und Methoden innerhalb einer Klassendefinition in Java.

Frage: Welche weiteren Arten von Klassendefinitionen sind in Java möglich?
Antwort: In Java können Sie auch geschachtelte Klassendefinitionen und innere Klassendefinitionen erstellen, die ebenfalls als Members der umschließenden Klasse gelten.

Frage: Was bedeutet es, wenn ein Member in Java als "static" deklariert wird?
Antwort: Wenn ein Member als "static" deklariert wird, bedeutet dies, dass er sich nicht auf Instanzen der Klasse bezieht, sondern auf die Klasse selbst. Es handelt sich um Klassenvariablen und -methoden.

Frage: Wann werden "final"-Variablen in Java verwendet?
Antwort: "final"-Variablen werden in Java verwendet, um Konstanten zu deklarieren. Sie dürfen nur einmal einen Wert zugewiesen bekommen und sind dann nicht mehr änderbar.

Frage: Warum sind "static"-Felder in Java keine Konstanten?
Antwort: "static"-Felder in Java sind nicht automatisch Konstanten, da sie mehrfach geändert werden können. Konstanten werden in Java stattdessen durch das Schlüsselwort "final" gekennzeichnet.
8.6 Praktische Bedeutung der Metaklassen für die Programmierung

In SMALLTALK sind Klassen Instanzen von Metaklassen, die selbst Instanzen einer weiteren Klasse sind, und alle diese zusammen sind Objekte. Daher ist jedes SMALLTALK-Programm, ja das ganze SMALLTALK-System, nichts weiter als ein Geflecht von Objekten (abgesehen von den primitiven Methoden). SMALLTALK ist somit nicht nur ein Programmiersystem, sondern auch ein Metaprogrammiersystem in der Tradition funktionaler und logischer Programmiersprachen wie LISP und PROLOG. In der Welt der imperativen und objektorientierten Programmiersprachen sucht diese Mächtigkeit bis heute ihresgleichen.
Als Programmiererin, die nicht gleich eine neue Sprache entwickeln möchte, werden Sie wahrscheinlich nicht in die Ebene der Metaklassen hinabsteigen oder diese gar selbst ändern. Wenn Sie beispielsweise möchten, dass beim Erstellen einer neuen Klasse automatisch Zugriffsmethoden für alle benannten Instanzvariablen dieser Klasse generiert werden, ist dies leicht möglich, indem Sie an der entsprechenden Stelle (z. B. in der Klasse "Class" oder "Behavior", die auf der Ebene der Metaklassen steht und für das Erstellen neuer Klassen verantwortlich ist) eine neue Methode zur Klassendefinition hinzufügen, die die vorhandenen Methoden um die automatische Generierung der Zugriffsmethoden erweitert.
Im täglichen Programmieralltag werden Sie dies jedoch wahrscheinlich nicht tun. Stattdessen beschränkt sich Ihre Arbeit darauf, einfache Klassen anzulegen und zu ändern, also Klassen, deren Instanzen selbst keine Klassen sind. Die erforderlichen Metaklassen erstellt SMALLTALK automatisch selbst, und im Klassenbrowser werden sie nur durch die Unterscheidung zwischen Instanz- und Klassenvariablen bzw. -methoden sichtbar.

Frage: Wie wird in SMALLTALK die Mächtigkeit eines Programms hervorgehoben, insbesondere im Vergleich zu imperativen und objektorientierten Programmiersprachen?
Antwort: In SMALLTALK wird die Mächtigkeit eines Programms hervorgehoben, indem betont wird, dass Klassen Instanzen von Metaklassen sind, die selbst Instanzen einer weiteren Klasse sind. Dieses Zusammenspiel von Klassen und Metaklassen ermöglicht eine hohe Programmiermächtigkeit. Im Vergleich zu imperativen und objektorientierten Programmiersprachen sucht diese Mächtigkeit bis heute ihresgleichen.

Frage: Welche praktische Bedeutung haben Metaklassen für die Programmierung in SMALLTALK?
Antwort: Metaklassen haben in SMALLTALK die praktische Bedeutung, dass sie die Definition von Klassen steuern und die Struktur des Programms beeinflussen. Sie ermöglichen es, Klassen dynamisch zu erzeugen und zu verändern. Zum Beispiel können Sie an der Ebene der Metaklassen Methoden hinzufügen, um das Verhalten von Klassen zu ändern, ohne die Klassen selbst zu ändern.

Frage: Was können Programmierer tun, um automatisch Zugriffsmethoden für Instanzvariablen in SMALLTALK zu generieren?
Antwort: Programmierer können in SMALLTALK an der entsprechenden Stelle (z. B. in der Klasse "Class" oder "Behavior", die auf der Ebene der Metaklassen steht und für das Erstellen neuer Klassen verantwortlich ist) eine neue Methode zur Klassendefinition hinzufügen, die die vorhandenen Methoden um die automatische Generierung der Zugriffsmethoden (Accessoren) für ausgewählte Instanzvariablen erweitert. Dies ermöglicht es, Zugriffsmethoden für Instanzvariablen automatisch zu generieren.

Frage: Was ist die Hauptaufgabe von Programmierern im täglichen Programmieralltag im Zusammenhang mit Metaklassen?
Antwort: Im täglichen Programmieralltag beschränken sich die Aufgaben der Programmierer im Zusammenhang mit Metaklassen darauf, einfache Klassen anzulegen und zu ändern, insbesondere Klassen, deren Instanzen selbst keine Klassen sind. Die erforderlichen Metaklassen erstellt SMALLTALK automatisch selbst, und im Klassenbrowser werden sie nur durch die Unterscheidung zwischen Instanz- und Klassenvariablen bzw. -methoden sichtbar.
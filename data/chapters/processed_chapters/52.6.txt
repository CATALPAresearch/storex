52.6 Zusicherungen in EIFFEL: Vorbedingungen, Nachbedingungen und Klasseninvarianten

Ein herausragendes Merkmal von EIFFEL ist die Integration von Zusicherungen in Form von Vor- und Nachbedingungen bei Methodenaufrufen. Bei der Behandlung von JAVA sind wir bereits auf die Assert-Anweisung gestoßen, die es erlaubte, Zusicherungen zur Laufzeit auszuwerten und das Programm bei einer Verletzung ggf. abzubrechen. Da es sich jedoch um eine Anweisung handelte, gab es keine von der Sprachdefinition vorgesehenen Orte, an denen solche Zusicherungen auftreten sollten — ihre Platzierung lag ganz im Ermessen der Programmiererin. In EIFFEL ist dies anders.
Die Syntax zur Definition einer Methode in EIFFEL sieht zwei Schlüsselwörter vor, "require" und "ensure", von denen das erste vor der Implementierung der Methode (dem Methodenrumpf) und das zweite danach auftreten kann. Beiden Schlüsselwörtern folgen Boolesche Ausdrücke, die alle zu "wahr" ausgewertet werden müssen. Die Idee hinter einer "Require"-Klausel ist, dass die darin ausgedrückten Bedingungen erfüllt sein müssen, damit die betreffende Methode ordnungsgemäß funktionieren kann. Zum Beispiel macht es Sinn, für die Methode "pop" in der Klasse "STACK" zu verlangen, dass der Stapel, auf dem die Methode aufgerufen wird, nicht leer ist. Die Idee hinter einer "Ensure"-Klausel ist, dass eine Methode, deren "Require"-Klausel erfüllt war, im Gegenzug garantieren muss, dass die in der "Ensure"-Klausel ausgedrückten Bedingungen erfüllt sind. Im Fall des Stacks bedeutet das beispielsweise, dass nach einem "push" das übergebene Element tatsächlich oben auf dem Stapel liegt, sodass die Methode "top" beispielsweise das soeben auf den Stapel gelegte Element zurückgeben kann. Um ihre Bedingungen zu formulieren, dürfen die Ausdrücke in beiden Klauseln auf Abfragen (queries) der Klasse zurückgreifen. Diese sollten jedoch tunlichst nebenwirkungsfrei sein, zum einen, weil die "Ensure"-Klausel sonst nicht garantieren kann, dass eine geprüfte Bedingung auch nach ihrer vollständigen Auswertung immer noch wahr ist (man stelle sich vor, was passieren würde, wenn die "Ensure"-Klausel in "push" die Methode "pop" aufrufen würde!), zum anderen, weil in EIFFEL (wie in JAVA) die Überprüfung der Zusicherungen zur Laufzeit deaktiviert werden kann (wodurch das Programm bei Überprüfung der Zusicherungen eine andere Semantik hätte als ohne; vergleiche die Anmerkungen zur Assert-Anweisung in JAVA in Kurseinheit 4, Kapitel 38).
Neben der Möglichkeit, Vor- und Nachbedingungen zu formulieren, gibt es in EIFFEL auch die Möglichkeit, sog. Klasseninvarianten (Schlüsselwort "invariant") zu deklarieren. Klasseninvarianten müssen jederzeit zwischen zwei Methodenaufrufen gelten; man kann sich vorstellen, dass sie jeder Vor- und Nachbedingung per Konjunktion hinzugefügt werden. Auf die etwas subtilen Probleme, die das Aliasing in Zusammenhang mit Zusicherungen schafft, wollen wir an dieser Stelle nicht eingehen; dies wird ausführlicher in Kurs 01853 behandelt.
Zusicherungen werden in EIFFEL von Klassen auf ihre Subklassen vererbt. Wenn eine Methode redefiniert wird, dürfen auch Vor- und Nachbedingungen angepasst werden. Allerdings gilt hierbei, dass die Vorbedingung nur abgeschwächt und die Nachbedingung nur verschärft werden darf. Die Sprachdefinition von EIFFEL stellt sicher, dass diese Bedingung eingehalten wird, indem die Vorbedingung einer redefinierten Methode implizit disjunktiv mit der geerbten Vorbedingung und die redefinierte Nachbedingung implizit konjunktiv mit der geerbten verknüpft wird.

Frage: Was ist ein herausragendes Merkmal von EIFFEL in Bezug auf Zusicherungen (Assertions)?
Antwort: Ein herausragendes Merkmal von EIFFEL ist die Integration von Zusicherungen in Form von Vor- und Nachbedingungen bei Methodenaufrufen. Anders als in Java, wo Zusicherungen flexibel platziert werden können, gibt es in EIFFEL spezielle vorgesehene Stellen für diese Zusicherungen.

Frage: Welche Schlüsselwörter werden in EIFFEL verwendet, um Vor- und Nachbedingungen für Methoden zu definieren?
Antwort: In EIFFEL werden die Schlüsselwörter "require" (vor der Implementierung der Methode) und "ensure" (nach der Implementierung der Methode) verwendet, um Vor- und Nachbedingungen für Methoden zu definieren.

Frage: Wie werden Vor- und Nachbedingungen in EIFFEL formuliert?
Antwort: Vor- und Nachbedingungen in EIFFEL werden als Boolesche Ausdrücke formuliert, die immer als "wahr" ausgewertet werden müssen. Die "require"-Klausel stellt Bedingungen dar, die vor dem Aufruf der Methode erfüllt sein müssen, während die "ensure"-Klausel Bedingungen darstellt, die nach dem Aufruf der Methode garantiert erfüllt sind.

Frage: Was sind Klasseninvarianten in EIFFEL?
Antwort: Klasseninvarianten in EIFFEL sind Bedingungen, die zwischen zwei Methodenaufrufen in einer Klasse immer gelten müssen. Sie werden mit dem Schlüsselwort "invariant" deklariert und sind sozusagen eine Zusammenfassung von Vor- und Nachbedingungen, die für die Klasse als Ganzes gelten.

Frage: Wie werden Zusicherungen in EIFFEL vererbt, insbesondere wenn eine Methode redefiniert wird?
Antwort: Zusicherungen, einschließlich Vor- und Nachbedingungen, werden in EIFFEL von Klassen auf ihre Subklassen vererbt. Wenn eine Methode redefiniert wird, dürfen die Zusicherungen angepasst werden, jedoch mit bestimmten Einschränkungen. Die Vorbedingung darf nur abgeschwächt und die Nachbedingung nur verschärft werden, und die Sprachdefinition von EIFFEL stellt sicher, dass diese Bedingungen eingehalten werden.
29.4 Beschränkter parametrischer Polymorphismus

Das obige Beispiel hat gezeigt, dass die einfache Form des parametrischen Polymorphismus für die Typsicherheit in der objektorientierten Programmierung nur teilweise nützlich ist. Da die Typvariablen selbst nicht typisiert sind, kann man innerhalb der Typdefinition (und der den Typ implementierenden Klassen) keine Aussagen über den Typ treffen. Außerhalb, bei der Verwendung (Instanziierung) der Typdefinition, ist das hingegen möglich, da hier die Typvariable durch einen Typ ersetzt ist.
Was man jedoch gerne hätte, ist, dass die Typvariable innerhalb der mit ihr parametrisierten Typdefinition selbst wertbeschränkt ist, und zwar derart, dass man bei den als Werte zulässigen Typen ein bestimmtes, benötigtes Protokoll voraussetzen kann. Die tatsächlichen Typparameter sind dann nicht mehr beliebig wählbar, sondern nur noch aus solchen Typen, die die Einschränkungen erfüllen. Eine Möglichkeit, dies zu erzielen, wäre die Einführung von Metatypen, deren Wertebereiche Typen mit von den Metatypen vorgegebenen Eigenschaften sind. Diese Möglichkeit wird jedoch in der Praxis nicht genutzt.
Stattdessen verwendet man eine Art der Beschränkung des Wertebereichs von Typvariablen, die auf Subtyping beruht. Wenn man nämlich erzwingen kann, dass ein tatsächlicher Typparameter (also der Wert der Typvariable) ein Subtyp eines bestimmten Typs ist, der die benötigten Eigenschaften (Methoden) umfasst, dann ist damit alles erreicht, was man benötigt. Aufgrund der Regeln des Subtyping hat jeder solche Typ die Eigenschaften des Supertyps (siehe Kapitel 26).
Der Rest der Definition geht wie oben. Der Ausdruck "E < Number" im Abschnitt "Typvariablen" ist Deklaration und Beschränkung zugleich. Die Beschränkung ist jedoch, wie bereits erwähnt, keine Typisierung wie in normalen Variablendeklarationen. Sie drückt vielmehr aus, dass die Typen, die als Werte für E eingesetzt werden dürfen, Subtypen von Number sein müssen. Die Deklaration aus Zeile 951 wird damit unzulässig und führt zu einem entsprechenden Typfehler während der statischen Typprüfung. Die Deklaration aus Zeile 952 ist hingegen in Ordnung.

Frage: Warum ist die einfache Form des parametrischen Polymorphismus für die Typsicherheit in der objektorientierten Programmierung nur teilweise nützlich?
Antwort: Die einfache Form des parametrischen Polymorphismus ist nur teilweise nützlich, da die Typvariablen selbst nicht typisiert sind, und somit innerhalb der Typdefinition keine Aussagen über den Typ getroffen werden können.

Frage: Welches Problem möchte man mit dem beschränkten parametrischen Polymorphismus lösen?
Antwort: Mit dem beschränkten parametrischen Polymorphismus möchte man sicherstellen, dass die Typvariable innerhalb der mit ihr parametrisierten Typdefinition selbst wertbeschränkt ist und nur bestimmte, benötigte Protokolle für die als Werte zulässigen Typen erlaubt.

Frage: Welche Möglichkeit zur Beschränkung des Wertebereichs von Typvariablen wird in der Praxis nicht genutzt?
Antwort: Die Einführung von Metatypen, deren Wertebereiche Typen mit von den Metatypen vorgegebenen Eigenschaften sind, wird in der Praxis nicht genutzt.
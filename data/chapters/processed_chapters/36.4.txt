36.4 Überschreiben, Überladen und dynamisches Binden

Nun hat die Subklasse die Möglichkeit, neue Member hinzuzufügen und bereits vorhandene zu redefinieren. In JAVA ist die Redefinition auf das Überschreiben beschränkt, was bedeutet, dass eine Methode mit derselben Signatur (bestehend aus Methodennamen und formalen Parametertypen) erneut definiert werden kann, jedoch mit einer geänderten Implementierung. Die Methode kann auch den Rückgabetyp kovariant ändern, d.h., in Richtung Subtyp (vgl. dazu die Diskussion in Kurseinheit 3, Abschnitt 26.3). Die Einhaltung der Typinvarianten, die mit ihren (geerbten) Parametern verbunden sind, über die hinaus die überschreibende Methode nichts tut, was mit der überschriebenen Methode inkompatibel ist, kann durch die Sprachdefinition von JAVA nicht erzwungen werden. In diesem Punkt liegt die Verantwortung beim Programmierer (vgl. dazu auch Abschnitt 52.6 in Kurseinheit 5 und 54.1 in Kurseinheit 6).
In JAVA können auch Methoden mit demselben Namen, aber verschiedenen Parametertypen in derselben Klasse oder einer Subklasse vorhanden sein. Diese Methoden nennt man dann überladen. Es ist wichtig zu verstehen, dass in JAVA Überladen und Überschreiben zwei grundverschiedene Dinge sind, obwohl in beiden Fällen eine Methode mit dem gleichen Namen erneut definiert wird: Beim Überladen wird eine neue Methode eingeführt, beim Überschreiben wird eine bereits existierende Methode neu definiert. Diese Unterscheidung spielt beim dynamischen Binden eine entscheidende Rolle.
Um das dynamische Binden in JAVA genau zu verstehen (und damit das Verhalten eines Programms vorherzusagen), muss man sich den Bindealgorithmus vor Augen halten. Dieser funktioniert wie folgt:
Bereits zur Übersetzungszeit wird ein dynamischer Methodenaufruf lose an eine Methodendeklaration gebunden, und zwar an genau diejenige, die die folgenden Bedingungen erfüllt: Sie hat denselben Namen und dieselbe Anzahl von Parametern wie die aufgerufene Methode. Sie ist in der Klasse, die dem deklarierten Typ des Ausdrucks entspricht, der das Empfängerobjekt liefert (oftmals einfach eine Variable), deklariert oder wird von einer ihrer Superklassen geerbt. Die deklarierten Parametertypen des Aufrufs (die deklarierten tatsächlichen Parametertypen) sind jeweils Subtypen der deklarierten Parametertypen der Methodendeklaration (der deklarierten formalen Parametertypen). Es gibt keine andere Methode, die dieselben Voraussetzungen erfüllt, deren deklarierte formale Parametertypen jedoch näher oder gleich weit vom Typ des Aufrufs entfernt sind (Entfernung gemessen an der Anzahl der Subtypen, die dazwischen liegen).
Dadurch wird die oberste Methode in einer Gruppe von potenziell in Subklassen überschriebenen Methoden ausgewählt, die für die Bindung infrage kommt. Beachten Sie, dass die überschreibenden Methoden dieselbe Signatur haben müssen wie die überschriebene Methode; diese Methoden bilden eine Art Familie, aus der eine Methode zur Bindung ausgewählt wird.
Zur Laufzeit wird dann nur noch der tatsächliche Typ des Empfängerobjekts (die Klasse, von der es eine Instanz ist) bestimmt. Dieser muss aufgrund der Regeln der Zuweisungskompatibilität ein Subtyp des deklarierten Typs des Ausdrucks sein, der das Empfängerobjekt liefert. Mit diesem tatsächlichen (auch dynamisch genannten) Typ wird dann aus der zuvor bestimmten Gruppe von in Frage kommenden überschriebenen Methoden diejenige ausgewählt, die in der Klasse definiert wurde, die der Klasse des Empfängerobjekts in der Superklassenkette am nächsten ist.
Wenn bei der Suche nach einer Methode zur Übersetzungszeit nach dem oben beschriebenen Algorithmus (Schritt 4) eine oder mehrere andere Methodendefinitionen gleich weit von der aufgerufenen Methode entfernt sind, meldet der Compiler einen sogenannten Methodenambiguitätsfehler. Dieser bedeutet, dass die aufgerufene Methode durch den Aufruf nicht eindeutig bestimmt ist. Beachten Sie, dass dieser Fehler durch Methodenaufrufe, nicht durch Methodendeklarationen verursacht wird. Wenn Sie den problematischen Aufruf entfernen, tritt auch kein Fehler mehr auf.
Beachten Sie, dass in Sprachen, in denen das dynamische Binden auch die Typen der tatsächlichen Parameter berücksichtigt (sogenanntes Mehrfach-Dispatching), der Unterschied zwischen Überladen und Überschreiben verschwimmt. In JAVA hingegen muss das dynamische Binden anhand der Parametertypen genau wie in SMALLTALK über sogenanntes Doppel-Dispatching simuliert werden.

Frage: Was ist das Überschreiben von Methoden in JAVA, und welche Bedingungen gelten dafür?
Antwort: Das Überschreiben von Methoden in JAVA bedeutet, dass eine bereits vorhandene Methode in einer Subklasse mit derselben Signatur (Methodenname und formale Parametertypen) neu definiert wird. Die Bedingungen dafür sind, dass die Methode denselben Namen und dieselbe Anzahl von Parametern wie die aufgerufene Methode hat und dass die deklarierten Parametertypen der Methode Subtypen der deklarierten Parametertypen der Methode in der Superklasse sind.

Frage: Was ist das Überladen von Methoden in JAVA, und wie unterscheidet es sich vom Überschreiben?
Antwort: Das Überladen von Methoden in JAVA bedeutet, dass Methoden denselben Namen haben, aber verschiedene Parametertypen in derselben Klasse oder einer Subklasse haben. Der Unterschied zum Überschreiben besteht darin, dass beim Überladen neue Methoden hinzugefügt werden, während beim Überschreiben bereits vorhandene Methoden neu definiert werden.

Frage: Was ist dynamisches Binden in JAVA, und wie funktioniert der Bindungsalgorithmus?
Antwort: Das dynamische Binden in JAVA bezieht sich auf die Auswahl der Methode zur Laufzeit, basierend auf dem tatsächlichen Typ des Empfängerobjekts. Der Bindungsalgorithmus in JAVA wählt die Methode aus, die die folgenden Bedingungen erfüllt: Sie hat denselben Namen und dieselbe Anzahl von Parametern wie die aufgerufene Methode, ist in der Klasse des deklarierten Typs des Ausdrucks deklariert und deren deklarierte Parametertypen sind Subtypen der deklarierten Parametertypen der aufgerufenen Methode. Wenn mehrere Methoden die Bedingungen erfüllen, wird diejenige ausgewählt, deren Klasse am nächsten zur Klasse des Empfängerobjekts in der Superklassenkette ist.

Frage: Was passiert, wenn der Bindungsalgorithmus in JAVA zu mehreren Methoden führt, die die Bedingungen erfüllen?
Antwort: Wenn der Bindungsalgorithmus zu mehreren Methoden führt, die die Bedingungen erfüllen, meldet der Compiler einen Methodenambiguitätsfehler, da die aufgerufene Methode nicht eindeutig bestimmt werden kann. Dieser Fehler wird durch Methodenaufrufe, nicht durch Methodendeklarationen, verursacht.

Frage: Wie wird das dynamische Binden in JAVA durchgeführt, und warum ist es wichtig zu verstehen?
Antwort: Das dynamische Binden in JAVA erfolgt zur Laufzeit, wenn der tatsächliche Typ des Empfängerobjekts bestimmt wird, um die entsprechende Methode auszuwählen. Es ist wichtig zu verstehen, da es das Verhalten eines Programms beeinflusst und zur Vorhersage des Programmverhaltens beiträgt.
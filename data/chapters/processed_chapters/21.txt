21 Zuweisungskompatibilität

Die Typisierung von Variablen (und anderen Programmelementen – wenn im nachfolgenden nur von Variablen die Rede ist, dann sind letztere meistens mitgemeint) soll also bewirken, dass in einem Programm jede Variable nur die Werte haben kann, für die sie (die Variable) vorgesehen ist (die Einhaltung der Typinvariante). Voraussetzung dafür ist zum einen, dass jeder Variable ein Typ zugeordnet ist, zum anderen, dass auch jedes Objekt sowie jeder Ausdruck, der für einen Wert oder ein Objekt steht, einen Typ hat. Ersteres geschieht in sogenannten Variablendeklarationen, letzteres ergibt sich aus den zu einem Typsystem gehörenden Regeln zur Zuordnung eines Typs zu Ausdrücken, nämlich bei Literalen aus der Art des Literals, dessen Typ dem Compiler bekannt ist, bei der Instanziierung aus dem noch zu klärenden Zusammenhang von der instanziierten Klasse mit den Typen eines Programms sowie bei Nachrichtenausdrücken aus der Deklaration der dazugehörigen Methode, die ja (genau wie eine Variablendeklaration) angeben muss, welchen Typs die Objekte sind, die sie liefert.
Es bleibt die Frage nach den ebenfalls zu einem Typsystem gehörenden Typregeln, die von Ausdrücken einzuhalten sind, nämlich wie die Typkorrektheit bzw. andernfalls die Verletzung einer Typinvariante genau festgestellt wird. Es ist ja bereits klar, dass es dazu ausreicht, die Wertzuweisungen in einem Programm zu überprüfen. Diese Überprüfung findet in der Regel in Form der Feststellung der sog. Zuweisungskompatibilität statt. Die Sprachregelung ist hier leider nicht ganz einheitlich, aber im folgenden gehen wir davon aus, dass alle typisierten Sprachen den Begriff der Zuweisungskompatibilität kennen und sich lediglich in ihren Definitionen der Regeln, die für das Bestehen einer Zuweisungskompatibilität eingehalten werden müssen, unterscheiden. Vor allem darum wird es in den nächsten Kapiteln gehen.
Dann sind, unter der Annahme, dass 12 vom Typ Integer ist und true vom Typ Boolean, die Zuweisungen zulässig (da sie keine Typinvariante verletzen), hingegen nicht. Ist eine Zuweisung zulässig, dann spricht man auch von einer Zuweisungskompatibilität der beteiligten Typen. Die für das Programmieren relevante Implikation ist allerdings die umgekehrte: Wenn zwei Typen zuweisungskompatibel sind, dann gilt, dass eine entsprechende Zuweisung zulässig ist, also zu keiner Verletzung einer Typinvariante führt. Wie Sie noch sehen werden, verlangt Zuweisungskompatibilität keineswegs identische Typen; daraus ergibt sich aber eine sprachliche Uneindeutigkeit, die zunächst behoben werden muss.
Dem Satz „a ist zuweisungskompatibel mit b“ kann man nicht eindeutig entnehmen, ob nun a b zugewiesen werden kann oder b a. Dass beides geht, ist nur dann der Fall, wenn die beteiligten Typen äquivalent in einem noch zu bestimmenden Sinne sind, was aber, wie schon gesagt, nicht unbedingt der Fall sein muss. Im folgenden soll daher die Richtung der erlaubten Zuweisung so gelesen werden, dass beim Satz „a ist zuweisungskompatibel mit b“ die Zuweisung b := a zulässig ist. Die umgekehrte Richtung, a := b, kann ebenfalls zulässig sein; dies wird durch den Satz jedoch nicht ausgesagt. Zuweisungskompatibilität ist übrigens (in der Regel) eine transitive Eigenschaft: Wenn a zuweisungskompatibel mit b ist und b zuweisungskompatibel mit c, dann ist auch a zuweisungskompatibel mit c.
Auch bei impliziten Zuweisungen wie der Parameterübergabe von Methodenaufrufen (den dabei stattfindenden Zuweisungen der tatsächlichen an die formalen Parameter; s. Abschnitt 4.3.2) impliziert Zuweisungskompatibilität Typkorrektheit. Außerdem kann eine Methode, wenn sie Werte zurückgibt, ja selbst in rechten Seiten von Zuweisungen auftreten; der Typ dieser Werte muss dann mit der Variable auf der linken Seite zuweisungskompatibel sein.

Frage: Warum ist die Typisierung von Variablen und Ausdrücken in einem Programm wichtig?
Antwort: Die Typisierung von Variablen und Ausdrücken in einem Programm ist wichtig, um sicherzustellen, dass jede Variable nur Werte haben kann, für die sie vorgesehen ist. Dies gewährleistet die Einhaltung der Typinvariante und verhindert Typfehler im Programm.

Frage: Wie werden Typen in Variablendeklarationen zugeordnet?
Antwort: Typen werden in Variablendeklarationen explizit angegeben, um jedem Objekt und Ausdruck im Programm einen Typ zuzuordnen.

Frage: Was ist die Zuweisungskompatibilität, und warum ist sie wichtig?
Antwort: Die Zuweisungskompatibilität ist wichtig, um festzustellen, ob Zuweisungen zwischen Variablen oder Ausdrücken zulässig sind, ohne die Typinvariante zu verletzen. Sie stellt sicher, dass die Typen der beteiligten Objekte oder Ausdrücke kompatibel sind, um Typfehler zu vermeiden.

Frage: Wie wird die Richtung der erlaubten Zuweisung bei der Zuweisungskompatibilität interpretiert?
Antwort: Bei der Zuweisungskompatibilität wird die Richtung der erlaubten Zuweisung so interpretiert, dass beim Satz "a ist zuweisungskompatibel mit b" die Zuweisung "b := a" zulässig ist. Die umgekehrte Richtung, "a := b," wird durch den Satz nicht ausgesagt.

Frage: Ist Zuweisungskompatibilität eine transitive Eigenschaft?
Antwort: Ja, in der Regel ist Zuweisungskompatibilität eine transitive Eigenschaft. Wenn a zuweisungskompatibel mit b ist und b zuweisungskompatibel mit c ist, dann ist auch a zuweisungskompatibel mit c.

Frage: Warum ist Zuweisungskompatibilität auch bei impliziten Zuweisungen wichtig?
Antwort: Zuweisungskompatibilität ist auch bei impliziten Zuweisungen wichtig, da sie Typkorrektheit impliziert. Bei der Parameterübergabe von Methodenaufrufen oder impliziten Zuweisungen müssen die beteiligten Typen kompatibel sein, um Typfehler zu vermeiden.

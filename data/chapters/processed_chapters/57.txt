57 Das Problem der eindimensionalen Strukturierung

Klassen sind die Module der objektorientierten Programmierung. Die Menge der Module und damit das Programm werden durch die Vererbungshierarchie weiter strukturiert. Parallel dazu (und weitgehend, bis auf die Vererbung von Beziehungen unabhängig) gibt es noch eine Struktur, die durch das Bestehen von Beziehungen zwischen Klassen (genauer: das Bestehen der Möglichkeit von Beziehungen zwischen Objekten der Klassen; s. Kapitel 2 in Kurseinheit 1) geprägt ist. Diese ist jedoch nicht hierarchisch und insgesamt eher unorganisiert, weshalb sie sich nicht zur systematischen Programmorganisation eignet. Außerdem besteht ein gewisser Konflikt zwischen der Hierarchie der Subklassenbeziehung und den Beziehungen zwischen Objekten: Wenn man einen Teilbaum der Vererbungshierarchie herauslöst, trennt man damit praktisch immer Beziehungen zwischen Mitgliedern des Teilbaums und anderen. Die Klassenhierarchie stellt also insbesondere keine Form der hierarchischen Modularisierung dar.
Insbesondere bei größeren Programmen kann leicht das Bedürfnis aufkommen, ein Programm nach mehreren Kriterien gleichzeitig zu strukturieren. Dies kann beispielsweise verschiedene Vererbungshierarchien betreffen. So, wie man in der Biologie eine Taxonomie der Arten nach Herkunft (Genetik) und nach Merkmalen erstellen kann und da beide ihren Nutzen haben, man weder auf die eine noch auf die andere ohne Not verzichten möchte, so kann man ein Programm beispielsweise unter dem Gesichtspunkt der Vererbung von Funktionalität und von Daten alternativ strukturieren wollen. Voraussetzung hierfür ist allerdings, dass die verschiedenen Darstellungen getrennt voneinander gepflegt werden und dass durch sie weder Inkonsistenzen im Code noch ungewollte Interferenzen entstehen können.
Ein Nachteil der objektorientierten Programmierung (wie auch aller anderen heute bekannten Programmierparadigmen) ist sicherlich, dass die sog. Trennung der Belange, besser bekannt als die Separation of Concerns, nur unzureichend unterstützt wird. Ansätze wie das Subject- oder Aspect-oriented Programming wurden zwar hoch gehandelt, sind aber dennoch nicht im Mainstream angekommen. Die Gründe dafür mögen vielfältig sein, aber letztlich ist es wohl immer illusorisch zu versprechen, man könne die essentielle Komplexität, die einem Problem innewohnt, durch programmiersprachliche Mittel beseitigen. Insbesondere die getrennte Spezifikation eines Systems aus verschiedenen Sichten verlagert die Komplexität nur in das Zusammenführen der Sichten: Wie so oft muss das Ganze mehr sein als die Summe seiner Teile, um seinen Zweck zu erfüllen. Unsere heutigen Softwaresysteme sind die kompliziertesten technischen Artefakte, die die Menschheit jemals hervorgebracht hat, und wer hier Einfachheit verspricht, sollte sich schämen.

Frage: Welche Rolle spielen Klassen in der objektorientierten Programmierung, und wie werden Programme weiter strukturiert?
Antwort: Klassen sind die Module der objektorientierten Programmierung. Programme werden durch die Vererbungshierarchie weiter strukturiert, was bedeutet, dass Klassen in einer hierarchischen Beziehung zueinander stehen.

Frage: Welche Art von Struktur gibt es parallel zur Vererbungshierarchie, die jedoch nicht hierarchisch ist und sich nicht zur systematischen Programmorganisation eignet?
Antwort: Parallel zur Vererbungshierarchie gibt es eine Struktur, die durch das Bestehen von Beziehungen zwischen Klassen bzw. Objekten geprägt ist. Diese Struktur ist nicht hierarchisch und eher unorganisiert, weshalb sie sich nicht zur systematischen Programmorganisation eignet.

Frage: Warum stellt die Klassenhierarchie keine Form der hierarchischen Modularisierung dar?
Antwort: Die Klassenhierarchie stellt keine Form der hierarchischen Modularisierung dar, da das Herauslösen eines Teilbaums der Vererbungshierarchie praktisch immer Beziehungen zwischen Mitgliedern des Teilbaums und anderen trennt. Somit werden Beziehungen zwischen Klassenmitgliedern gestört.

Frage: Warum kann bei größeren Programmen das Bedürfnis entstehen, ein Programm nach mehreren Kriterien gleichzeitig zu strukturieren?
Antwort: Bei größeren Programmen kann das Bedürfnis entstehen, ein Programm nach mehreren Kriterien gleichzeitig zu strukturieren, da verschiedene Vererbungshierarchien oder andere Strukturierungskriterien gleichzeitig relevant sein können, ähnlich wie in der Biologie, wo Arten nach verschiedenen Gesichtspunkten klassifiziert werden. Dies erfordert jedoch, dass die verschiedenen Darstellungen getrennt gepflegt werden und keine Inkonsistenzen oder ungewollten Interferenzen entstehen.

Frage: Warum wird die Trennung der Belange in der objektorientierten Programmierung als unzureichend unterstützt angesehen?
Antwort: Die Trennung der Belange, auch als Separation of Concerns bekannt, wird in der objektorientierten Programmierung als unzureichend unterstützt angesehen, da es schwer ist, verschiedene Aspekte eines Systems sauber voneinander zu trennen. Ansätze wie das Subject- oder Aspect-oriented Programming wurden zwar diskutiert, haben jedoch keine breite Akzeptanz gefunden. Die Gründe dafür können vielfältig sein, aber letztendlich ist es schwierig, die essentielle Komplexität eines Problems durch programmiersprachliche Mittel vollständig zu beseitigen.

Frage: Warum werden Softwaresysteme als die kompliziertesten technischen Artefakte bezeichnet, die die Menschheit jemals hervorgebracht hat?
Antwort: Softwaresysteme werden als die kompliziertesten technischen Artefakte bezeichnet, die die Menschheit jemals hervorgebracht hat, weil sie eine immense Komplexität aufweisen. Die Trennung der Belange und die Bewältigung dieser Komplexität sind nach wie vor große Herausforderungen in der Softwareentwicklung. Daher wird darauf hingewiesen, dass Einfachheit in diesem Kontext schwer zu erreichen ist.
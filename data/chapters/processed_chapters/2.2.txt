2.2 Unterscheidung von :1- und :n-Beziehungen

In der Daten- und Softwaremodellierung werden Beziehungen (oder Relationen) häufig mit sog. Kardinalitäten versehen. (Manchmal, besonders im Kontext der Softwaremodellierung mit der Unified Modeling Language UML, werden diese auch Multiplizitäten genannt.) Sie geben an, mit wie vielen anderen Objekten ein Objekt gleichzeitig in derselben Beziehung stehen kann. Beispielsweise kann eine Person zu mehreren anderen Personen in einer Verwandtschaftsbeziehung stehen. Häufig sind die möglichen Kardinalitäten auf ein Intervall beschränkt; sie werden dann durch eben dieses Intervall beschrieben.
Von den theoretisch unendlich vielen möglichen Intervallen, die die Kardinalität beschränken können, sind vor allem drei interessant: [0..1], [1..1] und [0..∞). Dabei ist [1..1], also dass ein Objekt immer mit genau einem in Beziehung stehen muss, technisch nur schwer umzusetzen, so dass [1..1] hier nicht weiter betrachtet wird. Die untere Schranke 0, die den beiden verbleibenden Intervallen gemeinsam ist und die ausdrückt, dass ein Objekt auch mit gar keinem anderen in der Beziehung stehen kann, muss daher nicht erwähnt werden.
Im Fall von [0..1] sprechen wir also von Zu-eins-Beziehungen (im folgenden mit :1-Beziehung notiert), im Fall von [0..∞) von Zu-n-Beziehungen (:n-Beziehungen), wobei n hier andeutet, dass es sich um eine nicht näher spezifizierte Zahl größer als 1 handelt.
Objekt nil (null in anderen Sprachen) ausgedrückt. Nach und nach kommen in verschiedenen objektorientierten Programmiersprachen die sog. Not-null-Annotationen auf, die sicherstellen sollen, dass eine Variable nie den Wert null hat.
Beziehungen sind nicht von Natur aus auf ein Gegenüber eingeschränkt: Ein Objekt kann, und wird häufig, in derselben Beziehung zu mehreren anderen stehen. Genau dafür sind aber die indizierten Instanzvariablen wie geschaffen: Sie erlauben es, von einem Objekt zu beliebig vielen anderen Objekten zu navigieren, ohne für jedes andere eine eigene (jeweils anders) benannte Instanzvariable vorsehen zu müssen. Die „Namen“ der Gegenüber sind einfach Indizes: 1, 2, 3 usw.
Es ergibt sich nun aber das Problem, dass bei durch indizierte Instanzvariablen eines Objekts realisierten :n-Beziehungen nicht zwischen verschiedenen solchen Beziehungen desselben Objekts unterschieden werden kann — die indizierten Instanzvariablen sind ja nicht benannt. Deswegen werden :n-Beziehungen in der objektorientierten Programmierpraxis praktisch immer über Zwischenobjekte realisiert, deren Aufgabe es ist, mittels ihrer indizierten Instanzvariablen jeweils eine Beziehung zu mehreren anderen Objekten herzustellen. Dabei können diese Zwischenobjekte die :n-Beziehung ggf. mit weiteren Attributen (z. B. Anzahl n, Verweise auf ein bestimmtes Element, Art der Sortierung o. ä.) versehen, die dann in den benannten Instanzvariablen der Zwischenobjekte untergebracht werden. Das Originalobjekt, das die :n-Beziehung eigentlich haben sollte, steht dann stattdessen in einer von einer benannten Instanzvariable hergestellten :1-Beziehung zu dem Zwischenobjekt, das die :n-Beziehung herstellt.
Wie wir noch sehen werden, erlaubt der Umstand, dass :n-Beziehungen über Zwischenobjekte realisiert werden, die vollwertige Objekte sind, die Beziehungen beliebig auszugestalten. So kann beispielsweise eine (Sortier-)Reihenfolge vorgegeben oder ein ausgezeichnetes Element der Beziehung noch einmal gesondert referenziert werden (z. B. das oberste Element auf einem Stack). Auch besondere Zugriffsverfahren wie z. B. das Auffinden von Elementen (in Beziehung stehenden Objekten) anhand eines Schlüssels können auf diese Weise realisiert werden. Da in SMALLTALK Objekte auch eigene Kontrollstrukturen (wie z. B. spezielle Schleifen) anbieten können, sind der Ausgestaltung von Beziehungen über Zwischenobjekte praktisch keine Grenzen gesetzt.
Da :n-Beziehungen häufig vorkommen, ist ihre Handhabung von entscheidender Bedeutung für die Ausdrucksstärke der verwendeten Programmiersprache und die Produktivität der Programmierung insgesamt. Wie sich schon in Abschnitt 4.6.4 zeigen wird, erlaubt die Ausgestaltung von Zwischenobjekten in SMALLTALK Möglichkeiten, die bis heute Vorbildcharakter für andere objektorientierte Programmiersprachen haben.

Frage: Was sind Kardinalitäten und wie werden sie in der Daten- und Softwaremodellierung verwendet?
Antwort: Kardinalitäten sind in der Daten- und Softwaremodellierung häufig verwendete Beziehungsattribute, die angeben, wie viele andere Objekte ein Objekt in einer Beziehung haben kann.

Frage: Welche Kardinalitäten sind in diesem Abschnitt besonders interessant, und warum?
Antwort: Die besonders interessanten Kardinalitäten sind [0..1] und [0..∞), wobei [1..1] aufgrund technischer Schwierigkeiten nicht weiter betrachtet wird. [0..1] entspricht :1-Beziehungen und [0..∞) entspricht :n-Beziehungen.

Frage: Wie werden :1-Beziehungen in der objektorientierten Programmierung umgesetzt?
Antwort: :1-Beziehungen können direkt durch benannte Instanzvariablen zwischen Objekten realisiert werden.

Frage: Warum werden :n-Beziehungen in der objektorientierten Programmierung oft über Zwischenobjekte realisiert?
Antwort: :n-Beziehungen werden über Zwischenobjekte realisiert, da die indizierten Instanzvariablen eines Objekts nicht benannt sind und daher nicht zwischen verschiedenen :n-Beziehungen unterschieden werden kann.

Frage: Wie können Zwischenobjekte in der :n-Beziehungsmodellierung genutzt werden, um zusätzliche Informationen hinzuzufügen?
Antwort: Zwischenobjekte können zusätzliche Attribute (wie Sortierreihenfolge, Anzahl n, Verweise auf bestimmte Elemente usw.) enthalten, die in den benannten Instanzvariablen der Zwischenobjekte gespeichert werden. Dadurch können :n-Beziehungen flexibel gestaltet werden.

Frage: Warum sind :n-Beziehungen in SMALLTALK wichtig, und wie ermöglicht SMALLTALK die flexible Handhabung von :n-Beziehungen?
Antwort: :n-Beziehungen sind wichtig, da sie häufig vorkommen, und SMALLTALK ermöglicht die flexible Gestaltung von :n-Beziehungen über Zwischenobjekte. Dadurch können komplexe Beziehungen in SMALLTALK effizient umgesetzt werden.
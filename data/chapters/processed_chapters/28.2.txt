28.2 Typen als Schnittstellenspezifikationen von Klassen

Eine Klasse liefert eine Implementierung. Nach gängigen Prinzipien der objektorientierten Programmierung sind Implementierungen jedoch hinter Schnittstellen (oder Interfaces) zu verbergen: Nur die Elemente einer Klassendefinition, die für Benutzer einer Klasse zur Verwendung gedacht sind, sollen durch die Schnittstelle nach außen getragen werden – der Rest soll verborgen bleiben (das sog. Geheimnisprinzip).
In Programmiersprachen wie JAVA, C++, usw. gibt es spezielle Schlüsselwörter, die einem Element einer Klassendefinition (beispielsweise einer Methode) vorangestellt seine Zugreifbarkeit festlegen. Diese sogenannten Zugriffsmodifikatoren (engl. access modifier) legen gemeinsam mit der Klassendefinition, die ihre vollständige Implementierung beinhaltet, auch die Schnittstelle der Klasse fest. Je nach Sprache ist diese Schnittstelle für alle Benutzer der Klasse gleich oder unterscheidet sich nach Lokalität oder anderen Eigenschaften von benutzender und benutzter Klasse. Im ersten Fall könnte man von einer absoluten Schnittstelle sprechen; um sie zu spezifizieren, reicht es, zwischen sichtbar und unsichtbar zu unterscheiden. Im zweiten Fall ist die Schnittstelle relativ.
Eine absolut spezifizierte Schnittstelle einer Klasse kommt, wenn sie wirklich keinerlei Implementierungsgeheimnisse verrät, einem Typ gleich. Sie besteht nämlich nur aus Deklarationen von Methoden. Die gemachte Einschränkung ist notwendig, weil manche Sprachen, so z. B. JAVA und C++, die Instanzvariablen ihrer Objekte in die Schnittstelle der Klassen aufzunehmen erlauben. Mit den Instanzvariablen wird jedoch die Repräsentation der Objekte nach außen sichtbar, was dem Gedanken des Geheimnisprinzips widerspricht.
Wenn man nun eine Variable mit einem solchen die Schnittstelle repräsentierenden Typ deklariert und eine Typprüfung erfolgreich durchgeführt hat, dann ist sichergestellt, dass über diese Variable nur auf die Elemente einer Klasse zugegriffen wird, die auch Bestandteil des Interfaces der Klasse sind. Wenn jede Instanz dieser Klasse ausschließlich über typisierte Variablen ansprechbar ist, ist damit die Wahrung des Geheimnisprinzips garantiert. Typen dienen damit einem weiteren Zweck, den man zunächst einmal nicht mit ihnen assoziieren würde, nämlich der Wahrung des Implementationsgeheimnisses und Einhaltung der Schnittstellen durch den Compiler. Dieser überaus nützliche Zusammenhang zwischen Klassen, ihren Schnittstellen und Typen wurde erst relativ spät, nämlich mit der Programmiersprache JAVA und ihrem Interface-als-Typ-Konzept, so weiterentwickelt, dass eine Klasse verschiedene Schnittstellen anbieten kann, die alle zugleich Typen der Klasse (außer: Supertypen des der Klasse entsprechenden Typs) sind. Die damit ermöglichte interfacebasierte Programmierung, die in Kurs 01853 ausführlich behandelt wird, betrachte ich persönlich als den wichtigsten Beitrag JAVAs zur Disziplin der objektorientierten Programmierung (s. a. Kurseinheit 4, Kapitel 45).

Frage: Warum ist es nach den Prinzipien der objektorientierten Programmierung wichtig, Implementierungen von Klassen hinter Schnittstellen zu verbergen?
Antwort: Das Verbergen von Implementierungen hinter Schnittstellen ist wichtig, um das Geheimnisprinzip zu wahren und sicherzustellen, dass nur die für Benutzer einer Klasse vorgesehenen Elemente sichtbar sind.

Frage: Welche Rolle spielen Zugriffsmodifikatoren in Programmiersprachen wie JAVA und C++ bei der Festlegung der Schnittstelle einer Klasse?
Antwort: Zugriffsmodifikatoren legen fest, welche Elemente einer Klassendefinition für Benutzer sichtbar sind und somit die Schnittstelle der Klasse beeinflussen. Sie regeln die Zugriffsberechtigungen auf Methoden und Instanzvariablen.

Frage: Was ist der Unterschied zwischen einer absoluten und einer relativ spezifizierten Schnittstelle einer Klasse?
Antwort: Eine absolute Schnittstelle verrät keinerlei Implementierungsdetails und besteht nur aus Methodendeklarationen. Eine relative Schnittstelle kann sich je nach Lokalität oder anderen Eigenschaften von benutzender und benutzter Klasse unterscheiden und gibt mehr Einblicke in die Implementierung.

Frage: Warum beschränken einige Sprachen, wie JAVA und C++, die Instanzvariablen ihrer Klassen in der Schnittstelle?
Antwort: Das Beschränken von Instanzvariablen in der Schnittstelle dient dazu, die Repräsentation der Objekte nach außen nicht sichtbar zu machen, um das Geheimnisprinzip zu wahren und Implementierungsdetails zu verbergen.

Frage: Wie gewährleistet die Verwendung von Typen die Wahrung des Geheimnisprinzips und die Einhaltung von Schnittstellen in der objektorientierten Programmierung?
Antwort: Die Verwendung von Typen stellt sicher, dass über Variablen nur auf die Elemente einer Klasse zugegriffen wird, die Teil der Schnittstelle sind. Dadurch wird das Geheimnisprinzip gewahrt, und die Einhaltung von Schnittstellen wird durch den Compiler sichergestellt.

Frage: Was ermöglicht das Interface-als-Typ-Konzept in JAVA, und warum wird es als bedeutend für die objektorientierte Programmierung angesehen?
Antwort: Das Interface-als-Typ-Konzept in JAVA ermöglicht es, dass eine Klasse verschiedene Schnittstellen anbieten kann, die alle als Typen der Klasse dienen. Dies erleichtert die interfacebasierte Programmierung und wird als einer der wichtigsten Beiträge von JAVA zur objektorientierten Programmierung angesehen.
26.4 Inklusionspolymorphie

Ein von Christopher Strachey, einem der Urväter der Programmierung als wissenschaftliche Disziplin, eingeführter Begriff ist der der Polymorphie. Polymorphie bedeutet allgemein Vielgestaltigkeit und wird vor allem in der Biologie verwendet. In der Programmierung steht er für verschiedene Dinge, die jedoch alle mit Typen zu tun haben. Unter Inklusionspolymorphie, auch Subtyp-Polymorphie genannt, versteht man im Wesentlichen dasselbe wie unter Subtyping: Wo Objekte eines Typs erwartet werden, können Objekte anderer Typen erscheinen, weil der erste Typ die anderen subsumiert (inkludiert). Der Begriff ist vor allem in Abgrenzung zum parametrischen Polymorphismus (engl. parametric polymorphism, s. Kapitel 29) gebräuchlich; sonst redet man eher von Subtyping. Das Interessante an der Inklusionspolymorphie ist, dass sich der Wertebereich von Typen dadurch auf unvorhergesehene Umfänge aufweiten lässt. Dies ist insbesondere für die Weiterentwicklung und Wiederverwendung von Programmen interessant, bei der einfach neue Typen hinzugefügt werden können, die anstelle bereits existierender eingesetzt werden können, ohne dass dazu am Programm sonst etwas geändert werden müsste. Die Regeln einer strengen Typprüfung werden durch Inklusionspolymorphie aufgelockert, ohne an Typsicherheit zu verlieren. Insgesamt krankt die Definition des Subtypings und der Inklusionspolymorphie in der objektorientierten Programmierung jedoch daran, dass nicht klar definiert ist, was alles zu verlangen ist, damit ein Objekt eines Typs tatsächlich auch da auftauchen kann, wo ein Objekt eines anderen Typs erwartet wird. Zwar gibt die Regel von Ko- und Kontravarianz eine klare Bedingung vor, aber wie Sie schon gesehen haben, ist diese Bedingung aus praktischen Gründen nicht unumstritten. Dazu kommt, dass die Regel einerseits gar nicht ausreicht, um Ersetzbarkeit zu garantieren, und andererseits zu streng ist (s. Kurseinheit 6, Kapitel 54). Da Ersetzbarkeit jedoch der Definition des Subtypenbegriffs zugrunde liegt, bleibt das Ganze schwammig. In dieser Kurseinheit habe ich mich, den meisten gängigen objektorientierten Programmiersprachen folgend, darauf zurückgezogen, zu garantieren, dass keine Typfehler auftreten können, also keine Fehler der Art, dass eine bestimmte geforderte Eigenschaft (Methode) bei einem Objekt nicht vorhanden ist; alles weitere wird dann in Kapitel 54 behandelt.

Frage: Was ist Inklusionspolymorphie?
Antwort: Inklusionspolymorphie, auch als Subtyp-Polymorphie bezeichnet, bedeutet, dass Objekte eines bestimmten Typs an Stellen erwartet werden können, an denen Objekte anderer Typen verwendet werden können, wenn der erste Typ die anderen Typen einschließt oder subsumiert.

Frage: Wie steht Inklusionspolymorphie in Beziehung zum Subtyping?
Antwort: Inklusionspolymorphie und Subtyping sind im Wesentlichen dasselbe Konzept. Beide Begriffe beschreiben, wie Objekte eines Subtyps anstelle ihres Supertyps verwendet werden können.

Frage: Warum ist Inklusionspolymorphie interessant?
Antwort: Inklusionspolymorphie ermöglicht die Erweiterung des Wertebereichs von Typen, indem neue Typen hinzugefügt werden können, die anstelle bereits existierender Typen verwendet werden können, ohne dass am Programm sonst etwas geändert werden muss. Dies ist besonders nützlich für die Weiterentwicklung und Wiederverwendung von Programmen.

Frage: Welche Probleme gibt es in Bezug auf die Definition von Subtyping und Inklusionspolymorphie in der objektorientierten Programmierung?
Antwort: Die Definition von Subtyping und Inklusionspolymorphie in der objektorientierten Programmierung ist unklar, insbesondere in Bezug darauf, was erforderlich ist, damit ein Objekt eines Typs tatsächlich an Stellen verwendet werden kann, an denen ein Objekt eines anderen Typs erwartet wird. Die Regeln von Ko- und Kontravarianz geben zwar klare Bedingungen vor, sind aber in der Praxis umstritten und reichen nicht immer aus, um Ersetzbarkeit sicherzustellen. Dies führt zu Unsicherheiten in der Definition des Subtypenbegriffs.
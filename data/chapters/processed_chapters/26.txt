26 Subtyping und Inklusionspolymorphie

Die Einführung von Typäquivalenz und Typkonformität bezog sich bislang lediglich auf das Verhältnis der Typdefinitionen, also der Intensionen der Typen. Die Frage des Zusammenhangs der Wertebereiche der Typen, also der Extensionen, ist dabei unberücksichtigt geblieben. Wenn aber die obige Definition von Typkorrektheit weiter Bestand haben soll, dann müssen die Werte zuweisungskompatibler Typen zum Wertebereich des Typen, an den zugewiesen werden soll, gehören. Zur Erinnerung: Typannotationen stellen Invarianten dar, die die möglichen Werte einer Variable beschränken. Diese Invarianten dürfen durch Zuweisungen nicht verletzt werden. Wenn man aber nun Zuweisungen von einem anderen Typen zulässt, dann wird die Typkorrektheit nur dann nicht verletzt, wenn der Wertebereich des anderen Typen (seine Extension) in dem desjenigen, dem zugewiesen wird, enthalten (inkludiert) ist. Mit anderen Worten: Damit eine Zuweisung a := b, bei der sich die Typen von a und b unterscheiden, zulässig ist, muss die Extension des Typs von b eine Teilmenge der Extension des Typs von a sein. Im Fall der Typerweiterung ist dies nicht automatisch der Fall.
Auch nicht selbstverständlich ist die Teilmengenbeziehung bei der Typeinschränkung: Durch das Weglassen von Eigenschaften (Methoden) wird die Extension, also die Menge der Werte (Objekte), die darunter fallen, eher größer denn kleiner — je weniger spezifisch die Menge der geforderten Eigenschaften ist, desto mehr Objekte fallen darunter. Die sich daraus ergebende Teilmengebeziehung wäre also eher umgekehrt (die Extension des einschränkenden Typs enthält die des eingeschränkten). Etwas anders sieht es aus, wenn durch Typeinschränkung (Redefinition) die Ein- oder Rückgabetypen von Methoden beschränkt werden: Die Menge der Zeichnungen ist eine Teilmenge der Menge der Dokumente, auch weil sich Zeichnungen eben nur auf Plottern ausgeben lassen. Die Zuweisungskompatibilität von Zeichnung mit Dokument wäre also, was die Inklusion der Extensionen angeht, kein Problem. Man könnte nun die Typerweiterung unter oben gemachter Einschränkung und die zweite Form der Typeinschränkung als in dieselbe Richtung zielende Maßnahmen ansehen: Beide schränken Extensionen ein. Das lässt sich wie folgt erklären: Wenn man einer Menge von Objekten, die durch eine Anzahl Attribute alle gleichermaßen charakterisiert werden, weitere Attribute beimisst, dann schränkt man diese Menge ein, wenn die hinzugefügten Attribute nicht alle Objekte der Menge charakterisieren. Wenn man beispielsweise wie oben geschehen die Attributmenge des Typs Dokument um die Methode zeilen ^ <Collection> erweitert, dann fallen die Zeichnungen aus der durch Dokument beschriebenen Menge von Objekten heraus, weil sie keine Zeilen haben. Alternativ könnte man auch sagen, dass Dokumente grundsätzlich über Zeilen verfügen können, diese aber bei Zeichnungen immer in der Anzahl erscheint das weniger natürlich. 51 Man beachte die Parallelität zum Begriff der Spezialisierung (Abschnitt 9.2 in Kurseinheit 2): Der durch Typerweiterung oder -einschränkung aus Dokument hervorgegangene Typ Zeichnung ist spezieller als seine Vorlage. Nun ergibt sich aber gemäß obigem Beispiel (Zeilen 900–902) ein Sachverhalt, der trotz aller Harmonie von Typerweiterung und -einschränkung nicht weniger als den Verlust der Zuweisungskompatibilität bedeutet. Dieser resultiert jedoch bei genauerer Betrachtung nicht daraus, dass Zeichnungen keine Dokumente wären, sondern aus der mit der Typkorrektheit verbundenen, impliziten Allquantifiziertheit von Typinvarianten: Eine Methodendeklaration im Protokoll eines Typs Dokument wird nämlich interpretiert als „druckenAuf: ist definiert für alle Empfängerobjekte vom Typ Dokument und Parameterobjekte vom Typ Drucker“, was aber in dieser Allgemeinheit sachlich falsch ist. Typsysteme mit Typinvarianten der hier vorgestellten Art sind nicht in der Lage, andere als implizit allquantifizierte Aussagen über Wertebereiche zu treffen. Dies ist gewissermaßen der Preis der Einfachheit. Abhilfe schaffen neuere Typsysteme wie die Idee von den Dependent types, wie sie beispielsweise in SCALA zum Einsatz kommen: Hier kann man sich die Parametertypen von Methoden als Funktionen des Typs, zu dem die Methode gehört, vorstellen. Der Parametertyp von druckenAuf: aus obigem Beispiel wäre dann, in Abhängigkeit davon, ob die Methode auf einem Objekt vom Typ Dokument oder Zeichnung aufgerufen wird, Drucker oder Plotter. Wie man sich leicht vorstellen kann, ist die statische Prüfung solcher Bedingungen (Invarianz) aber nicht so einfach. Die Vereinigung von Typerweiterung und Typeinschränkung mit Zuweisungskompatibilität und der daraus folgenden Typkorrektheit bietet der Begriff des Subtyps.

Frage: Wie ist die Beziehung zwischen Typäquivalenz und Typkonformität auf der einen Seite und den Wertebereichen (Extensionen) von Typen auf der anderen Seite?
Antwort: Damit Typkorrektheit erhalten bleibt, müssen die Wertebereiche von Typen in Bezug auf Zuweisungen miteinander in Beziehung stehen. Wenn ein Objekt eines Typs einem Objekt eines anderen Typs zugewiesen werden soll, muss die Extension des zweiten Typs eine Teilmenge der Extension des ersten Typs sein.

Frage: Was bedeutet es, wenn die Extension eines Typs in der Extension eines anderen Typs enthalten ist?
Antwort: Wenn die Extension eines Typs in der Extension eines anderen Typs enthalten ist, bedeutet dies, dass Objekte des ersten Typs an Stellen verwendet werden können, an denen Objekte des zweiten Typs erwartet werden, ohne die Typkorrektheit zu verletzen.

Frage: Warum ist die Teilmengenbeziehung bei der Typeinschränkung nicht immer offensichtlich?
Antwort: Bei der Typeinschränkung, bei der Eigenschaften (Methoden) entfernt werden, kann die Extension des eingeschränkten Typs tatsächlich größer werden, da weniger spezifische Anforderungen gestellt werden. Dies kann zu einer scheinbaren Umkehrung der Teilmengenbeziehung führen.

Frage: Wie kann die Einschränkung von Ein- oder Rückgabetypen von Methoden die Zuweisungskompatibilität beeinflussen?
Antwort: Die Einschränkung von Ein- oder Rückgabetypen von Methoden kann die Zuweisungskompatibilität beeinflussen, indem sie sicherstellt, dass die Extension des eingeschränkten Typs eine Teilmenge der Extension des einschränkenden Typs ist. Dies kann dazu beitragen, die Typkorrektheit von Zuweisungen zu gewährleisten.

Frage: Warum kann es trotz der Harmonie von Typerweiterung und -einschränkung zu einem Verlust der Zuweisungskompatibilität kommen?
Antwort: Der Verlust der Zuweisungskompatibilität kann aus der impliziten Allquantifiziertheit von Typinvarianten resultieren. Typsysteme mit solchen Invarianten sind nicht in der Lage, Aussagen über Wertebereiche zu treffen, die nicht implizit allquantifiziert sind.

Frage: Was bietet der Begriff des Subtyps als Lösung für diese Probleme?
Antwort: Der Begriff des Subtyps bietet eine Möglichkeit, Typerweiterung und Typeinschränkung mit Zuweisungskompatibilität und Typkorrektheit zu vereinen. Ein Subtyp ist ein Typ, dessen Extension eine Teilmenge der Extension seines Supertyps ist, was sicherstellt, dass Objekte des Subtyps an Stellen verwendet werden können, an denen Objekte des Supertyps erwartet werden.
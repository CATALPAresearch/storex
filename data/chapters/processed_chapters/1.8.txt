1.8 Aliasing

Während es für Variablen charakteristisch ist, dass sich ihr Wert ändern kann, so sieht SMALLTALK dennoch einige vor, für die das nicht der Fall ist. Hier sind vor allem die Variablen mit den Namen "true", "false" und "nil" zu nennen, die auf Objekte entsprechender Bedeutung verweisen.8 Für diese Variablen ist die Zuweisung nicht zulässig.
Eine ganze Reihe weiterer Variablen kann zwar ihren Wert ändern (also zu unterschiedlichen Zeiten auf verschiedene Objekte verweisen), jedoch erhalten sie ihren Wert vom System; auch diesen kann durch den Zuweisungsoperator := kein Wert zugewiesen werden. Dies sind z. B. die Variablen mit den Namen "self" und "super", sowie alle formalen Parameter von Methoden (siehe Abschnitt 4.3). Nicht zuletzt sind auch alle Klassennamen (siehe Kurseinheit 2) Variablen, denen man als Programmierer nichts explizit zuweisen kann. All diese Variablen werden in SMALLTALK einheitlich Pseudovariablen genannt.
Wenn Variablen keine Objekte enthalten, sondern lediglich auf sie verweisen, wenn sie also Verweissemantik haben, ist es möglich, dass mehrere Variablen gleichzeitig dasselbe Objekt benennen. Das nennt man Aliasing. Das Aliasing ist eines der wichtigsten Phänomene der objektorientierten Programmierung; zugleich ist es leider nur wenig als solches bekannt. Versuchen Sie trotzdem, es sich stets bewusst zu machen — es wird Sie vor manch böser Überraschung bewahren.
Aliase, also weitere Namen für ein bereits benanntes Objekt, entstehen immer bei der Zuweisung. Dazu ist es notwendig, dass die Variable auf der linken Seite Verweissemantik hat. Da in SMALLTALK die Semantik von Variablen nicht mit der Variablendeklaration (siehe Kapitel 19) festgelegt wird, sondern von der Art eines Objekts abhängt, ist nicht immer klar, bei welcher Zuweisung ein Alias entsteht. Dabei kann beides, die fälschliche Annahme von Verweissemantik bei tatsächlicher Wertsemantik und die Entstehung von Aliasen, zu erheblichen (und schwer zu findenden) Programmierfehlern führen.
Nach den beiden Zuweisungen hat das eine Objekt, das der Compiler für #Smalltalk erzeugt, zwei Namen, nämlich x und y.
Das Aliasing ist zunächst erwünscht: Da jedes Objekt nur einmal im Speicher hinterlegt werden muss, ermöglicht es die extrem effiziente Informationsverarbeitung (es ist weder ein Kopieren notwendig, wenn ein Objekt weitergereicht werden soll, noch müssen die Änderungen an den verschiedenen Kopien zusammengeführt werden, die notwendig sind, wenn die Kopien immer noch dasselbe logische Objekt bezeichnen sollen). Doch diese Effizienz hat ihren Preis.
Dass die Veränderung des durch eine Variable bezeichneten Objekts zugleich die Veränderung der durch all seine Aliase bezeichneten Objekte (die ja alle dieselben sind) bewirkt, kann nämlich unerwünscht sein und zu einem Programmierfehler führen. So könnte man beispielsweise bei den beiden Zuweisungen lediglich bezwecken wollen, dass Peter und Paul zuerst gleich heißen, z. B. weil sie Geschwister sind. Bei einer späteren Promotion von Paula fügt sie die Zeichen $D, $r und $. in den ihren Nachnamen repräsentierenden String ein, ändert also das entsprechende Objekt. Man hat nun sicher nicht beabsichtigt, dass das auch petersNachname betrifft, aber wenn die Änderung an einer weit entfernten Stelle im Programm erfolgt, ist die Identität der von petersNachname und paulasNachname benannten Objekte nicht mehr offensichtlich. Tatsächlich hat man es dann mit einem recht subtilen und schwer zu findenden Programmierfehler zu tun. Deswegen (und aufgrund etwas überzeugenderer Beispiele, die zu verwenden aber noch mehr Vorbereitung bedarf), sind in einigen SMALLTALK-Systemen alle auf Basis literaler Repräsentationen erzeugten Objekte als unveränderlich markiert (wenn Sie es nicht schon, wie beispielsweise Zahlen, von Haus aus sind), so dass Programmierfehler dieser Art vermieden werden. Sollte wie im obigen Beispiel eine Zuweisung mit Wertsemantik benötigt werden, so schreibt man statt Zeile 28 in SMALLTALK einfach x := petersNachname copy.
Dabei sorgt das hintangestellte "copy" dafür, dass von dem Objekt, das durch petersNachname bezeichnet wird, eine Kopie angefertigt wird, also ein neues Objekt, das dem alten gleicht (mehr zur Syntax und dazu, wofür "copy" steht, folgt unten). Nicht nötig wird das Kopieren, wenn ich die Änderung durch die Zuweisung eines neuen Objekts be-werkstellige, wie das beispielsweise in Beispiel 1.20 oder gar x := "Peter Doe" der Fall ist (wobei das Komma hier für die String-Konkatenation steht).
Fehler dieser Art sind häufig die Folge dessen, dass sich eine Programmiererin der aliasbildenden Wirkung der Zuweisung nicht bewusst war. Das ist insbesondere bei den Programmiererinnen der Fall, die nicht mit der objektorientierten Programmierung großgeworden sind, die insbesondere bei einer Zuweisung "y := x" das Kopieren des Inhalts der Variablen auf der rechten Seite (x) vermuten. Tatsächlich muss man in anderen Sprachen (wie beispielsweise PASCAL oder C) eine Variable explizit als Pointervariable deklarieren, um einen Alias bilden zu können. In SMALLTALK, genau wie in JAVA und C#, ist Aliasing jedoch der Regelfall und Kopie die Ausnahme. Wer das nicht verinnerlicht hat, schreibt höchstens zufällig korrekte Programme.

Frage: Was versteht man unter dem Begriff "Aliasing" in der objektorientierten Programmierung?
Antwort: Aliasing bezieht sich auf die Situation, in der mehrere Variablen gleichzeitig auf dasselbe Objekt verweisen. Das bedeutet, dass ein Objekt mehrere Namen (Aliase) haben kann.

Frage: Warum kann Aliasing in der objektorientierten Programmierung zu Programmierfehlern führen?
Antwort: Aliasing kann zu Programmierfehlern führen, weil Änderungen an einem Objekt, das durch eine Variable bezeichnet wird, sich auf alle Aliase dieses Objekts auswirken. Unerwartete Veränderungen an einem Alias können schwer zu erkennen und zu debuggen sein.

Frage: In welchem Zusammenhang wird Aliasing in SMALLTALK erklärt?
Antwort: Der Abschnitt erklärt Aliasing im Kontext von SMALLTALK und wie Variablen in SMALLTALK standardmäßig Verweissemantik haben, was dazu führt, dass Aliasing häufig vorkommt.

Frage: Warum kann das Aliasing in SMALLTALK sowohl erwünscht als auch unerwünscht sein?
Antwort: Aliasing ist zunächst erwünscht, da es die Effizienz der Informationsverarbeitung erhöht. Es ermöglicht das Teilen von Objekten ohne Kopieren. Allerdings kann Aliasing auch unerwünscht sein, wenn unerwartete Seiteneffekte auftreten, die schwer zu erkennen sind.

Frage: Wie kann man in SMALLTALK verhindern, dass Aliasing zu unerwünschten Seiteneffekten führt?
Antwort: In einigen SMALLTALK-Systemen werden auf Basis literaler Repräsentationen erzeugte Objekte als unveränderlich markiert, um Programmierfehler durch unerwartetes Aliasing zu vermeiden. Wenn eine Zuweisung mit Wertsemantik benötigt wird, kann das Kopieren des Objekts verwendet werden.

Frage: Welche Schlüsselwörter oder Techniken werden in SMALLTALK verwendet, um das Kopieren eines Objekts anzufordern?
Antwort: In SMALLTALK kann das Schlüsselwort "copy" verwendet werden, um von einem Objekt eine Kopie anzufertigen, anstatt eine Referenz auf dasselbe Objekt zu erstellen. Dies verhindert Aliasing.

Frage: Warum ist es wichtig, sich der aliasbildenden Wirkung der Zuweisung bewusst zu sein?
Antwort: Es ist wichtig, sich der aliasbildenden Wirkung der Zuweisung bewusst zu sein, da dies in Sprachen wie SMALLTALK die Standardverhalten ist. Programmierer sollten verstehen, dass Änderungen an einem Alias alle Aliase desselben Objekts betreffen können, was zu schwer zu findenden Programmierfehlern führen kann.
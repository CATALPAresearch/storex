1 Objekte

In rein objektorientierten Programmiersprachen sind sämtliche Daten, die ein Programm verarbeiten kann, in Form von Objekten im Speicher abgelegt. Der Reiz dieses Merkmals der objektorientierten Programmierung ist, dass unser Weltbild, zumindest in weiten Teilen, auf einem ähnlichen Modell basiert: Die Welt besteht aus Objekten, die miteinander in Beziehung stehen. Dabei ist der Objektbegriff nicht auf das rein Materielle beschränkt: Nach allgemeinem Verständnis sind Personen ebenso Objekte wie Dokumente, Zahlen oder Zeichen.
Bei der Übertragung von realen (d. h., aus einer Anwendungsdomäne stammenden) Sachverhalten in ein objektorientiertes Programm ergibt sich das Problem, dass die Übertragung, aufgrund der Homogenität der Objektorientierung (alles ist ein Objekt), gewisse fundamentale Unterschiedlichkeiten der Kategorien unserer Begriffswelt ignoriert: Zahlen beispielsweise sind im Gegensatz zu Dingen Objekte ohne Identität, Zustand oder Lebensdauer (sie werden daher auch häufig als Werte bezeichnet); Mengen sind nicht weiter abgrenzbare Elemente wie z. B. 1 Liter Wasser, die gar keine Objekte im eigentlichen Sinn haben (auch sie haben keine Identität) usw. Gleichwohl kommen sie alle in objektorientierten Programmen vor und werden dort — zumindest der reinen Lehre nach — durch Objekte repräsentiert. Der Ansatz, alles trotz evidenter ontologischer Unterschiede programmiersprachlich über einen Kamm zu scheren, führt hier und da zu gewissen Inkonsistenzen im ansonsten klaren, ja puristischen objektorientierten Weltbild, mit denen wir leben müssen, wenn wir objektorientiert programmieren wollen (vgl. dazu auch Kapitel 60 in Kurseinheit 6). Es ist dies der Preis des auch als "Ockhams Rasiermesser" bekannten Sparsamkeitsprinzips, das auch für die objektorientierte Programmierung Leitlinie ist.
Wie bereits erwähnt, sind Objekte im Speicher abgelegte Daten. Dabei ist jedes Objekt an genau einer Stelle im Speicher abgelegt: Es wird damit durch seine Speicherstelle eindeutig identifiziert. Aufgrund dieser eindeutigen Identifizierbarkeit spricht man auch von der Identität eines Objekts; sie kann aus technischer Sicht mit der Speicherstelle, an der das Objekt abgelegt ist, gleichgesetzt werden. Da keine zwei Objekte an derselben Stelle abgelegt werden können, haben auch keine zwei Objekte dieselbe Identität.
Objekte sind grundsätzlich von Werten zu unterscheiden. Werte werden auch im Speicher abgelegt, haben aber keine Identität. Es folgt, dass derselbe Wert an verschiedenen Stellen im Speicher vorkommen kann. Viele objektorientierte Programmiersprachen (wie etwa JAVA oder C#) unterscheiden ganz offen zwischen Werten und Objekten; SMALLTALK tut dies nur hinter den Kulissen und folgt ansonsten seinem Motto "alles ist ein Objekt".
Die Menge des Speichers, den ein Objekt belegt, ist aus technischen Gründen konstant. Objekte können somit weder wachsen noch schrumpfen. Sollte dies trotzdem notwendig sein, bleibt nur, ein neues Objekt zu erzeugen, das an die Stelle (nicht die Speicherstelle!) des anderen tritt. Das neue Objekt hat jedoch eine andere Identität, so dass alle Stellen im Programm, die sich auf das alte Objekt beziehen, entsprechend angepasst werden müssen. Wie das geht, wird in Kurseinheit 2, Abschnitt 14.2 erläutert.

Frage: Was sind Objekte in der objektorientierten Programmierung?
Antwort: Objekte sind in der objektorientierten Programmierung Daten, die im Speicher abgelegt sind und in der Lage sind, Informationen zu speichern und Aktionen auszuführen. Sie repräsentieren Dinge aus der realen Welt und können miteinander in Beziehung stehen.

Frage: Warum gibt es in der objektorientierten Programmierung gewisse Inkonsistenzen bei der Repräsentation von Sachverhalten?
Antwort: In der objektorientierten Programmierung werden verschiedene Arten von Sachverhalten, die in der realen Welt unterschiedliche Eigenschaften haben, oft durch Objekte repräsentiert. Dies kann zu Inkonsistenzen führen, da nicht alle Sachverhalte dieselben Eigenschaften wie Objekte haben. Dies ist auf die homogene Natur der Objektorientierung zurückzuführen.

Frage: Was ist der Unterschied zwischen einem Objekt und einem Wert in der Programmierung?
Antwort: Objekte haben eine eindeutige Identität und sind an einer bestimmten Stelle im Speicher abgelegt, während Werte im Speicher abgelegt sind, aber keine Identität haben. Mehrere Variablen können auf denselben Wert zeigen, während keine zwei Objekte dieselbe Identität haben können.

Frage: Warum ist die Unterscheidung zwischen Objekten und Werten in einigen objektorientierten Programmiersprachen wichtig?
Antwort: Die Unterscheidung zwischen Objekten und Werten ist wichtig, um die Verwendung und den Speicherbedarf von Daten effizient zu steuern. In einigen Programmiersprachen können Operationen auf Werten optimiert werden, da sie keine Identität haben und somit gleichwertig sind. Objekte hingegen haben eine eindeutige Identität, was bestimmte Operationen und Vergleiche komplexer macht.

Frage: Was bedeutet es, dass Objekte im Speicher eine konstante Größe haben?
Antwort: Objekte im Speicher haben eine feste Größe, die aus technischen Gründen nicht verändert werden kann. Wenn ein Objekt mehr Platz benötigt oder verkleinert werden muss, muss ein neues Objekt erzeugt werden, das an die Stelle des alten tritt. Dieses neue Objekt hat jedoch eine andere Identität, was Änderungen im Programm erfordern kann.

Frage: Warum sagt man, dass in SMALLTALK "alles ein Objekt" ist?
Antwort: In SMALLTALK werden alle Daten als Objekte repräsentiert, unabhängig davon, ob es sich um Werte oder um komplexe Entitäten handelt. Dies ist Teil des objektorientierten Paradigmas von SMALLTALK, bei dem alles in Objekten organisiert ist.
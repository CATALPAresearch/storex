39.2 Abhängigkeiten zwischen Modulen

Die Aufteilung eines Programms in Module dient vor allem dem Zweck der unabhängigen Entwicklung der Programmteile. Damit dies erreicht wird, muss die Abhängigkeit der Module möglichst gering ausfallen. Dabei bedeutet Abhängigkeit in der Regel Änderungsabhängigkeit: Wenn sich in einem Teil etwas ändert, muss sich auch im davon abhängigen Teil etwas ändern. Sie ergibt sich regelmäßig aus einer Benutzungsbeziehung. In der objektorientierten Programmierung kommt jedoch noch die Vererbungsabhängigkeit hinzu. Module, die vollkommen unabhängig voneinander sind, sind ein Indikator dafür, dass man nicht ein Programm entwickelt, sondern mehrere. Wo keine Abhängigkeiten bestehen, gibt es auch kein Zusammenspiel.
Abhängigkeit ist eine gerichtete Beziehung: Dass A von B abhängt, heißt nicht, dass auch B von A abhängt. Und so manifestieren sich auch in den Klassen als Modulen der JAVA-Programmierung die zwei Richtungen von Abhängigkeit in zwei verschiedenen Formen: Dass eine Klasse von (der Schnittstelle) einer anderen abhängt, erkennt man daran, dass auf Objekte der anderen Klasse zugegriffen wird. Dies zeigt sich wiederum daran, dass Variablen des entsprechenden Typs deklariert werden und, sofern sich die andere Klasse in einem anderen Paket befindet, die Klasse oder sogar das ganze Paket importiert wird. Dass eine Klasse einige ihrer Member anderen zur Benutzung anbietet und diese dadurch von ihr abhängig werden können, erkennt man an der Verwendung von Zugriffsmodifikatoren, die nicht private sind, sowie an der Implementierung von Interfaces.
In JAVA sind zunächst zirkuläre Abhängigkeiten erlaubt. Insbesondere dürfen sich zwei Klassen (genauer: Kompilierungseinheiten) wechselseitig importieren. In der Softwareentwicklung ist dies jedoch verpönt, schon weil eine wechselseitige Abhängigkeit eine enge Kopplung dokumentiert, die zwischen Modulen grundsätzlich vermieden werden sollte. Für JAVA-Module (siehe unten) sind zirkuläre Abhängigkeiten daher verboten. Wenn Sie einmal in die Verlegenheit kommen sollten, selbst JAVA-Module zu definieren, werden Sie feststellen, dass dieses Verbot eine sehr sorgfältige Planung der Modularisierung erzwingt, was an sich schon von großem Wert ist.
Vererbungsabhängigkeiten zwischen Klassen, die in JAVA durch die Verwendung des Zugriffsmodifikators protected und der Annotation @Override zumindest angedeutet werden (mehr dazu in Kurseinheit 6, Kapitel 55), sind naturgemäß nicht zirkulär. Bei der Ausdehnung der Abhängigkeit von Klassen auf Pakete können jedoch auch zirkuläre Abhängigkeiten entstehen.

Frage: Warum ist die Aufteilung eines Programms in Module wichtig?
Antwort: Die Aufteilung eines Programms in Module ist wichtig, um die unabhängige Entwicklung von Programmteilen zu ermöglichen. Dadurch sollen Abhängigkeiten zwischen den Modulen minimiert werden, insbesondere in Bezug auf Änderungen.

Frage: Was bedeutet Abhängigkeit zwischen Modulen in der Programmierung?
Antwort: In der Programmierung bedeutet Abhängigkeit zwischen Modulen in der Regel Änderungsabhängigkeit. Wenn sich in einem Modul etwas ändert, kann dies Auswirkungen auf andere davon abhängige Module haben. Abhängigkeiten ergeben sich oft aus Benutzungsbeziehungen und können in der objektorientierten Programmierung auch Vererbungsabhängigkeiten einschließen.

Frage: Welche Formen von Abhängigkeiten gibt es in den Klassen als Modulen der JAVA-Programmierung?
Antwort: In den Klassen als Modulen der JAVA-Programmierung gibt es zwei Formen von Abhängigkeiten: Eine Klasse hängt von einer anderen ab, wenn auf Objekte der anderen Klasse zugegriffen wird. Dies zeigt sich durch die Deklaration von Variablen des entsprechenden Typs und gegebenenfalls durch das Importieren der Klasse oder des Pakets, in dem sich die andere Klasse befindet. Eine Klasse bietet einige ihrer Member zur Benutzung durch andere Klassen an und diese werden dadurch von ihr abhängig. Dies erkennt man an der Verwendung von Zugriffsmodifikatoren, die nicht privat sind, sowie an der Implementierung von Interfaces.

Frage: Sind zirkuläre Abhängigkeiten zwischen Klassen in JAVA erlaubt?
Antwort: Ja, zirkuläre Abhängigkeiten zwischen Klassen sind in JAVA zunächst erlaubt. Dies bedeutet, dass sich zwei Klassen wechselseitig importieren können. Jedoch wird dies in der Softwareentwicklung vermieden, da wechselseitige Abhängigkeiten eine enge Kopplung zwischen Modulen anzeigen, die vermieden werden sollte. Für JAVA-Module sind zirkuläre Abhängigkeiten jedoch verboten.

Frage: Warum sind zirkuläre Abhängigkeiten in JAVA-Modulen verpönt?
Antwort: Zirkuläre Abhängigkeiten in JAVA-Modulen sind verpönt, da sie eine enge Kopplung zwischen Modulen dokumentieren und dies vermieden werden sollte. Das Verbot zirkulärer Abhängigkeiten erfordert eine sorgfältige Planung der Modularisierung, was generell von großem Wert ist.

Frage: Welche Arten von Abhängigkeiten können zwischen Klassen und Paketen in JAVA entstehen?
Antwort: In JAVA können Vererbungsabhängigkeiten zwischen Klassen auftreten, die nicht zirkulär sind. Bei der Ausdehnung der Abhängigkeiten auf Pakete können jedoch auch zirkuläre Abhängigkeiten zwischen Paketen entstehen.
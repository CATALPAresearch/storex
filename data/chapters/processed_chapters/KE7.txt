Kurseinheit 7: Objektorientierter Stil

Unabhängig davon, wie formal sie sind, sind Programmiersprachen Sprachen und ermöglichen es einer Autorin, sich auf eine persönliche Art und Weise auszudrücken. Die Ausdrucksweise bestimmt dabei nicht den Inhalt des Programms (seine Funktion), sondern seine Qualität. Zum Beispiel, wie effizient ein gegebenes Problem gelöst wird oder wie verständlich die Formulierung der Lösung für die Betrachterin ist. Besonders die Verständlichkeit hat viel mit Schreibstil zu tun, aber auch andere Faktoren spielen in Stilfragen eine Rolle, wie Mode und Ästhetik (Eleganz).
Es hat zweifellos in den letzten Jahrzehnten einen Wandel in Stilfragen gegeben, weg von einem mathematisch prägnanten Stil hin zu einem prosaisch-verbosen Stil.
Es handelt sich dabei um ein PASCAL-Programm zur Lösung des Problems der stabilen Heirat. Ein bedeutender Anteil aller Variablen in Programmen trägt oft den Namen "i". In diesem Beispiel sind die Variablen jedoch als "r", "m", "w" usw. benannt. Das grundlegende Problem bleibt jedoch dasselbe: Man muss sich vertieft in das Programm und den dazugehörigen Text einarbeiten, um zu verstehen, wofür die Variablen stehen.
Heute ist es üblich, Bezeichner (Namen für Module, Typen, Variablen, Prozeduren und Funktionen) in einem Programm so zu wählen, dass Kommentare zur Bedeutung der jeweiligen Programmelemente unnötig sind, da die Bezeichner ihre Bedeutung bereits im Kontext ausdrücken. Es wird sogar argumentiert, dass ein gut geschriebenes objektorientiertes Programm keine Kommentare benötigt. Trotzdem gibt es Fälle, in denen eine Lösung, auch wenn sie in ihrer verständlichsten Form vorliegt, weniger elegant ist als eine raffinierte Variante, die nicht jedem sofort ersichtlich ist. In solchen Situationen ist die Versuchung groß, die geistreichere Lösung zu wählen und sie mit einem erklärenden Kommentar zu versehen, für diejenigen Leserinnen, die nicht sofort folgen können. Einige der berühmtesten Algorithmen sind nicht offensichtlich und haben ihren Autoren zu Ruhm verholfen.

Frage: Welche Faktoren beeinflussen den Programmierstil in der Softwareentwicklung?
Antwort: Programmiersprachen ermöglichen es einer Autorin, sich auf eine persönliche Art und Weise auszudrücken. Die Qualität eines Programms wird nicht durch die Ausdrucksweise bestimmt, sondern durch Faktoren wie Effizienz und Verständlichkeit. Der Programmierstil, der sich ausdrückt, spielt eine entscheidende Rolle für die Verständlichkeit und Qualität eines Programms. Weitere Faktoren wie Mode und Ästhetik (Eleganz) können ebenfalls den Programmierstil beeinflussen.

Frage: Wie hat sich der Programmierstil im Laufe der Zeit entwickelt?
Antwort: In den letzten Jahrzehnten gab es einen Wandel im Programmierstil weg von einem mathematisch prägnanten Stil hin zu einem prosaisch-verbosen Stil. Früher wurden oft kurze und kryptische Bezeichner für Variablen verwendet, während heute der Trend zu aussagekräftigen und selbstdokumentierenden Bezeichnern geht. Ein Beispiel zeigt den Unterschied zwischen den beiden Stilen: Früher wurden Variablen oft als "i" bezeichnet, während heute aussagekräftigere Namen verwendet werden, die im Kontext ihre Bedeutung klar machen.

Frage: Warum ist es wichtig, aussagekräftige Bezeichner in Programmen zu verwenden?
Antwort: Die Verwendung von aussagekräftigen Bezeichnern in Programmen trägt zur Verständlichkeit des Codes bei. Gut gewählte Bezeichner drücken im Kontext ihre Bedeutung aus, sodass Kommentare zur Erklärung der Programmelemente oft unnötig werden. Dies erleichtert anderen Entwicklerinnen das Verständnis des Codes und erhöht die Lesbarkeit und Wartbarkeit des Programms.

Frage: Warum könnte es in einigen Fällen sinnvoll sein, eine geistreichere Lösung mit einem erklärenden Kommentar zu versehen?
Antwort: In einigen Fällen könnte eine Lösung, auch wenn sie in ihrer verständlichsten Form vorliegt, weniger elegant sein als eine raffinierte Variante, die nicht jedem sofort ersichtlich ist. In solchen Situationen kann die Versuchung groß sein, die geistreichere Lösung zu wählen und sie mit einem erklärenden Kommentar zu versehen, um sicherzustellen, dass auch weniger erfahrene Entwicklerinnen den Code nachvollziehen können. Dies ermöglicht es, komplexe Algorithmen oder unkonventionelle Ansätze zu dokumentieren und zu erläutern.
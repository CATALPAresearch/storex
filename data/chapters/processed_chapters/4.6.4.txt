4.6.4 Iteration über :n-Beziehungen

In :1-Beziehungen sendet man häufig Nachrichten an das Objekt, auf das die betreffende Variable verweist.
Wenn Sie dasselbe mit :n-Beziehungen tun möchten, erreicht die Nachricht – bei gleicher Vorgehensweise – nicht mehr die logisch in Beziehung stehenden Objekte, sondern das Zwischenobjekt, das die Beziehung selbst repräsentiert (das ja der Wert der Variable ist). Dieses Zwischenobjekt kann jedoch mit dieser Nachricht nichts anfangen. Um die Nachricht stattdessen an alle von diesem Zwischenobjekt referenzierten Objekte zu senden, verwendet man die Nachricht do: aBlock, wobei aBlock ein Block ist, der mit einem Parameter parametrisiert ist und der für jedes Element des Arrays genau einmal (mit dem Element als tatsächlichem Parameter) aufgerufen wird.
Man könnte sich fragen, warum die SMALLTALK-Syntax nicht erlaubt, die Nachricht direkt an das Zwischenobjekt zu senden, das die :n-Beziehung repräsentiert (zum Beispiel freunde einladen) und sie dann intern so umzusetzen, dass die Nachricht an alle Objekte gesendet wird. Der einfache Grund dafür wird sofort klar: Denn oft möchte man die Nachricht gar nicht an alle Objekte senden, sondern nur an ausgewählte, und es sind oft weitere Angaben erforderlich. Daher hätte ein solcher Ansatz im Allgemeinen keine Vorteile.
Basierend auf do: lassen sich nun zahlreiche weitere natürliche und äußerst praktische Steuerstrukturen erstellen. So ist es beispielsweise in vielen Fällen nicht erforderlich, die Nachricht an alle Elemente einer :n-Beziehung zu senden, sondern nur an solche, die bestimmte Kriterien erfüllen. Dazu kann man die Beziehung quasi "unterwegs" einschränken und den Block dann nur auf der eingeschränkten Menge ausführen:
Sie müssen Zeile 244 hier noch nicht vollständig verstehen; der Rest sollte Ihnen jedoch mittlerweile klar sein. answer ist eine temporäre Variable, die nur innerhalb der Methode Gültigkeit hat. In der Do-Schleife werden mit der Methode add: (eine Methode mit offensichtlicher Funktion) alle Elemente des Empfängers hinzugefügt, für die der Parameterblock aBlock zu true auswertet.
Auf ähnlich einfache Weise können nahezu beliebige weitere Steuerstrukturen implementiert werden. Als Ergänzung zu select: gibt es beispielsweise die Methode reject:, die aus einer :n-Beziehung alle Elemente entfernt, die eine angegebene Bedingung nicht erfüllen:
Es ist kaum zu glauben, wie einfach es ist, mit so wenig Aufwand eine neue Steuerstruktur hinzuzufügen.
Eine weitere nützliche Methode, die eine Sammlung von Objekten zurückgibt, über die dann (mittels do:) iteriert werden kann, ist collect:. Diese Methode sammelt alle Elemente, für die die Auswertung des ihr als Parameter übergebenen Blocks basierend auf den Elementen der ursprünglichen Sammlung Werte zurückgibt:
Aber Sie können auch einzelne Elemente einer Beziehung bestimmen. Zum Beispiel gibt detect: mit einem Block aBlock als Parameter das erste Element aus einer Sammlung von Elementen zurück, für das aBlock ausgewertet den Wahrheitswert true ergibt (wobei im Fehlen eines solchen Elements ein Fehler zurückgegeben wird). Dies ermöglicht es, Ausdrücke zu formulieren, die besagen, dass man sich mit dem ersten engen Freund, und nur mit diesem, trifft.

Frage: Wie sendet man Nachrichten an Objekte in :1-Beziehungen und :n-Beziehungen in SMALLTALK, und welche Methode wird für :n-Beziehungen verwendet?
Antwort: In :1-Beziehungen in SMALLTALK sendet man oft Nachrichten direkt an das Objekt, auf das die betreffende Variable verweist. Bei :n-Beziehungen erreicht die Nachricht jedoch nicht mehr die logisch in Beziehung stehenden Objekte, sondern das Zwischenobjekt, das die Beziehung selbst repräsentiert (der Wert der Variable). Um die Nachricht stattdessen an alle von diesem Zwischenobjekt referenzierten Objekte zu senden, verwendet man die Nachricht do: aBlock, wobei aBlock ein Block ist, der mit einem Parameter parametrisiert ist und der für jedes Element des Arrays genau einmal (mit dem Element als tatsächlichem Parameter) aufgerufen wird.

Frage: Warum erlaubt die SMALLTALK-Syntax nicht, die Nachricht direkt an das Zwischenobjekt in :n-Beziehungen zu senden und sie intern so umzusetzen, dass sie an alle Objekte gesendet wird?
Antwort: Der Grund, warum die SMALLTALK-Syntax nicht erlaubt, die Nachricht direkt an das Zwischenobjekt zu senden und sie dann intern umzusetzen, besteht darin, dass oft die Nachricht nicht an alle Objekte in der :n-Beziehung gesendet werden soll, sondern nur an bestimmte, und es können oft weitere Angaben erforderlich sein. Ein solcher Ansatz würde im Allgemeinen keine Vorteile bieten, da er nicht die erforderliche Flexibilität bieten würde.
52.5 Das Typsystem von EIFFEL

EIFFEL besitzt ein einheitliches Typsystem (keine separaten Referenz- und Werttypen) und unterscheidet auch nicht (wie JAVA) zwischen eingebauten Operatoren und von Programmiererinnen definierten Methoden: Die Operation + auf Integern beispielsweise ist (wie in SMALLTALK) nichts weiter als eine syntaktische Variante einer Methode "plus" definiert in einer Klasse "INTEGER" mit gleichem Parametertyp (EIFFEL verwendet per Konvention für Klassen und Typen vollständige Großschreibung; allerdings ist EIFFEL — wie PASCAL — nicht case-sensitive). Die Einheitlichkeit des Typsystems von EIFFEL geht dabei über die von C# insofern hinaus, als es keine an bestimmte Typkonstruktoren gebundene Unterscheidung von Wert- und Referenztypen gibt; gleichzeitig unterscheidet es sich aber von SMALLTALK (das sich zumindest dem Anschein nach vollständig auf Referenztypen festgelegt hat) insofern, als es auch Werttypen zulässt. Mehr dazu gleich.
Zu den prominentesten Eigenschaften des Typsystems von EIFFEL zählen: Mehrfachvererbung. Generizität (genauer: beschränkter parametrischer Polymorphismus; siehe Abschnitt 29.4 in Kurseinheit 3). Das Unterdrücken von Instanzvariablen und Methoden in Subklassen (Löschen von Methoden; siehe dazu auch Abschnitt 11.3 in Kurseinheit 1). Kovariante Redefinition, unterstützt durch sog. "verankerte Typen" (engl. "anchored types"; so gut wie ein Alleinstellungsmerkmal von EIFFEL).
In gewisser Weise kann man das Unterdrücken von Methoden eines Typs in seinen Subtypen in EIFFEL als einen Spezialfall der kovarianten Redefinition ansehen, nämlich einen, in dem die Menge der möglichen Parameterobjekte auf die leere Menge eingeschränkt wird, so dass es keinen gültigen Aufruf gibt (vgl. Kapitel in Kurseinheit 3). Auch sind die Probleme, die kovariante Redefinition und Unterdrückung verursachen, ähnlich. Deshalb beschränken wir uns bei der Motivation (der Erklärung, warum EIFFEL über diese Eigenschaften verfügt), auf ein Beispiel für kovariante Redefinition.

Frage: Welche Unterschiede gibt es im Typsystem von EIFFEL im Vergleich zu anderen Sprachen wie JAVA?
Antwort: Im Gegensatz zu JAVA besitzt EIFFEL ein einheitliches Typsystem, bei dem keine separaten Referenz- und Werttypen unterschieden werden. EIFFEL unterscheidet auch nicht zwischen eingebauten Operatoren und von Programmiererinnen definierten Methoden. Alle Operationen, einschließlich derer auf eingebauten Typen wie Integern, werden als Methoden behandelt.

Frage: Was ist ein herausragendes Merkmal des Typsystems von EIFFEL?
Antwort: Ein herausragendes Merkmal des Typsystems von EIFFEL ist die Unterstützung von Mehrfachvererbung, Generizität (beschränkter parametrischer Polymorphismus), das Unterdrücken von Instanzvariablen und Methoden in Subklassen (Löschen von Methoden), sowie kovariante Redefinitionen, die durch "verankerte Typen" ermöglicht werden.

Frage: Welche Bedeutung haben "verankerte Typen" im Kontext von kovarianten Redefinitionen in EIFFEL?
Antwort: "Verankerte Typen" (engl. "anchored types") spielen im Kontext von kovarianten Redefinitionen in EIFFEL eine wichtige Rolle. Sie ermöglichen es, die Kovarianz bei der Redefinition von Methoden zu unterstützen und sind eine besondere Eigenschaft von EIFFEL.

Frage: Was sind einige der Eigenschaften des Typsystems von EIFFEL?
Antwort: Einige der prominenten Eigenschaften des Typsystems von EIFFEL sind Mehrfachvererbung, Generizität (beschränkter parametrischer Polymorphismus), das Unterdrücken von Instanzvariablen und Methoden in Subklassen sowie die Unterstützung kovarianter Redefinitionen durch "verankerte Typen".
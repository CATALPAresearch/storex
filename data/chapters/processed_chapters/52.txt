52 EIFFEL

EIFFEL nimmt unter den hier behandelten Sprachen eine Sonderstellung ein. Es soll nämlich mehrere Dinge auf einmal sein: eine Sprache für objektorientierte Analyse und Design, eine Sprache für kommerzielle Programmierung und eine akademische Lehrsprache.
Das herausragende Merkmal, das EIFFEL zu dieser Multifunktion qualifiziert, ist die Integration von Zusicherungen (die Formulierung von Vorbedingungen, Nachbedingungen und Klasseninvarianten), die als Verträge zwischen dienstanbietenden und dienstnehmenden Klassen interpretiert werden können. Dies erlaubt, das "Was" einer Software zumindest teilweise unabhängig vom "Wie" zu spezifizieren. Die Typsysteme, die Sie in den vorangegangenen Kapiteln kennengelernt haben und von denen auch EIFFEL eines besitzt, erlauben zwar auch schon, Zusicherungen auszudrücken, aber diese beziehen sich jeweils auf die möglichen Werte einer Variable und bleiben dabei sowohl voneinander als auch von der Zeit unabhängig. EIFFEL erlaubt darüber hinaus, nahezu beliebige Bedingungen für Variablen- und Rückgabewerte von Methoden auszudrücken, die sowohl auf andere Werte als auch auf den zeitlichen Verlauf (vorher/nachher) Bezug nehmen können.
EIFFEL tritt in vielerlei Hinsicht in die Fußstapfen von PASCAL: Es ist nicht nur syntaktisch ähnlich, sondern ist auch um Sparsamkeit, Klarheit und Orthogonalität der Konzepte bemüht. Viele Dinge sind in EIFFEL ein klein bisschen anders als in anderen Sprachen, weswegen man meinen könnte, es sei aus Prinzip anders; die meisten Abweichungen sind jedoch wohlbegründet und vermitteln mitunter eine angenehm andere Perspektive auf vertraute Dinge. So ist es eigentlich nur folgerichtig, dass der Erschaffer von EIFFEL, BERTRAND MEYER, Nachfolger von NIKLAUS WIRTH auf dessen Lehrstuhl an der ETH Zürich wurde.
Es ist mir nicht ganz klar, warum EIFFEL kein größerer Erfolg beschieden ist. Es mag zum einen an der über Jahre absolut unzureichenden Implementierung der Werkzeuge liegen, insbesondere des Compilers. Anfangs wurde er noch nach C übersetzt, was beim Debuggen sicherlich keine Freude für Programmierende war. Zum anderen könnte es an der Natur von BERTRAND MEYER liegen, der sich mit seiner Kompromisslosigkeit nicht nur Freunde gemacht hat. Eine Rolle spielt sicherlich auch das unmögliche, aber trotzdem angestrebte Spagat zwischen kommerzieller Einsetzbarkeit und akademischer Eignung. Viele Programmierweisen, die in der Praxis üblich sind und auf die kaum eine Entwicklerin verzichten will, sind akademisch verpönt. Das Typsystem von EIFFEL trägt, wie Sie sich in Abschnitt 52.5 selbst vergewissern können, auch nicht unbedingt zur Akzeptanz bei. Auf der anderen Seite hat EIFFEL neben SMALLTALK noch am ehesten das Format und die Art, wie man über das Programmieren denkt, zu beeinflussen.

Frage: Welche Rolle nimmt EIFFEL unter den behandelten Sprachen ein?
Antwort: EIFFEL nimmt eine besondere Position unter den behandelten Sprachen ein, da es mehrere Funktionen erfüllt: Es dient als Sprache für objektorientierte Analyse und Design, für kommerzielle Programmierung und als akademische Lehrsprache.

Frage: Was ist das herausragende Merkmal von EIFFEL und wie trägt es zu seiner Multifunktion bei?
Antwort: Das herausragende Merkmal von EIFFEL ist die Integration von Zusicherungen (Vorbedingungen, Nachbedingungen und Klasseninvarianten), die als Verträge zwischen Klassen dienen können. Dies ermöglicht eine Spezifikation des "Was" einer Software unabhängig vom "Wie". Es erlaubt, nahezu beliebige Bedingungen für Variablen- und Rückgabewerte von Methoden auszudrücken, die sich auf andere Werte und den zeitlichen Verlauf beziehen können. Diese Funktion trägt zu seiner Multifunktion bei, da sie verschiedene Anwendungsbereiche unterstützt.

Frage: Welche Abweichungen gibt es in EIFFEL im Vergleich zu anderen Sprachen, und warum sind sie vorhanden?
Antwort: Obwohl EIFFEL syntaktisch Ähnlichkeiten zu anderen Sprachen wie PASCAL aufweist, gibt es einige Abweichungen. Diese Abweichungen sind jedoch gut begründet und bieten eine alternative Perspektive auf vertraute Konzepte. Sie tragen dazu bei, klarere und orthogonalere Konzepte zu schaffen.

Frage: Warum könnte EIFFEL trotz seiner Funktionen kein größerer Erfolg geworden sein?
Antwort: Es gibt mehrere mögliche Gründe für den begrenzten Erfolg von EIFFEL. Dies könnte auf unzureichende Implementierungen der Werkzeuge, die Kompromisslosigkeit des Schöpfers BERTRAND MEYER und den Spagat zwischen kommerzieller Anwendbarkeit und akademischer Eignung zurückzuführen sein. Auch das Typsystem von EIFFEL und akademische Vorbehalte gegenüber bestimmten Programmierweisen könnten eine Rolle spielen. Trotzdem hat EIFFEL Einfluss auf die Art und Weise, wie über das Programmieren nachgedacht wird.
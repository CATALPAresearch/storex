39.3 Die Module von JAVA 9

Als JAVA entworfen wurde, ging man wohl davon aus, dass ein Programm aus mehreren Klassen besteht, die alle zu einem Paket zusammengefasst werden können. Die Klassen eines Programms gewähren sich somit untereinander privilegierten Zugriff (alles, was nicht privat deklariert ist, ist zugreifbar), nach außen sind jedoch nur öffentlich deklarierte Programmelemente sichtbar.
Dieser Ansatz funktioniert jedoch in dem Moment nicht mehr, in dem Programme auf mehrere Pakete aufgeteilt werden. Wenn zwischen den Paketen nämlich Abhängigkeiten bestehen (was, wenn die Pakete zusammen ein Programm repräsentieren, naturgemäß der Fall ist), dann sind hierfür öffentliche Deklarationen erforderlich, die die so deklarierten Programmelemente jedoch für alle gleichermaßen sichtbar machen. Ein Programm kann also keine andere (eingeschränktere) öffentliche Schnittstelle haben als die Summe seiner Pakete.
Diese unbefriedigende Situation wurde von der JAVA-Community aufgegriffen, die mit der Open Services Gateway Initiative (OSGi) einen Standard etablierte, der die Zusammenfassung von JAVA-Paketen zu Modulen mit einer eigenen Schnittstellenspezifikation erlaubte. Dieser Standard ist unter anderem die Grundlage von Eclipse, das nicht nur eine JAVA-IDE, sondern im Kern ein Framework für die Entwicklung beliebig komplexer JAVA-Programme (sog. Rich Clients) ist.
Mit JAVA 9 wurde dann JAVA ein eigenes, über Klassen und Paketen stehendes Modulkonzept verpasst. Ein Modul ist demnach eine Menge von Paketen, die über eine Moduldeklaration eine gemeinsame Schnittstelle spezifiziert. Eine Moduldeklaration besteht aus einem (eindeutigen) Namen des Moduls, einer Deklaration der angebotenen Schnittstelle (bislang über öffentliche Deklarationen hergestellt) und einer Deklaration der benötigten Schnittstelle (bislang ausschließlich über import-Direktiven deklariert). Neben den allgemeinen Export tritt der sog. qualifizierte Export, wie er auch in EIFFEL vorgesehen ist: Er nennt die Module, an die exportiert wird, namentlich und erlaubt so einen „privaten“ Austausch zwischen bestimmten Modulen (die somit ihre eigenen, oder privaten, Schnittstellen haben).
Das Besondere an der Moduldefinition von JAVA ist, dass die Einhaltung der damit einhergehenden Schnittstellenspezifikationen sowohl zur Übersetzungszeit als auch zur Laufzeit erzwungen wird. Außerdem kontrolliert sie auch den reflektiven Zugriff auf Programmelemente, der bislang gar nicht unterbunden werden konnte. JAVA-Programme werden dadurch erheblich sicherer.

Frage: Warum funktioniert der ursprüngliche Ansatz von JAVA, bei dem alle Klassen eines Programms zu einem Paket zusammengefasst werden können, nicht mehr, wenn Programme in mehrere Pakete aufgeteilt werden?
Antwort: Der ursprüngliche Ansatz von JAVA, bei dem alle Klassen eines Programms zu einem Paket zusammengefasst werden können, funktioniert nicht mehr, wenn Programme in mehrere Pakete aufgeteilt werden, weil Abhängigkeiten zwischen den Paketen öffentliche Deklarationen erfordern, die dann jedoch alle Programmelemente für jeden sichtbar machen, was die Modularität einschränkt.

Frage: Welche Initiative wurde von der JAVA-Community aufgegriffen, um die Situation mit aufgeteilten Paketen zu verbessern?
Antwort: Die JAVA-Community griff die Open Services Gateway Initiative (OSGi) auf, um die Situation mit aufgeteilten Paketen zu verbessern. OSGi ermöglichte die Zusammenfassung von JAVA-Paketen zu Modulen mit einer eigenen Schnittstellenspezifikation.

Frage: Was wurde mit JAVA 9 eingeführt, um das Problem der Modularität in JAVA zu lösen?
Antwort: Mit JAVA 9 wurde ein eigenes Modulkonzept eingeführt, das über Klassen und Paketen steht. Ein Modul in JAVA 9 ist eine Menge von Paketen, die über eine Moduldeklaration eine gemeinsame Schnittstelle spezifiziert. Die Moduldeklaration umfasst den Namen des Moduls, die angebotene Schnittstelle und die benötigte Schnittstelle.

Frage: Was ist der qualifizierte Export in der Moduldefinition von JAVA?
Antwort: Der qualifizierte Export in der Moduldefinition von JAVA ist ähnlich wie in EIFFEL. Er nennt die Module, an die exportiert wird, namentlich und erlaubt einen "privaten" Austausch zwischen bestimmten Modulen, die somit ihre eigenen, privaten Schnittstellen haben.

Frage: Was ist das Besondere an der Moduldefinition von JAVA in Bezug auf die Einhaltung der Schnittstellenspezifikationen?
Antwort: Die Moduldefinition von JAVA erzwingt die Einhaltung der Schnittstellenspezifikationen sowohl zur Übersetzungszeit als auch zur Laufzeit. Sie kontrolliert auch den reflektiven Zugriff auf Programmelemente, was zu einer erheblichen Verbesserung der Sicherheit von JAVA-Programmen führt.
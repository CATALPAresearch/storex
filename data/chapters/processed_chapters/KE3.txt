Kurseinheit 3: Typen in der objektorientierten Programmierung

Der Zweck eines Typsystems besteht darin, das Auftreten von Ausführungsfehlern während der Programmausführung zu verhindern. Die Genauigkeit dieser informellen Aussage hängt von der eher subtilen Frage ab, was einen Ausführungsfehler darstellt. Selbst wenn dies geklärt ist, ist die Typsicherheit einer Programmiersprache (das Fehlen bestimmter Ausführungsfehler in allen Programmläufen) eine nicht-triviale Eigenschaft. Eine sorgfältige Analyse ist erforderlich, um falsche und peinliche Behauptungen zur Typsicherheit zu vermeiden. Als Konsequenz hat sich die Klassifikation, Beschreibung und Erforschung von Typsystemen zu einer formalen Disziplin entwickelt.
Im Gegensatz zu SMALLTALK sind die meisten objektorientierten Programmiersprachen typisiert, was bedeutet, dass Programmelementen bei ihrer Deklaration (siehe Kapitel 19) Typen zugeordnet werden. Ein Typ beschränkt die Menge der Objekte, für die ein Programmelement stehen kann, und die Arten von Operationen, die darauf angewendet werden können. Typregeln sind in der Regel ein fester Bestandteil der Sprache. Wenn Sie eine solche Sprache neu erlernen, würden Sie normalerweise nicht daran denken, das Typsystem von der restlichen Sprachdefinition zu trennen. Dennoch sind Typen prinzipiell für das Funktionieren eines Programms entbehrlich, und es kann sich durchaus lohnen, das Typsystem einer Sprache von ihrem Rest zu isolieren, insbesondere wenn Sie es austauschen oder verbessern möchten. Dies gilt umso mehr, da gängige Typsysteme heute entweder ziemlich schwach oder ziemlich komplex sind.
Daher führt diese Kurseinheit in Typsysteme am Beispiel von STRONGTALK ein, einer SMALLTALK-Erweiterung um ein optionales Typsystem. Sie geht dabei langsam und inkrementell vor. Wer das als zu langweilig empfindet, sei gewarnt: Es wird noch kompliziert genug, und nicht jede Leserin wird alles, was sie in diesem Kurs über Typsysteme liest, auf Anhieb verstehen. Es wäre auch eine Option, diese Kurseinheit anhand einer bekannteren Sprache mit einem obligatorischen Typsystem zu erstellen. Dies hätte jedoch den Nachteil, dass das konkrete Typsystem als gegeben angesehen werden müsste. Wenn Sie dann später eine andere Sprache kennenlernen, hätten Sie wahrscheinlich Schwierigkeiten, das Gelernte abzulegen und sich an die neuen Gegebenheiten anzupassen. Das Ziel dieser Kurseinheit ist jedoch, dass Sie Typsysteme als das verstehen, was sie sind: eine Möglichkeit zur Spezifikation redundanter Informationen, die die Qualität von Programmen erhöhen sollen.

Frage: Was ist der Zweck eines Typsystems in der objektorientierten Programmierung?
Antwort: Der Zweck eines Typsystems besteht darin, das Auftreten von Ausführungsfehlern während der Programmausführung zu verhindern. Es sorgt dafür, dass Programmelemente bei ihrer Deklaration Typen zugewiesen bekommen, die die Menge der zulässigen Objekte und die erlaubten Operationen auf diesen Objekten einschränken.

Frage: Was bedeutet Typisierung in objektorientierten Programmiersprachen?
Antwort: Typisierung in objektorientierten Programmiersprachen bedeutet, dass bei der Deklaration von Programmelementen, wie Variablen oder Funktionen, Typen zugeordnet werden. Diese Typen bestimmen, welche Arten von Objekten in diesen Programmelementen gespeichert oder verarbeitet werden können und welche Operationen auf diese Objekte angewendet werden können.

Frage: Welche Unterschiede gibt es zwischen SMALLTALK und den meisten anderen objektorientierten Programmiersprachen in Bezug auf die Typisierung?
Antwort: Im Gegensatz zu SMALLTALK sind die meisten anderen objektorientierten Programmiersprachen typisiert, was bedeutet, dass Programmelementen bei ihrer Deklaration Typen zugeordnet werden. In SMALLTALK wird die Typisierung in der Regel erst zur Laufzeit überprüft, während in anderen Sprachen dies bereits zur Übersetzungszeit geschieht.

Frage: Warum könnte es sinnvoll sein, das Typsystem einer Programmiersprache von ihrem Rest zu isolieren?
Antwort: Das Isolieren des Typsystems einer Programmiersprache ermöglicht es, das Typsystem auszutauschen oder zu verbessern, ohne die gesamte Sprachdefinition ändern zu müssen. Dies kann besonders nützlich sein, wenn man eine Sprache an spezifische Anforderungen anpassen möchte.

Frage: Warum wird in dieser Kurseinheit das Typsystem am Beispiel von STRONGTALK behandelt?
Antwort: Diese Kurseinheit behandelt das Typsystem am Beispiel von STRONGTALK, einer SMALLTALK-Erweiterung um ein optionales Typsystem. Dies geschieht, um die Konzepte schrittweise und verständlich einzuführen. Das Ziel ist, dass die Leserinnen und Leser Typsysteme als Möglichkeiten zur Spezifikation redundanter Informationen verstehen, die die Qualität von Programmen erhöhen sollen.
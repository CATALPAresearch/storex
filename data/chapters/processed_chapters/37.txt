37 Ausdrücke

Ausdrücke in JAVA können sein: Literale, Variablen, die spezielle Variable this, Operatoranwendungen, Feldzugriffe der Form a.x, wobei a für den Besitzer des Feldes (ein Objekt oder eine Klasse) und x für das Feld (die Instanz- bzw. Klassenvariable) steht (a kann auch durch super ersetzt werden), Methodenaufrufe der Form a.m(...), wobei a für den Empfänger des Aufrufs steht oder für super, m für die Methode und ... für die tatsächlichen Parameter (die wiederum Ausdrücke sind), Array-Zugriffe der Form a[i], wobei a für das Array und i für einen Index steht (eine ganze, positive Zahl; bei mehrdimensionalen Arrays können entsprechend weitere Indizes in eckigen Klammern angegeben werden), Klasseninstanziierungen der Form new <Klassenname>(<Parameter>), Array-Instanziierungen der Form new <Basistypname>[<n>], wobei <Basistypname> für den Typ der Elemente steht (z. B. int bei einem Array von Integern) und <n> für einen Ausdruck, dessen Auswertung eine ganze, positive Zahl liefert (es können auch mehrere Dimensionen angegeben werden), Konditionalausdrücke der Form <Boolescher Ausdruck> ? <Ausdruck 1> : <Ausdruck 2>, wobei in Abhängigkeit davon, ob <Boolescher Ausdruck> zu wahr oder zu falsch auswertet, entweder <Ausdruck 1> oder <Ausdruck 2> ausgewertet wird und das Ergebnis des Gesamtausdrucks liefert, Cast-Ausdrücke der Form (<Typname>) <Ausdruck>, wobei <Typname> für das Ziel des Casts steht und <Ausdruck> für den Ausdruck, dessen Ergebnis den mit <Typname> bezeichneten Typ annehmen soll, Lambda-Ausdrücke der Form (<Parameterdeklarationen>) -> <Rumpf>, wobei <Parameterdeklarationen> den formalen Parameterdeklarationen einer Methode entspricht und <Rumpf> entweder eine einzelne Anweisung oder ein Block von Anweisungen, entsprechend einem Methodenrumpf (inklusive der geschweiften Klammern), ist. Falls nur ein Parameter deklariert wird, können die runden Klammern auch weggelassen werden.
Wie man sieht, können in JAVA Ausdrücke rekursiv aus anderen aufgebaut werden. Methodenausdrücke beinhalten einen Ausdruck für den Empfänger sowie möglicherweise weitere Ausdrücke für die Parameter des Methodenaufrufs. Array-Zugriffe und -Instanziierungen beinhalten Ausdrücke zur Bestimmung des Indexes bzw. der Größe, usw. Dabei müssen alle Ausdrücke korrekt typisiert sein, was bedeutet, dass der Typ jedes Ergebnisses eines inneren Ausdrucks mit dem Typ des äußeren Ausdrucks, an der Stelle, an der er eingesetzt wird, zuweisungskompatibel sein muss.
In JAVA gibt es nur Call by Value und kein Call by Reference, ähnlich wie in SMALLTALK. Das bedeutet, dass Methoden keinen anderen Wert für einen tatsächlichen Parameter zuweisen können. Das ist eine erhebliche Einschränkung.
Lambda-Ausdrücke in JAVA, die mit Version 8 eingeführt wurden, ersetzen die zuvor verwendete Praxis, Funktionen über anonyme innere Klassen zu implementieren, die ein Interface (siehe Abschnitt 40) mit nur einer Methode implementieren. Lambda-Ausdrücke haben den Typ eines Interfaces, der jedoch nicht direkt angegeben wird, sondern inferiert wird. Die Funktionen, die Lambda-Ausdrücke darstellen, erhalten über das Interface einen Namen.
Anonyme Funktionen oder Blöcke wie in SMALLTALK können in JAVA über vordefinierte Interfaces erstellt werden.
Demnach heißt die Funktion des Funktionsobjekts "apply". Der Ausdruck f.apply(2) liefert entsprechend 4. Hierbei entspricht apply(.) dem aus SMALLTALK bekannten value.
Es gibt einige Unterschiede zwischen JAVA-Ausdrücken und SMALLTALK-Ausdrücken, darunter die Verwendung von direkten Feldzugriffen in JAVA (a.x) und das Fehlen von indizierten Instanzvariablen. Außerdem unterscheidet JAVA zwischen Operatoranwendungen (+, -, etc.), Methodenaufrufen, Konstruktoraufrufen und Arrayzugriffen, während in SMALLTALK nur Methodenaufrufe existieren.

Frage: Welche Arten von Ausdrücken gibt es in JAVA?
Antwort: In JAVA gibt es verschiedene Arten von Ausdrücken, darunter Literale, Variablen, Methodenaufrufe, Operatoranwendungen, Feldzugriffe, Klasseninstanziierungen, Array-Instanziierungen, Konditionalausdrücke, Cast-Ausdrücke und Lambda-Ausdrücke.

Frage: Wie werden Ausdrücke in JAVA aufgebaut, und welche rekursiven Elemente sind dabei beteiligt?
Antwort: Ausdrücke in JAVA können rekursiv aus anderen Ausdrücken aufgebaut werden. Zum Beispiel enthalten Methodenausdrücke Ausdrücke für den Empfänger und die Parameter des Methodenaufrufs. Array-Zugriffe und -Instanziierungen beinhalten Ausdrücke zur Bestimmung von Indexen oder Größen.

Frage: Welche Typisierungsanforderungen gelten für Ausdrücke in JAVA?
Antwort: In JAVA müssen alle Ausdrücke korrekt typisiert sein. Das bedeutet, dass der Typ jedes Ergebnisses eines inneren Ausdrucks mit dem Typ des äußeren Ausdrucks übereinstimmen muss, an der Stelle, an der er eingesetzt wird.

Frage: Was ist der Unterschied zwischen Call by Value und Call by Reference, und wie wird dies in JAVA gehandhabt?
Antwort: In JAVA wird Call by Value verwendet, was bedeutet, dass Methoden keinen anderen Wert für einen tatsächlichen Parameter zuweisen können. Dies ist eine Einschränkung im Vergleich zu Call by Reference, bei dem eine Methode auf den ursprünglichen Wert einer Variablen zugreifen und ihn ändern kann.

Frage: Welche Rolle spielen Lambda-Ausdrücke in JAVA, und wie unterscheiden sie sich von anonymen inneren Klassen?
Antwort: Lambda-Ausdrücke in JAVA, die in Version 8 eingeführt wurden, ersetzen die zuvor verwendete Praxis, Funktionen über anonyme innere Klassen zu implementieren. Lambda-Ausdrücke haben den Typ eines Interfaces, der jedoch nicht direkt angegeben wird, sondern inferiert wird. Sie ermöglichen die Darstellung von Funktionen als Werte und werden häufig für die Implementierung von Schnittstellen mit nur einer Methode (Funktionale Interfaces) verwendet. Im Gegensatz dazu verwenden anonyme innere Klassen explizite Klassendefinitionen, um Schnittstellen zu implementieren.
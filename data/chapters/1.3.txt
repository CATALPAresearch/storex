1.3 Änderbarkeit von Objekten
Während atomare Objekte grundsätzlich nicht änderbar sind (welchen Si nn hätte es bei-
spielsweise, aus einer „1“ eine „2“ zu machen oder aus einem „a“ ein „b“?), so gilt das
für zusammengesetzte zunächst nicht: Es ist leicht vorstellbar (und auch grundsätzlich sinn-
voll), in einem Array -Objekt eine Komponente durch ein e andere zu ersetzen. Die Frage ist
allerdings, ob dies auch für Array -Objekte gilt, die aus Literalen erzeugt wurden: Soll es
erlaubt sein, dass das zusammengesetzte Objekt, das aus dem Array -Literal #(1 2 3)
hervorgegangen ist, durch ein Programm abgeändert wird , so dass es nicht mehr seiner
(ursprünglichen) literalen Repräsentation im Programm entspricht? Dies ist Ansichtssache
und wird zumindest für String -und Array -Literale von unterschiedlichen SMALLTALK -Dialek-
ten unterschiedlich gehandhabt . Objekte, die aus Symbolliteralen hervorgegangen sind,
sollten dagegen nie änderbar sein. Array -Literale
Grundsätzlich sind zusammengesetzte Objekte in SMALLTALK jedoch änderbar. Es ist dies
Voraussetzung dafür, dass Objekte einen Zustand haben können (s. Kapitel 3), was wiede-
rum die objektorientierte Programmierung zu einer Form der imperativen Programmierung
macht . Durch die Zunahme funktionaler Einflüsse auf die objektorientierte Programmierung
findet man jedoch auch zunehmend Sprachen, die unveränderliche Objekte anbieten (so
z. B. SCALA).

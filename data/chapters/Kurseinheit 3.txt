Kurseinheit 3: Typen in der objektorientierten
Programmierung
The purpose of a type system is to prevent the occurrence of execution errors
during the running of a program. The accuracy of this informal statement de-
pends on the rather subtle issue of what constitutes an execut ion error. Even
when that is settled, the type soundness of a programming language (the ab-
sence of certain execution errors in all program runs) is a non -trivial property.
A fair amount of careful analysis is required to avoid false and embarrassing
claims of type soundness; as a consequence, the classification, description,
and study of type systems has emerged as a formal discipline.
Luca Cardelli
Im Geg ensatz zu SMALLTALK sind die meisten objektorientierten Programmiersprachen typi-
siert, was soviel heißt wie dass Programmelementen bei ihrer Deklaration (s. Kapitel 19)
Typen zugeordnet werden. Dabei schränkt ein Typ die Menge der Objekte, für die ein Pro-
grammelement stehen kann, und die Menge der Dinge, die damit gemacht werden können,
ein. Meistens sind die Regeln zur Verwendung von Typen fester Bestandteil der Sp rache —
wenn Sie eine solche Sprache neu lernen, dann würden Sie gar nicht auf die Idee kommen,
Typsystem und übrige Sprachdefinition voneinander getrennt zu betrachten. Dennoch sind
Typen für das Funktionieren eines Programms prinzipiell verzichtbar46 und es lohnt sich
durchaus, das Typsystem einer Sprache von ihrem Rest zu lösen, beispielsweise weil man es
austauschen oder verbessern will. Dies um so mehr, als heute gängige Typsysteme entweder
ziemlich schwach oder ziemlich kompliziert sind.
So führt dies e Kurseinheit Typsysteme am Beispiel von STRONGTALK , einer SMALLTALK -Erwei-
terung um ein optionales Typsystem , ein. Sie geht dabei langsam und inkrementell vor. Wer
das zu öde erscheint, die sei gewarnt: Es wird noch kompliziert genug und nicht jede Leserin
wird alles, was sie in diesem Kurs über Typsysteme liest, auf Anhieb verstehen. Auch wäre
46 Wenn man auf Möglichkeiten wie das Überladen von Methoden verzichten kann; Laufzeittypin-
formation , wie man sie z. B. für das dynamische Binden oder für die Garbage collection benötigt,
kann durch Laufzeitklasseninformation (was nicht dasselbe ist!) ersetzt werden ; s. Abschnitt 28.3.
die Alternative, diese Kurseinheit am Beispiel einer bekannteren Sprache mit verpflichten-
dem Typsystem hochzuziehen, stets mit dem Nachtei l belastet, dieses konkrete Typsystem
als quasi vom Himmel gefallen darstellen zu müssen — wenn Sie dann später eine andere
Sprache kennenlernen, hätten Sie vermut lich Schwierigkeiten, das Gelernte abzustreifen
und sich mit den neuen Verhältnissen zurechtz ufinden. Ziel dieser Kurseinheit ist aber, dass
Sie Typsysteme als das verstehen, was sie sind: eine Möglichkeit zur Spezifikation redundan-
ter Information, die die Qualität von Programmen erhöhen soll.

4.3 Methoden
Die Auswertung von Nachrichtenausdrücken, also von Nachrichten, die an Objekte ver-
schickt werden, erfolgt mit Hilfe sog. Methoden . Was ein Objekt in Reaktion auf den Erhalt
einer entsprechenden Nachricht tun soll, wird durch eine Methodendefinition beschrei-
ben. Eine Methodendefi nition besteht dazu aus einem Methodenkopf , der in SMALLTALK
auch als Message pattern , allgemein (und im folgenden) aber eher als Methodensignatur
bezeichnet wird, einer optionalen Liste von lokalen Variablen und einem Methodenrumpf .
Letzterer enthält die Anweisungen , die die Methode ausmachen, die also zur Auswertung
eines Nachrichtenausdrucks ausgeführt werden. Es ist üblich, jede Methodendefinition mit
einem in doppelte Anführungsstriche gesetzten Kommentar zu versehen, der beschreibt,
was diese Methode macht.
Die Methodensignatur besteht aus dem Namen der Methode und der
Liste ihrer formalen Parameter . Formale Parameter sind lokale Variab-
len, denen beim Aufruf der Methode (s. Abschnitt 4.3.2 ) automatisch ein
Wert, der sog. tatsächlich e Parameter20, zugewiesen wird und deren Sichtbarkeit auf die
Methode, in deren Methodensignatur sie vorkommen, beschränkt ist. Wie alle lokalen Va-
riablen müssen sie mit einem Kleinbuchstaben beginnen. Außerdem sind sie temporäre Va-
riablen , was soviel heißt wie dass sie nur für die Dauer der Ausführu ng der Methode exis-
tieren. Damit sind auch die Aliase, die durch formale Parameter gebildet werden können,
immer temporär. In SMALLTALK sind formale Parameter zudem Pseudovariablen (s. Abschnitt
1.7), d. h., es kann ihnen innerhalb der Methode, für die sie sichtbar sind, nichts zugewiesen
werden. Syntaktisch unters cheidet sich SMALLTALK von den meisten anderen Programmier-
sprachen auch bei der Methodendefinition dadurch, dass die formalen Parameter nicht
20 Der im Englischen gebrauchte Term „ actual parameter “ wird auch manchmal mit „ aktueller Pa-
rameter “ ins Deutsche übersetzt, was oft als falsch verhöhnt wird, aber die Sache trotzdem trifft,
zumindest, wenn man die zeitliche Dimension, die mit der Programmausführung einhergeht, in Be-
tracht zieht: Es gibt nämlich in der Regel viele tatsächliche Parameter zu einem Methodenaufruf, von
denen — zu jede m Zeitpunkt — höchstens einer der aktuelle ist. formal e und
tatsächlich e
Parameter
durch Kommata getrennt in einer in Klammern eingeschlossenen Liste hinter dem Metho-
dennamen stehen, sondern jeder für sich von einem Nachrichtenbestandteil eingeleitet
wird.
Eine Methodendefinition folgt also dem Schema
80 <Methodensignatur>
81  "<Kommentar>"
82 | <Liste lokaler Variablen> |
83 <Folge von Anweisungen>
(in spitzen Klammern wieder metasyntaktische Variablen , also Platzhalter für entsprechende
Programmelemente). Eine einfache Methode wäre etwa
84 helloWorld
85  "das berühmt -berüchtigte"
86 | |
87 Transcript show: 'Hello World!'; cr
oder, wer es generischer mag,
88 sag: einenText
89  "nicht so unflexibel"
90 | |
91 Transcript show: einenText; cr
Die Methodensignatur als Teil einer Methodendefinition wird im folgenden immer fett her-
vorgehoben.
Die Methoden signatur dient der Auswahl der zu einer Nachricht passenden Methode; sie
ist das Gegenstück zum Nachrichtenselektor aus Abschnitt 4.1.2 , anhand dessen die Aus-
wahl der zu einem Nachrichtenausdruck passenden Methode durchgeführt wird. Anders als
ein Nachrichtenausdruck nennt eine Methodensignatur aber kein Empfängerobjekt und die
offenen Stellen eines Nachrichtenselektors werden ausschli eßlich durch Variablen, eben die
formalen Parameter , und nicht durch beliebige Ausdrücke besetzt. Typische Methodensig-
naturen sind z. B.
92 printString
für Methoden ohne Parameter,
93 + einInteger
für binäre Methoden21 (mit einInteger als formalem Parameter) und
21 Der Begriff der binären Methode bezeichnet hier zweistellige Methoden, die eine Sonderzeichen-
folge als Name verwenden. In der Literatur wird er häufig anders gebraucht: Der Empfänger und der
Parameter einer binären Methode haben denselben Typ (vgl. Fußnote 17 und Abschnitt 29.5). Schema der
Methodendefinition
94 printOn: einStrom
für alle anderen Methoden mit einem oder mehreren Parametern (in diesem Fall mit nur
einem formalen Parameter, einStrom ). Die Methodensignaturen „passen“ übrigens je-
weils zu den entsprechenden Nachrichtenausdrücken aus den Zeilen 68, 69 und 70. Wenn
der Nachrichtenselektor aus mehreren Teilen besteht, werden diese (entsprechend den Bei-
spielen in den Zeilen 48 ff.) einfach angehängt.
Wie bereits erwähnt, besteht der Methodenrumpf aus einer Folge von
Anweisungen, Ausdrücken, die jeweils durch einen Punkt getrennt sind.
Wenn die Anweisungen nichts anderes vorsehen, wird die Ausführung
einer Methode nac h Abarbeitung der letzten Anweisung explizit mit der
Rückgabe des Empfängerobjekts an den Sender der Nachricht beendet. Für explizite Been-
digungen und Rückgabe eines anderen Objekts als des Empfängers ist die Return -Anwei-
sung (Abschnitt 4.2) vorgesehen.
95 helloWorld
96 Transcript show: 'Hello World!'; cr
97 ^ 'Hello Wo rld!'
Eine Return -Anweisung darf an beliebigen Stellen innerhalb der Methode
auftreten. Die Abarbeitung der Methode kann demnach auch vor Errei-
chen der textuell letzten Anweisung beendet werden. Die Return -Anweisung beein flusst
also den Kontroll fluss des Programms. Wichtig ist, dass eine Methode immer ein Objekt
zurückgibt; ein Nachrichtenausdruck (oder Methodenaufruf ; s Abschnitt 4.3.2 ) steht als
Ausdruck also immer für ein Objekt. Prozeduren im Sinne PASCAL s oder Void -Methoden im
Sinne von C, JAVA usw. gibt es in SMALLTALK nicht (vgl. a. Abschnitt 4.1.3 ).
Sollte eine Methode zur Durchführung ihrer Berechnungen temporäre
Variablen benötigen, so müssen diese zu Beginn der Methode (nach der Methodensign atur
und vor der ersten Anweisung) deklariert werden. Die Werte dieser Variablen, die standard-
mäßig mit nil initialisiert werden, sind außerhalb der Methode nicht sichtbar; die Variablen
werden insbesondere nach Abarbeitung der Methode vom System wieder en tfernt. Sie kön-
nen sich also auch zwischen zwei Ausführungen einer Methode nichts merken.
Temporäre Variablen können auch der besseren Lesbarkeit dienen, indem sie Zwischener-
gebnissen einen Namen geben :
98 helloWorldX2
99 | einmal zweimal |
100 einmal := 'Hello World!'.
101 zweimal := einmal , einmal .
102 Transcript show: zweimal; cr
Umgekehrt können temporäre Variablen, die nur einmal verwendet werden, eingespart
werden, indem man kaskadierte Nachrichtenausdrücke (Abschnitt 4.1.2 ) verwendet . Rückkehr von eine r
Methode und
Rückgabe eines
Wertes
explizite Beendigung
einer Methode
temporäre Variablen
Methoden sind die Einheiten des Programms, in denen Sie als Program-
miererin Ihre Anwe isungen unterbringen. Sie werden nach der Eingabe
(und bei jeder Änderung) mit dem „Speichern“ kompiliert („Speichern“ deswegen in An-
führungsstrichen, weil Methoden nicht in Dateien gespeichert werden, sondern in einer Da-
tenstruktur SMALLTALK s, und zwar in Form von Objekten ). Tatsächlich besteht der Löwenan-
teil eines jeden SMALLTALK -Programms, ja des gesamten SMALLTALK -Systems, aus Methoden-
definitionen. Die Methodendefinitionen entsprechen im wesentlichen der Definition von
Funktionen (oder, mit obiger Einschränkung, Prozeduren) in anderen Sprachen; jedoch ist
es in SMALLTALK nicht möglich (und in der objektorientierten Programmierung allgemein
nicht üblich), Methoden zu schachteln, also eine Methode innerhalb einer anderen zu de-
klarier en. Außerdem gibt es in SMALLTALK keine „Hauptmethode“ wie etwa die Main -Me-
thoden in der C -Sprachfamilie. Sie müssen dem SMALLTALK -System schon sagen, welche
Methode Sie ausgeführt haben wollen, z. B. indem Sie einen entsprechenden Ausdruck ein-
geben und au swerten lassen.

8.6 Praktische Bedeutung der Metaklassen für die Programmierung
Dadurch, dass i n SMALLTALK Klassen Instanzen von Metaklassen sind, die
selbst Instanzen einer weiteren Klasse und diese alle zusammen Objekte
sind, ist jedes SMALLTALK -Programm, ja das ganze SMALLTALK -System,
nichts weiter als ein Objektgeflecht (sieht man einmal von den primitiven Methoden ab).
SMALLTALK ist damit nicht nur ein Programmiersystem, sondern auch ein Metaprogram-
miersystem in der Tradition funktionaler und logischer Programmiersprachen wie LISP und
PROLOG . In der imperativen und objektorientierten Prog rammiersprachenlandschaft sucht
diese Mächtigkeit bis heute ihresgleichen.
Für Sie als Programmiererin , die nicht gleich eine neue Sprache erschaffen will, sind Ebene
2 und 3 sind vor allem dann interessant, wenn Sie sich im Inneren von SMALLTALK umsehen
oder es vielleicht sogar selbst verändern wollen. Wenn Sie z. B. erreichen wollen, dass beim
Anlegen einer neuen Klasse für alle benannten Instanzvariablen dieser Klasse automatisch
Zugriffsmethoden wie in Abschnitt 4.3.4 definiert werden, dann ist dies leicht möglich, in-
dem Sie an entsprechender Stelle (z. B. in der Klasse Class bzw. Behavior , die auf der
Ebene der Metaklassen steht und die für das Anlegen ne uer Klassen zuständig ist) eine neue
Methode zur Klassendefinition einfügen, die die bereits existierenden um die automatische
Erzeugung der Zugriffsmethoden ergänzt.
Selbsttestaufgabe 8.3
Ergänze n Sie die Klasse Class um eine Methode zur Anlage neuer Klassen, die für ausgewählte
Instanzvariablen automatisch Zugriffsmethoden (Accessoren; einen Setter und einen Getter) zum
Methodenkatalog hinzufügt. Teilen sie dazu die bei einer Klassendefinition an gegebene Liste der
Instanzvariablen in zwei auf, von denen die eine ohne, die andere mit Accessoren angelegt wird.
Im Programmieralltag werden Sie das aber nicht tun. Vielmehr beschränkt
sich Ihre Tätigkeit da auf das Anlegen und Ändern einfacher Klassen, also solcher, deren
Instanzen selbst keine Klassen sind. Die dazu notwendigen Metaklassen erzeugt SMALLTALK
automatisch selbst — im Klassenbrowser erscheinen sie nur über die Unterscheidung zwi-
schen Instanz - und Klassenvariablen bzw. -methoden.
SMAL LTALK als
Metaprogrammier -
system
Programmieralltag

48 Ein abschließendes Beispiel
Um Ihnen eine grobe Vorstellung davon zu geben, wie JAVA-Programme aussehen, finden
Sie nachfolgend den Quellcode für ein Programm, das ein einfaches Ratespiel umsetzt . Das
Programm besteht aus vier Klassen, nämlich der Klasse Ratespiel , die im wesentlichen
die Startmethode nebst Initialisierung der Datenst ruktur enthält, sowie den Klassen Knoten ,
Tier und Merkmal . Das Interface Frage dient der gemeinsamen Abstraktion von Tier Möglichkeiten zur
und Merkmal und verlangt von den beiden Klassen lediglich, dass sie eine Methode
stellen() implementieren und auf den Aufruf derselbe n einen Wahrheitswert (die Ant-
wort auf die gestellte Frage) zurückliefern. Die Methoden der Klasse KeyboardInput die-
nen der Interaktion mit der Benutzerin über die Konsole, deren Möglichkeiten in JAVA (wie
in SMALLTALK ) von Haus aus nur schwach ausgeprägt sind. System.out bezeichnet denn
auch den Ausgabestrom , der mit der Konsole ver bunden ist, und die Methode println(.)
gibt etwas darauf aus.
Die Klassen Tier und Merkmal sind beide recht klein und unterscheiden sich nur wenig.
Beide speichern pro Instanz einen String, einmal in der Instanzvariable name , einmal in der
Instanzvariable frage . Diese Strings werden jeweils bei der Erzeugung der Objekte per Kon-
struktoraufruf üb ergeben (so z. B. in Zeile 1179 ) und in der Folge nicht mehr geändert (die
Instanzvariablen sind private deklariert und es gibt außer dem Konstruktor keine Met ho-
den der Klassen, die schreibend darauf zugreifen, also die Instanzvariable auf der linken
Seite einer Zuweisung stehen haben). Beim Stellen der Frage fügt Tier noch etwas Text zu
dem Inhalt von name hinzu, so dass sich eine vollständige Frage ergibt; für Merkmale muss
die Frage so eingegeben werden, wie sie hinterher gestellt wird.
Das Gros der Anwendungslogik steckt in der Klasse Knoten . Ihre Instanzen stellen die Kno-
ten eines binären Baums, von denen der eine Nachfolger den Ja -, der andere den Nein -
Zweig beinhaltet. Zudem muss jeder Knoten eine Frage haben; dass die entsprechende
Instanzvariable frage heißt und vom Typ Frage ist, drückt aus, dass mit jedem Knoten
entweder eine Tier - oder eine Merkmalsfrage verbunden ist. Dass nur die Blätter eines
Baums Tierfragen beinhalten dürfen, wird durch die Variablendeklarationen nicht ausge-
drückt; das steckt in der nachfolgenden Programmlogik, der Implementierung der Methode
fragen() .
Die Methode fragen() enthält eine Unterscheidung von vier Fällen, die sich aus d er Be-
antwortung der zu dem Knoten gehörenden Frage (ja oder nein) und dem Umstand, ob es
sich um einen Blattknoten handelt (was man daran sehen kann, dass ja bzw. nein den
Wert null haben) ergeben. Die Schachtelung der insgesamt drei If -else-Anweisungen is t
Standard und hat mit Objektorientierung nichts zu tun. Objektorientiert ist dagegen die
Fallunterscheidung, die sich hinter dem Aufruf frage.stellen() (Zeile 1201 ) verbirgt: Da
frage eine Instanz der Klasse Tier oder Merkmal benennen kann, die beiden Klassen die
Methode stellen() aber jede für sich implementieren, wird hier eine Fallunterscheidung
per dynamischem Binden getroffen. Man beachte, dass die Unte rscheidung, ob ein Knoten
Blattknoten ist, ebenfalls per dynamisches Binden getroffen werden könnte; ihre Program-
miererin hat sich aber im Rahmen ihrer kreativen Freiheit dagegen entschieden.
Vielleicht ist Ihnen aufgefallen, dass außer den Konstruktoren keine der Methoden einen
Parameter hat. Es ist dies ein Zeichen für ein gelungenes objektorientiertes Design. Für Pro-
grammiererinnen , die aus der imperativen Programmierung kommen, ist dies gewöhnungs-
bedürftig — intuitiv denkt man zunächst, dass die Methoden statt dessen wohl auf globale
Variablen z ugreifen werden, weswegen man spontan die Nase rümpfen möchte. Das ist
aber nicht der Fall: Alle Methoden greifen ausschließlich auf Instanzvariablen zu. Diese gibt
es aber in der imperativen Programmierung nicht.

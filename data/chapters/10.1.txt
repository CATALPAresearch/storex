10.1 Vererbung
Unter Vererbung versteht man in der objektorientierten Programmierung die Übertragung
der Definition von Eigenschaften und Verhalten (Intension) von einer Klasse auf eine andere.
Vererbung dient vor allem der Wiederverwendung von Code und damit der Ökonomie in
der Softwa reentwicklung.
Wenn man das Prinzip von Generalisierung und Spezialisierung vor Au-
gen hat, dann ist die Vererbung eigentlich nur noch ein Mechanismus,
der Definitionen von einer Klasse auf eine andere übert rägt. So wird jede
benannte Instanzvariable, die in einer Generalisierung deklariert ist, nicht nur für Instanzen
dieser Generalisierung (so sie denn welche hat) angelegt, sondern auch für die Instanzen all
ihrer Spezialisierungen. Analog stehen Methoden, die in einer Generalisierung definiert wer-
den, auch ihren Spezialisierungen zur Verfügung, und zwar beinahe so, als wären sie in den
Spezialisierungen definiert.
Spezialisierung und Vererbung scheinen also Hand in Hand zu gehen. Doch ist dies nur
solange d er Fall, wie man von der Spezialisierung ausgeht und die Vererbung als ökonomi-
sches Abfallprodukt erhält. In der Praxis lässt man sich doch leider häufig von vordergrün-
digen Gewinnerwartungen leiten und folgt der (vermeintlichen) Ökonomie der Vererbung,
ohne dabei auf die Prinzipien von Generalisierung und Spezialisierung einzugehen. Obiges
Beispiel von Pinguinen und Vögeln hatte schon gezeigt, zu welchen Komplikationen eine
unbedachte Spezialisierung führen kann; nachfolgendes soll zeigen, zu was eine Fixi erung
auf Ausnutzung der Vererbung führt.
Ein Klasse Quadrat sei etwa wie folgt definiert:
Klasse  Quadrat
benannte Instanzvariablen  laenge
Instanzmethoden
415 flaeche
416  ^ laenge * laenge
Vererbung bei
Generalisierung und
Spezialisierung
417 umfang
418  ^ laenge * 4
Nun möchte man eine zweite Klasse Rechteck definieren und dabei aus-
nutzen, dass man so eine ähnliche Klasse, nämlich Quadrat , schon hat.
Aus Quadrat übernehmen lässt sich nämlich die Instanzvariable laenge .
(Das Beispiel wurde absichtlich einfach gewählt, auch wenn es dadurch wenig überzeugend
wirkt; das Pr oblem sollte aber trotzdem klar werden.)
Klasse  Rechteck
beerbte Klasse Quadrat
benannte Instanzvariablen  breite
Instanzmethoden
419 flaeche
420  ^ laenge * breite
421 umfang
422  ^ laenge + breite * 2
Was die Instanzvariablen angeht, so braucht Rechteck die Instanzvari-
able laenge nicht neu zu definieren, sondern muss lediglich breite hin-
zufügen. Allerdings können die Methoden zur Berechnungen von F läche und Umfang nicht
mitgeerbt werden, obwohl Quadrate und Rechtecke die Eigenschaft, über solche Merkmale
zu verfügen, teilen. Die entsprechenden Methoden müssen also in Rechteck neu definiert
werden. Man nennt das Überschreiben , weil die neuen Methoden mit den alten genau
dies tun. Die Möglichkeit des Überschreibens ist häufig Voraussetzung dafür, dass man Ver-
erbung überhaupt sinnvoll einsetzen kann.
Wenn man nun glaubt, man hätte gleichzeitig mit der Vererbung auch
eine Spezialisierungs - bzw. Generalisierungsbeziehung geschaffen, weit
gefehlt: Die Menge der Quadrate enthält die Menge der Rechtecke nicht,
was ja eine charakteristische Begleiterscheinung der Ge neralisierung gewesen wäre. Dass
die Intension von Rechteck umfangreicher ist als die von Quadrat (sie enthält eine Instanzva-
riable mehr), ist eine Täuschung: Ein Quadrat hat, genau wie ein Rechteck, vier Seiten, nur
ist die Bedingung für diese vier Seiten in Quadraten die, dass sie alle gleich lang sind, so
dass man sich drei Instanzvariablen sparen kann; für Rechtecke sind nur jeweils zwei Seiten
gleich lang, so dass man sich nur zwei Instanzvariablen spart. Die Intension für Quadrate ist
aber trotzdem re striktiver als die für Rechtecke (sie enthält eine zusätzliche Bedingung), so
dass der inverse Zusammenhang von Intension und Extension auch für Quadrate und Recht-
ecke gilt : je größer die Intension, desto kleiner die Extension (und umgekehrt) .
Das Problem mit der Vererbung ist nun, dass sie auf die oberflächliche
Wiederverwendung von Elementen einer Klassendefinition ausgerichtet Vererbung zur
Ausnutzung von
Ähnlichkeiten
Überschreiben von
Geerbtem
Vererbung ohne
Generalisierung/
Spezialisierung
Oberflächlic hkeit der
Vererbung
ist. Sie lässt dabei insbesondere den Zusammenhang der Extensionen der beteiligten Klas-
sen, der f ür Generalisierung/Spezialisierung wesentlich ist, außer acht. Diese Ignoranz hat
aber weitreichende Konsequenzen, die wir in Kapitel 26 von Kurseinheit 3 noch kennenler-
nen werden.
Man hätte nun auch umgekehrt verfahren und dabei das Prinzip von Ge-
neralisierung und Spezialisierung hochhalten können, indem man
Quadrat von Rechteck erben lässt (wenn man akzeptiert, dass die Generalisierung
Rechteck eigene Instanzen hat). Der Nachteil d ieses Entwurfs wäre jedoch, dass dann auch
Quadrat zwei Instanzvariablen für Seitenlängen hätte, obwohl ja eine ausgereicht hätte.
Auf der anderen Seite hätte man die Methoden für Fläche und Umfang nicht überschreiben
müssen, denn wenn laenge und breite gleich sind, unterscheiden sich die beiden obigen
Implementierungen von flaeche und umfang im Ergebnis nicht. Man muss nur sicherstel-
len, dass in Instanzen von Quadrat laenge und breite tatsächlich immer gleiche Werte
haben.
Nun kann ma n aber auch auf die Idee kommen, die zu viel geerbte In-
stanzvariable breite einfach wieder zu löschen. Tatsächlich ist dies vom
Standpunkt der Vererbung aus kein Problem: Genauso, wie man Teile der Definition über-
schreiben kann, kann man sie auch löschen. Im konkreten Fall der Klasse Quadrat , die von
Rechteck erbt, müsste man mit dem Löschen von breite aber auch die Methoden
flaeche und umfang überschreiben. (Das Löschen von Methoden wäre auch möglich,
wird hier aber nicht gebraucht.)
Was bleibt, ist ein Eindruck von Beliebigkeit bei der Vererbungsrichtung,
die für Generalisierung/Spezialisierung nicht existiert. In gewisser Weise
spiegeln Generalisierung/Spezialisierung und Vererbung auch zwei verschiedene Weltsich-
ten wider: Generalisi erung/Spezialisierung steht für die Ordnung eines Systems von Klassen
mit Blick von außen und für das Ganze (die sog. Client -Schnittstelle ), Vererbung für die
Pragma tik des Programmierens mit Blick von innen und einem Fokus auf Wiederverwen-
dung (die Vererbungsschnittstelle ). Vererbung stellt eine Art genetischen Zusammenh ang
zwischen Klassen dar, der deren Entstehung aus Vorhandenem widerspiegelt, Generalisie-
rung/Spe zialisierung eher eine abstrakte Ordnung. Vererbung bringt Komplexität in ein Sys-
tem, Generalisierung/Spezialisierung versucht, sie durch Strukturierung zu reduzieren. Wie
Sie gesehen haben, führen beide Sichten nicht automatisch zum selben Ergebnis; sie zu
vereinen ist die hohe Kunst des objektorientierten Entwurfs.

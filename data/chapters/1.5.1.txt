1.5.1 Inhalt
Das bezeichnete Objekt wird manchmal auch „Wert“ oder „Inhalt“ der
Variable genannt (und die Variable selbst Platzhalter des Objekts). Beson-
ders die Verwendung von „Inhalt“ ist aber gefährlich , da sie nahelegt, ein
Objekt könne zu einem Zeitpunkt nur von gen au einer Variable bezeichnet werden, so wie
ein Gegenstand zu einer Zeit immer nur Inhalt eines Behälters sein kann. Tatsächlich können
aber mehrere Variablen gleichzeitig ein und dasselbe Objekt bezeichnen — die Variablen
haben nämlich nur Verweise (auch Referenzen oder Pointer genannt) auf Objekte (ge-
nauer: a uf die Speicherstellen, an denen die Objekte abgelegt sind; s. o.) zum Inhalt. Man
spricht deswegen auch von einer Verweis - oder Referenzsemantik von Variablen, im Ge-
gensatz zur Wertsemantik , bei der das bezeichnete Obj ekt tatsächlich auch Inhalt der Va-
riable ist.
Aus technischer Sicht entspricht einer Variable eine Stelle im Speicher.
Allerdings steht an dieser Stelle bei Variablen mit Verweissemantik nicht
das Objekt, das sie bezeichne n, sondern lediglich ein Verweis auf die Speicherstelle, an der
das Objekt gespeichert ist. Es handelt sich also bei Variablen mit Verweissemantik aus tech-
nischer Sicht um Pointervariable n, wie man sie auch aus nicht objektorientierten Program-
miersprachen wie PASCAL oder C kennt.
Var 1 Var 2Var 3
Objekt 1 Objekt 3
ObjektspeicherVariablenspeicherVar 4
Objekt 2
Verweis - und Wertsemantik von Variablen unterscheiden sich fundamen-
tal: Unter Wertsemant ik können, solange jedes Objekt seine eigene Iden-
tität hat, zwei Variablen niemals dasselbe Objekt bezeichnen. Dies wird
aber nur den wenigsten Programmierproblemen gerecht. Da zudem die
Verweissemantik eine n wesentlich speicher - und recheneffizientere n Umgang mit Objekten
erlaubt und da unterschiedliche Objekte wie oben beschrieben unterschiedlich viel Speicher-
platz belegen, so dass man im Vorfeld nicht immer weiß, wie viel davon man für eine Vari-
able vorsehen muss , ist sie in der objektorientierten Programmierung vorherrschend. In ma-
chen Sprachen , die neben Objekten auch Werte kennen, haben Variablen, die Objekte auf-
nehmen, stets Verweissemantik und Variablen, die Werte aufnehmen, stets Wertsemantik
(z. B. JAVA); andere objektorientierte Sprachen erlauben der Programmiererin , für jede Vari-
able getrennt festzulegen, ob sie Wert - oder Verweissemantik haben soll (so z. B. C++ und
EIFFEL).
Nun ist besonders für unveränderliche Objekte, deren interne Repräsen-
tation klein ist (die also wenig Speicherplatz belegt), die Forderung nach
der Speicherung eines Objektes an genau einem Ort und Speicherung von Wert - und
Verweissemantik von
Variablen
Variableninhalt auf
Speicherebene
Bedeutung der
Unterscheidung von
Verweis - und
Wertsemantik
wechselnde
Semantik von
Variablen in
SMALLTALK
Verweisen in Variablen (also die Speicherung in Variablen mit Verweissemantik) ineffizient.
Welchen Sinn hätte es beispielsweise, allen Zeichen eine Identität zu geben, an der mit der
jeweiligen Identität verbundenen Stelle im Speicher die internen Re präsentationen zu hin-
terlegen und dann in Variablen die Speicherstelle (Identität) zu speichern, wenn der Verweis
mehr Speicher belegt als das Zeichenobjekt, auf das verwiesen wird ? Das Gleiche gilt auch
für Zahlen bis zu einer gewissen Größe.
In den meisten SMALLTALK -Implementationen hat man dieses Problem so
gelöst, dass Variablen, die Zeichen, kleine Zahlen und die Booleschen
Werte true und false bezeichnen, Wertsemantik haben. Die Objekte können damit aber
tatsächlich an mehrere n Stellen im Speicher gespeichert werden, was einen Widerspruch
zur reinen Lehre darstellt. Zwar geht damit der Begriff der Identität für diese Objekte verlo-
ren, aber für die Programmiererin ist die damit verbundene mehrfache Existenz identischer
Objekte im Speicher insofern ohne größere Bedeutung, als hier Gleichheit problemlos an
die Stelle der Identität treten kann. Der P reis für diese Flexibilität ist allerdings, dass man den
Variablen nicht mehr fix Wert - oder Verweissemantik zuordnen kann — diese hängt viel-
mehr jeweils von der Art der Objekte ab, die sie gerade bezeichnen. In diesem Fall würde
man Wert - bzw. Verweissema ntik eher als eine Eigenschaft des Objekts denn der d er Vari-
able ansehen; das ist jedoch ziemlich SMALLTALK -spezifisch.
ObjektspeicherObjekt 1 Objekt 3VariablenspeicherVar 1
Ob 2Var 2Var 3 Var 4

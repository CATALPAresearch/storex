35.3 Variablen und Zuweisungen
JAVA ist eine stark typisierte Sprache: Alle Ausdrücke haben einen Typ. Das gilt auch für
Variablen, deren Typ bei ihrer Deklaration an gegeben werden muss . Syntax
Klassenliterale
In JAVA gibt es Variablen mit Referenz - und mit Wertsemantik . Welche
Semantik eine Variable hat, richtet sich nach ihrem Typ. Typen, die zu
Variablen mit Wertsemantik führen, sind die oben genannten primitiven , namentlich byte ,
short , int, long , float , double , boolean und char . Variablen, die mit einem anderen
Typ deklariert werden, haben Referenzsemantik.
Variablen werden in JAVA genau wie in SMALLTALK explizit per Zuwei-
sungsoperator = und implizit per Methodenaufruf Werte zugewiesen. Der
Inhalt von Variablen primitiver Typen ist ein entsprechender Wert, der der
anderen Typen immer eine Referenz auf ein Objekt.
Es gibt in JAVA genau wie in SMALLTALK keine Möglichkeit, Pointervariablen explizit zu de-
klarieren; es gibt also insbesondere beim Methodenaufruf (und den damit verbundenen
impliziten Zuweisungen) auch in JAVA kein Call by reference , sondern nur ein Call by value .
Daran ändert auch nichts, dass Variablen, die mit Referenztypen deklari ert sind, Referenz-
semantik haben — bei den impliziten Zuweisungen eines Methodenaufrufs wird den for-
malen Parametern immer eine Kopie des Zeigers übergeben. Siehe dazu auch die Bemer-
kungen in Abschnitt 4.3.2 (Kurseinheit 1) und Kapitel 37.
Seit JAVA 5 können Werte primitiven Typs an Variablen der entsprechen-
den Wrapper -Typen direkt zugewiesen werden und umgekehrt; dies
nennt man Auto boxing bzw. Auto unboxing . Dabei können allerdings, genau wie bei
der Handhabung bestimmter Werte als Objekte in SMALLTALK (s. Abschnitt 1.4 in Kursein-
heit 1), unerwartete Phänomene auftreten : Zwei Objekte, die den gleichen Wert repräsen-
tieren, sind zwar immer gleich, müssen aber nicht identisch sein. Man muss also auch in
JAVA genau überlegen, ob man die Equals -Methode oder den Test auf Identität (==) ver-
wendet; liegt man daneben, handelt man sich schwer zu findende Programmierfehler ein.

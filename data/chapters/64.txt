64 Kurze Methoden
Wer sich den Quellcode objektorientierter Programme ansieht, der wird auffallen, dass die
Methoden im Mittel ziemlich kurz sind. Wie bereits in Kurseinheit 6, Kapitel 56 erwähnt, ist
dies Folge des Umstandes, dass in der objektorientierten Programmierung die Funktionalität
auf Basis der Daten, von denen sie abhängt, aufgebrochen und aufgeteilt wird. Sobald ei ne
Funktion verschiedenartige Daten manipuliert (also Objekte, die Instanzen verschiedener
Klassen sind), ist es wahrscheinlich, dass diese Funktion nicht zur Gänze in einer Methode
implementiert wird.
Was hier zunächst wie eine unmittelbare Folge des objektorientierten Pa-
radigmas erscheint, hat sich zu einem objektorientierten Stil weiterentwi-
ckelt: Eine typische objektorientierte Programmiererin scheut sich nicht,
Methoden zu schreiben, die nur aus einer Zeile bestehen (oder die nur eine Anweisung,
wenn auch mit geschachtelten Ausdrücken, enthalten) — im Gegenteil, sie fühlt sich sogar
gut dabei, denn was sie da gerade produziert, gilt als objektorientierter Stil. So ist es sogar
üblich, Teile einer Methode in eine neue auszulag ern (das Extract -method -Refactoring, das
einige vielleicht aus ECLIPSE und ähnlichen Entwicklungsumgebungen kennen), auch wenn
dieser Teil (zunächst) ausschließlich von seiner ursprünglichen Position aus aufgerufen wird,
wenn es nur der besseren Lesbarkeit dient (also insbesondere Wiederverwendung keine
Rolle spielt). Ein po sitiver Begleiteffekt dieser starken Zergliederung von Funktionalität ist
die hohe Dichte an Bezeichnern in objektorientierten Programmen: Da jede Teilfunktion, die
in eine Methode ausgelagert wird, einen eigenen, eindeutigen (bis auf Überladen/Über-
schreib en) Namen haben muss , wird die Programmiererin dazu gezwungen, sich ständig (in
Form der Namenwahl für Bezeichner) dazu zu äußern, was sie gerade macht. automatische

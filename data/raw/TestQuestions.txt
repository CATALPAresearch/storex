{"question": "Warum sind identische Objekte immer gleich, gleiche Objekte aber nicht identisch?", "paragraph": "Objekte sind Stellen im Speicher, an denen die Daten, die ein Objekt ausmachen, hinterlegt sind. Die Identität eines Objekts ist mit der Speicherstelle gleichzusetzen. Das erklärt auf technische Weise, warum identische Objekte immer gleich, gleiche Objekte aber nicht identisch sind und warum die Veränderung (der Eigenschaften) eines Objekts seine Identität nicht berührt.", "answer": "Die Identität eines Objekts ist mit der Speicherstelle gleichzusetzen", "sentence": "Die Identität eines Objekts ist mit der Speicherstelle gleichzusetzen. Das erklärt auf technische Weise, warum identische Objekte immer gleich, gleiche Objekte aber nicht identisch sind"}
{"question": "Welchen Sinn hat es, den Programmierenden zu erlauben für jede Variable getrennt festzulegen, ob sie Wert- oder Verweissemantik haben soll? ", "paragraph": "Unter Wertsemantik können, solange jedes Objekt seine eigene Identität hat, zwei Variablen niemals dasselbe Objekt bezeichnen. Dies wird für die objektorientierte Programmierung eher als Nachteil angesehen. Manche Programmiersprachen erlauben der Programmiererin, für jede Variable getrennt festzulegen, ob sie Wert- oder Verweissemantik haben soll. Auf diesem Weg kann man Aliase vermeiden. Dies sollte man dann tun, wenn man verhindern möchte, dass die Veränderung des durch eine Variable bezeichneten Objekts zugleich die Veränderung der durch all seine Aliase bezeichneten Objekte (die ja alle dieselben sind) bewirkt. \nBei einer Zuweisung unter Wertsemantik muss, da die Variable das Objekt zum Inhalt hat (also in der Variable gespeichert ist) und ein Objekt nicht in zwei Variablen gespeichert sein kann, eine Kopie angefertigt werden.", "answer": "Aliase vermeiden", "sentence": "Manche Programmiersprachen erlauben der Programmiererin, für jede Variable getrennt festzulegen, ob sie Wert- oder Verweissemantik haben soll. Auf diesem Weg kann man Aliase vermeiden. Dies sollte man dann tun, wenn man verhindern möchte, dass die Veränderung des durch eine Variable bezeichneten Objekts zugleich die Veränderung der durch all seine Aliase bezeichneten Objekte (die ja alle dieselben sind) bewirkt."}
{"question": "Was sind Instanzvariablen?", "paragraph": "Jedem Objekt kann eine Menge von lokalen Variablen zugeordnet werden, die Instanzvariablen. Die Instanzvariablen eines Objekts sind in gewisser Weise in seinem Besitz: In SMALLTALK sind sie für andere Objekte nicht sichtbar und damit auch nicht zugreifbar. Die Sichtbarkeit ist also auf das jeweils besitzende Objekt eingeschränkt. ", "answer": "Jedem Objekt kann eine Menge von lokalen Variablen zugeordnet werden", "sentence": "Jedem Objekt kann eine Menge von lokalen Variablen zugeordnet werden, die Instanzvariablen."}
{"question": "Wie gelangen in SMALLTALK Objekte in den Besitz von Instanzvariablen?", "paragraph": "Man verbindet die Instanzvariablen mit Klassen und vereinbart, dass alle mit einer Klasse verbundenen Eigenschaften und Verhaltensspezifikationen nicht die Klasse in ihrer Gesamtheit, sondern die einzelnen Objekte, die zu der Klasse gehören, beschreiben. \nKlassendefnitionen bilden also eine Art Vorlage für Objekte. Um nun von einer solchen Vorlage Objekte mit Eigenschaften (Instanzvariablen und Methoden), wie sie durch die Defnition (Intension) festgelegt sind, zu erzeugen, muss man sie instanziieren. Die Instanziierung ist ein Vorgang, bei dem ein neues Objekt entsteht. \nMittels Instanziierung und Klassen hat man nun die Möglichkeit, neue - und neuartige - Objekte programmatisch, also per Programmausführung, zu erzeugen. Dies geschieht standardmäßig, indem man der Klasse, von der man eine Instanz haben möchte, die Nachricht new (für Klassen ohne indizierte Instanzvariablen) oder new: (für Klassen mit indizierten Instanzvariablen) schickt. Das neue Objekt wird in Reaktion auf die Nachricht (durch eine entsprechende primitive Methode des SMALLTALK-Systems) im Speicher angelegt und seine Instanzvariablen werden alle mit nil initialisiert.", "answer": "Instanziierung", "sentence": "Man verbindet die Instanzvariablen mit Klassen und vereinbart, dass alle mit einer Klasse verbundenen Eigenschaften und Verhaltensspezifikationen nicht die Klasse in ihrer Gesamtheit, sondern die einzelnen Objekte, die zu der Klasse gehören, beschreiben. \nKlassendefnitionen bilden also eine Art Vorlage für Objekte. Um nun von einer solchen Vorlage Objekte mit Eigenschaften (Instanzvariablen und Methoden), wie sie durch die Defnition (Intension) festgelegt sind, zu erzeugen, muss man sie instanziieren. Die Instanziierung ist ein Vorgang, bei dem ein neues Objekt entsteht. \nMittels Instanziierung und Klassen hat man nun die Möglichkeit, neue - und neuartige - Objekte programmatisch, also per Programmausführung, zu erzeugen."}
{"question": "Wie werden Beziehungen eines Objekts zu einem anderen in SMALLTALK realisiert?", "paragraph": "Die Beziehung eines Objekts zu einem anderen wird auf natürliche Weise durch eine benannte Instanzvariable ausgedrückt, wobei die Instanzvariable den Namen der Beziehung oder, besser noch, den Namen der Rolle des von der Variablen referenzierten Objektes in der Beziehung trägt. Ein Objekt kann, und wird häufig, in derselben Beziehung zu mehreren andern stehen. Genau dafür sind aber die indizierten Instanzvariablen wie geschaffen: Sie erlauben es, von einem Objekt zu beliebig vielen anderen Objekten zu navigieren, ohne für jedes andere eine eigene (jeweils anders) benannte Instanzvariable vorsehen zu müssen. Die Namen der Gegenüber sind einfach Indizes: 1, 2, 3 usw. ", "answer": "durch eine benannte Instanzvariable", "sentence": "Die Beziehung eines Objekts zu einem anderen wird auf natürliche Weise durch eine benannte Instanzvariable ausgedrückt, wobei die Instanzvariable den Namen der Beziehung oder, besser noch, den Namen der Rolle des von der Variablen referenzierten Objektes in der Beziehung trägt."}
{"question": "Wie werden Beziehungen eines Objekts zu mehreren anderen in SMALLTALK realisiert?", "paragraph": "Die Beziehung eines Objekts zu einem anderen wird auf natürliche Weise durch eine benannte Instanzvariable ausgedrückt, wobei die Instanzvariable den Namen der Beziehung oder, besser noch, den Namen der Rolle des von der Variablen referenzierten Objektes in der Beziehung trägt. Ein Objekt kann, und wird häufig, in derselben Beziehung zu mehreren andern stehen. Genau dafür sind aber die indizierten Instanzvariablen wie geschaffen: Sie erlauben es, von einem Objekt zu beliebig vielen anderen Objekten zu navigieren, ohne für jedes andere eine eigene (jeweils anders) benannte Instanzvariable vorsehen zu müssen. Die Namen der Gegenüber sind einfach Indizes: 1, 2, 3 usw. ", "answer": "indizierten Instanzvariablen", "sentence": "Ein Objekt kann, und wird häufig, in derselben Beziehung zu mehreren andern stehen. Genau dafür sind aber die indizierten Instanzvariablen wie geschaffen: Sie erlauben es, von einem Objekt zu beliebig vielen anderen Objekten zu navigieren, ohne für jedes andere eine eigene (jeweils anders) benannte Instanzvariable vorsehen zu müssen."}
{"question": "Wie kann man die Komposition in objektorientierten Programmiersprachen umsetzen?", "paragraph": "Die meisten (objektorientierten) Programmiersprachen bieten leider überhaupt kein Sprachkonstrukt an, das speziell für die Teil-Ganzes-Beziehung gedacht wäre. Gleichwohl kann man die Unterscheidung zwischen Instanzvariablen mit Referenz- und Wertsemantik, falls vorhanden, dazu nutzen, um zumindest eine spezielle Form der Teil-Ganzes-Beziehung abzubilden: Da bei Wertsemantik mit der Entfernung eines Objekts aus dem Speicher auch alle Objekte, die als Werte seiner Instanzvariablen dienen, aus dem Speicher entfernt werden, kann man hier tatsächlich von der Umsetzung einer bestimmten Form von Teil- Ganzes-Beziehung sprechen, nämlich einer solchen, bei der die Existenz der Teile von der Existenz des Ganzen abhängt (in der UML auch Komposition genannt). ", "answer": "leider überhaupt kein Sprachkonstrukt", "sentence": "Die meisten (objektorientierten) Programmiersprachen bieten leider überhaupt kein Sprachkonstrukt an, das speziell für die Teil-Ganzes-Beziehung gedacht wäre. Gleichwohl kann man die Unterscheidung zwischen Instanzvariablen mit Referenz- und Wertsemantik, falls vorhanden, dazu nutzen, um zumindest eine spezielle Form der Teil-Ganzes-Beziehung abzubilden"}
{"question": "Was macht den Zustand eines Objektes aus?", "paragraph": "Der Zustand eines Objektes ist die Summe der Belegungen seiner Instanzvariablen - er wird ausschließlich durch die Verknüpfung mit anderen Objekten definiert. Es folgt, dass die einzige Möglichkeit, den Zustand eines Objekts zu ändern, der über die Zuweisung von Instanzvariablen ist. ", "answer": "Summe der Belegungen seiner Instanzvariablen", "sentence": "Der Zustand eines Objektes ist die Summe der Belegungen seiner Instanzvariablen - er wird ausschließlich durch die Verknüpfung mit anderen Objekten definiert."}
{"question": "Wie Verändert man den Zustand eines Objektes?", "paragraph": "Der Zustand eines Objektes ist die Summe der Belegungen seiner Instanzvariablen - er wird ausschließlich durch die Verknüpfung mit anderen Objekten definiert. Es folgt, dass die einzige Möglichkeit, den Zustand eines Objekts zu ändern, der über die Zuweisung von Instanzvariablen ist. ", "answer": "über die Zuweisung von Instanzvariablen ", "sentence": "Es folgt, dass die einzige Möglichkeit, den Zustand eines Objekts zu ändern, der über die Zuweisung von Instanzvariablen ist."}
36 Klassen

JAVA ist (wie SMALLTALK und alle in der nächsten Kurseinheit behandelten Sprachen) klassenbasiert und nicht prototypenbasiert. Das bedeutet, dass man programmieren kann, indem man Klassendefinitionen angibt. Wie bereits in Kapitel 34 erwähnt, gibt es in JAVA keine Anweisungen außerhalb von Klassen (abgesehen von Import-Anweisungen).
Wie ebenfalls bereits erwähnt wurde, besteht in JAVA ein relativ enger Zusammenhang zwischen Klassen und Dateien. Jede Datei enthält die Definition einer Klasse, die den Dateinamen (ohne Erweiterung) als Namen trägt. Eine Datei (oder Compilation Unit) kann auch mehrere Klassen enthalten, die dann natürlich verschiedene Namen haben müssen. Es darf jedoch keine dieser Klassen als "public" deklariert werden. Dies liegt zum Teil daran, dass die meisten integrierten Entwicklungsumgebungen für JAVA heute auf Dateibasis arbeiten und Dateien die Grundlage vieler Versionsverwaltungssysteme bilden. Daher ist es wenig üblich, mehrere Klassen in einer Datei zu definieren, es sei denn, es handelt sich um innere Klassen (siehe unten).
Bereits in Kurseinheit 3, Kapitel 28, haben wir gesagt, dass Klassen und Typen zunächst zwei verschiedene Konzepte sind, aber eine Typdefinition aus einer Klassendefinition abgeleitet werden kann. Genau das trifft auf JAVA zu: Jede Klasse definiert ihren eigenen Typ. Genauer gesagt, spezifiziert jede Klasse einen Typ, der denselben Namen wie die Klasse trägt und Felddefinitionen sowie Methodendeklarationen der Klasse als Eigenschaften enthält.
Beachten Sie, dass im Gegensatz zu STRONGTALK in JAVA der Typ bei Deklarationen ohne spitze Klammern vorangestellt wird, in Anlehnung an die Tradition von C und C++. Die spitzen Klammern in Zeile 985 kennzeichnen lediglich metasyntaktische Variablen.

Frage: Was bedeutet es, dass JAVA eine klassenbasierte Programmiersprache ist, und wie unterscheidet sich dies von prototypenbasierten Sprachen?
Antwort: JAVA ist klassenbasiert, was bedeutet, dass Programmierung durch die Definition von Klassen erfolgt. Im Gegensatz dazu sind prototypenbasierte Sprachen wie SMALLTALK auf Prototypenobjekten aufgebaut, und es gibt keine strikten Klassendefinitionen.

Frage: Welchen Zusammenhang gibt es zwischen Klassen und Dateien in JAVA, und warum dürfen mehrere Klassen nicht als "public" deklariert werden?
Antwort: In JAVA entspricht normalerweise jede Datei der Definition einer Klasse mit dem gleichen Namen wie der Dateiname (ohne Erweiterung). Es ist möglich, mehrere Klassen in einer Datei zu definieren, aber keine dieser Klassen darf als "public" deklariert werden. Dies liegt an Konventionen, die die meisten integrierten Entwicklungsumgebungen und Versionsverwaltungssysteme unterstützen. In der Regel sollte jede Datei eine öffentliche Klasse mit demselben Namen enthalten.

Frage: Wie wird ein Typ in JAVA aus einer Klassendefinition abgeleitet?
Antwort: In JAVA spezifiziert jede Klasse ihren eigenen Typ. Der Typ trägt denselben Namen wie die Klasse und enthält Felddefinitionen sowie Methodendeklarationen der Klasse als Eigenschaften.

Frage: Welche Konvention wird in JAVA verwendet, um den Typ bei Deklarationen anzugeben, und wie unterscheidet sich dies von STRONGTALK?
Antwort: In JAVA wird der Typ bei Deklarationen ohne spitze Klammern vorangestellt. Dies unterscheidet sich von STRONGTALK, bei dem die spitzen Klammern in Deklarationen verwendet werden. In JAVA folgt die Typangabe der Tradition von C und C++.
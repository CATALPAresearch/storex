13.2.3 Arrays

Nicht zuletzt werden auch ganz banale Arrays häufig verwendet, insbesondere wegen der Möglichkeit der einfachen literalen Definition. So kann man ohne viel Aufwand über die Elemente einer beliebigen, ad hoc spezifizierten Aufzählung iterieren. Beispielsweise weist der Laufparameter des Blocks, "element", nacheinander die Elemente des literalen Arrays zu.
Der wesentliche Nachteil von Arrays ist, dass ihre Größe beschränkt ist. Benötigt man eine geordnete Collection, die beliebig wachsen kann, der also am Anfang, am Ende oder an einer beliebigen Position dazwischen Elemente hinzugefügt werden können, dann kann man auf Instanzen der Klasse "OrderedCollection" zurückgreifen. Diese eignen sich aufgrund des angebotenen Methodensatzes und ihres Protokolls speziell für die Implementierung von Stapeln (Stacks) und Puffern (Queues).

Frage: Warum werden Arrays in SMALLTALK häufig verwendet?
Antwort: Arrays werden in SMALLTALK häufig verwendet, insbesondere aufgrund ihrer einfachen literalen Definitionsmöglichkeiten. Sie ermöglichen es, über die Elemente einer beliebigen, ad hoc spezifizierten Aufzählung zu iterieren, ohne viel Aufwand betreiben zu müssen.

Frage: Was ist der wesentliche Nachteil von Arrays in SMALLTALK?
Antwort: Der wesentliche Nachteil von Arrays in SMALLTALK ist, dass ihre Größe beschränkt ist. Das bedeutet, dass die Anzahl der Elemente in einem Array begrenzt ist, und es schwierig oder teuer sein kann, die Größe eines Arrays dynamisch zu ändern, um mehr Elemente aufzunehmen.

Frage: Welche SMALLTALK-Klasse eignet sich besser für geordnete Collections, die beliebig wachsen können, und warum?
Antwort: Für geordnete Collections, die beliebig wachsen können und bei denen am Anfang, am Ende oder an einer beliebigen Position dazwischen Elemente hinzugefügt werden können, eignet sich die Klasse "OrderedCollection" besser als Arrays. OrderedCollections bieten einen geeigneten Methodensatz und ein Protokoll für die Implementierung von Stapeln (Stacks) und Puffern (Queues). Sie sind flexibler und können dynamisch wachsen, was Arrays nicht können.
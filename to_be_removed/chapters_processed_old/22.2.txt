22.2 Namensäquivalenz

Nun können Typen neben ihrer formalen Funktion, Fehler zu vermeiden, noch eine inhaltliche Funktion erfüllen, nämlich eine Filterfunktion. Diese setzt jedoch voraus, dass dem Typ auch eine Bedeutung, die über seine bloße Struktur (seine Syntax) hinausgeht, beigemessen werden kann. Dies geschieht heute vor allem durch die Benennung des Typs, die dann, gepaart mit der Namensäquivalenz als Bedingung der Zuweisungskompatibilität, verlangt, dass einer Variable nur Werte gleicher Bedeutung zugewiesen werden können. Eine Zuweisung einer Wohnung an ein Büro oder umgekehrt ist dann, trotz im obigen Beispiel strukturell gleich definierter Typen und deswegen ausbleibenden Typfehlern, aufgrund fehlender Namensgleichheit ausgeschlossen. Dies ist auch sinnvoll, da es sich dabei mit hoher Wahrscheinlichkeit um einen logischen Programmierfehler handelt, der auf mechanische Art sonst kaum zu entdecken wäre. Die Filterfunktion, die die geforderte Namensäquivalenz verlangt, drückt also eher eine Absicht der Programmiererin aus als eine technische Notwendigkeit. Die Bedeutung gerade dieser Funktion sollte man jedoch nicht unterschätzen, da nur wenige Möglichkeiten, Fehler in einem Programm aufzudecken bzw. zu vermeiden, so einfach zu handhaben sind.
Ein Prinzip, das der Typprüfung per Namensäquivalenz ähnelt, findet übrigens auch in der Physik Anwendung: Bei ihren Berechnungen führen Physikerinnen stets eine Art Typprüfung durch, indem sie nicht nur mit den Beträgen der physikalischen Größen, sondern auch mit deren Einheiten rechnen. Wenn Physikerinnen also beispielsweise eine Geschwindigkeit berechnen und bei der Behandlung der Einheiten etwas anderes als m/s herauskommt, dann steckt im Rechenvorgang ein Fehler — das Ergebnis hat nicht den richtigen Typ (die richtige Einheit) und ist deswegen mit hoher Wahrscheinlichkeit falsch.
Namensäquivalenz hat jedoch auch einen entscheidenden Nachteil: Sie setzt voraus, dass getrennt voneinander entwickelte Programme zumindest an ihren Schnittstellen (also da, wo Objekte ausgetauscht werden) dieselben Typen verwenden. Dies kann für die Interoperabilität von getrennt voneinander entwickelten Programmen (wie z. B. Web Services) ein echtes Hindernis sein.
Strukturelle Typäquivalenz bietet mehr Flexibilität als nominale: Sie erlaubt Äquivalenz von Typen, bei deren Definition man vom jeweils anderen nichts wusste. Die erhöhte Flexibilität hat jedoch ihren Preis: Zufällige strukturelle Übereinstimmungen können zu einer Äquivalenz führen, die nicht der intendierten Semantik entspricht. Type branding führt in solchen Fällen optional eine Namensäquivalenz durch die Hintertür ein, mit dem Vorteil, dass diese optional ist.

Frage: Was ist die inhaltliche Funktion, die Typen neben ihrer formalen Rolle erfüllen können, und wie wird sie in der Programmierung hergestellt?
Antwort: Typen können in der Programmierung neben ihrer formalen Rolle, Fehler zu vermeiden, auch eine inhaltliche Funktion erfüllen. Diese inhaltliche Funktion wird vor allem durch die Benennung des Typs hergestellt, gepaart mit der Namensäquivalenz als Bedingung der Zuweisungskompatibilität. Sie verlangt, dass einer Variable nur Werte gleicher Bedeutung zugewiesen werden können.

Frage: Warum ist die Namensäquivalenz als Bedingung der Zuweisungskompatibilität wichtig?
Antwort: Die Namensäquivalenz ist wichtig, da sie sicherstellt, dass einer Variable nur Werte gleicher Bedeutung zugewiesen werden können. Sie verhindert Zuweisungen zwischen Typen, die zwar strukturell gleich sind, aber unterschiedliche Bedeutungen haben. Dies ist entscheidend, um logische Programmierfehler zu vermeiden, die sonst schwer zu entdecken wären.

Frage: Welche Bedeutung hat die Filterfunktion, die durch die Namensäquivalenz verlangt wird?
Antwort: Die Filterfunktion, die durch die Namensäquivalenz verlangt wird, drückt die Absicht der Programmiererin aus, Werte nur gleicher Bedeutung zuzuweisen. Sie ermöglicht es, Fehler in einem Programm auf einfache Weise zu erkennen und zu vermeiden.

Frage: Welches Prinzip in der Physik ähnelt der Typprüfung per Namensäquivalenz, und wie wird es angewendet?
Antwort: Ein ähnliches Prinzip wie die Typprüfung per Namensäquivalenz wird in der Physik angewendet. Bei physikalischen Berechnungen prüfen Physikerinnen nicht nur die Beträge der physikalischen Größen, sondern auch deren Einheiten. Wenn die Einheiten nicht korrekt behandelt werden und das Ergebnis etwas anderes als erwartet ergibt, liegt ein Fehler im Rechenvorgang vor.

Frage: Welchen Nachteil hat die Namensäquivalenz in Bezug auf die Interoperabilität von getrennt voneinander entwickelten Programmen?
Antwort: Die Namensäquivalenz setzt voraus, dass getrennt voneinander entwickelte Programme zumindest an ihren Schnittstellen dieselben Typen verwenden. Dies kann ein Hindernis für die Interoperabilität von solchen Programmen, wie zum Beispiel Web Services, darstellen.

Frage: Was sind die Unterschiede zwischen struktureller Typäquivalenz und Namensäquivalenz in Bezug auf Flexibilität und Semantik?
Antwort: Strukturelle Typäquivalenz bietet mehr Flexibilität als Namensäquivalenz, da sie die Äquivalenz von Typen erlaubt, deren Definition voneinander unabhängig ist. Allerdings können zufällige strukturelle Übereinstimmungen zu einer Äquivalenz führen, die nicht der intendierten Semantik entspricht. Um diesen Nachteil zu vermeiden, kann optional eine Namensäquivalenz durch Type branding eingeführt werden.
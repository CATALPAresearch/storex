68.2 Automatische Überprüfung

Man kann sich fragen, ob sich die Einhaltung des Law of Demeter so wie die Einhaltung der Zugreifbarkeitsregeln automatisch überprüfen lässt. Dabei gibt es aber ein Problem: Das Gesetz ist nämlich oben in Termini von Objekten, nicht von Variablen oder Typen formuliert. Eine Überprüfung würde also die Auswertung von konkreten Zuweisungen und damit des dynamischen Programmflusses erfordern, die aber mechanisch extrem aufwendig bis gar nicht durchzuführen ist. Statt dessen prüfen automatische Checker des Law of Demeter zumeist lediglich die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters (wenn der Aufruf aus einer Methode heraus erfolgt, was meistens der Fall ist) haben. Daraus folgt, dass eine solche Prüfung in SMALLTALK nicht möglich ist (da Ausdrücke nicht typisiert sind).
Was aber tun, wenn man die Funktion von Ausdrücken wie oben haben und zugleich Demeters Gesetz folgen möchte? Die Antwort ist einfach: Man erweitert das Protokoll der Klasse des ersten Nachrichtenempfängers um die Methode(n), die man nicht verkettet aufrufen darf, also beispielsweise die Klasse des von "a" benannten Objekts um die Methode "doY". Da "a" das Ergebnis von "doX" ist, nennen wir es "b", muss "a" auch die Methode "doY" aufrufen und das Ergebnis zurückgeben. Die Implementierung von "doY" würde dann durch "^ b doY" abgeschlossen.
Komplizierter wird die Sache jedoch, wenn die Verkettung länger ist, wenn also der zu vermeidende Ausdruck "a doX doY doZ" heißen würde, denn dann müsste auch noch "doZ" zur Klasse von "a" hinzugefügt und mit entsprechenden Implementierungen versehen werden. Man ahnt schon, wohin das führt: zu einem Wachstum des Protokolls von "a".

Frage: Ist es möglich, die Einhaltung des Gesetzes Demeters automatisch zu überprüfen? Warum oder warum nicht?
Antwort: Die automatische Überprüfung des Gesetzes Demeters gestaltet sich schwierig, da das Gesetz in Bezug auf Objekte formuliert ist und die Auswertung von konkreten Zuweisungen und dynamischen Programmfluss erfordern würde, was mechanisch extrem aufwendig oder sogar unmöglich ist. Stattdessen überprüfen automatische Checker des Gesetzes Demeters in der Regel die Variablendeklarationen und ob alle Methodenaufrufe einer Klasse nur auf Ausdrücken erfolgen, die den Typ einer Instanzvariable oder eines formalen Parameters haben.

Frage: Warum ist die automatische Überprüfung des Gesetzes Demeters in SMALLTALK nicht möglich?
Antwort: In SMALLTALK ist die automatische Überprüfung des Gesetzes Demeters nicht möglich, da Ausdrücke in SMALLTALK nicht typisiert sind. Daher können Checker nicht feststellen, ob die Art und Weise, wie auf Objekte zugegriffen wird, dem Gesetz Demeters entspricht.

Frage: Wie kann man die Einhaltung des Gesetzes Demeters sicherstellen und dennoch die Funktionalität von Ausdrücken beibehalten?
Antwort: Um sowohl die Funktionalität von Ausdrücken beizubehalten als auch das Gesetz Demeters einzuhalten, kann man das Protokoll der Klasse des ersten Nachrichtenempfängers erweitern. Dies bedeutet, dass die Klasse des von "a" benannten Objekts um die Methode "doY" erweitert wird, wenn "a" das Ergebnis von "doX" ist. Dadurch wird sicherer gestellt, dass "a" auch die Methode "doY" aufruft und das Ergebnis zurückgibt.

Frage: Was wird komplizierter, wenn die Verkettung von Methodenaufrufen länger ist?
Antwort: Die Sache wird komplizierter, wenn die Verkettung von Methodenaufrufen länger ist, da dann alle Methoden in der Verkettung zur Klasse des ersten Nachrichtenempfängers hinzugefügt und mit entsprechenden Implementierungen versehen werden müssen. Dies führt zu einem Wachstum des Protokolls der Klasse des ersten Nachrichtenempfängers.